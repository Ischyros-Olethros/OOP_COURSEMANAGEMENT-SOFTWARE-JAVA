@startuml

title __JDBC's Class Diagram__\n

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.AbandonedConnectionCleanupThread {
        {static} ~ threadRef : Thread
        {static} - cleanupThreadExcecutorService : ExecutorService
        {static} - connectionFinalizerPhantomRefs : Map<ConnectionFinalizerPhantomReference, ConnectionFinalizerPhantomReference>
        {static} - referenceQueue : ReferenceQueue<MySQLConnection>
        {static} - threadRefLock : Lock
        {static} + checkedShutdown()
        {static} + getThread()
        {static} + isAlive()
        + run()
        {static} + uncheckedShutdown()
        {static} # trackConnection()
        - AbandonedConnectionCleanupThread()
        - checkThreadContextClassLoader()
        {static} - consistentClassLoaders()
        {static} - finalizeResource()
        {static} - shutdown()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.AbandonedConnectionCleanupThread.ConnectionFinalizerPhantomReference {
        - networkResources : NetworkResources
        ~ ConnectionFinalizerPhantomReference()
        ~ finalizeResources()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.AssertionFailedException {
        {static} - serialVersionUID : long
        + AssertionFailedException()
        {static} + shouldNotHappen()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.AuthenticationPlugin {
        {abstract} + getProtocolPluginName()
        {abstract} + isReusable()
        {abstract} + nextAuthenticationStep()
        {abstract} + requiresConfidentiality()
        {abstract} + reset()
        {abstract} + setAuthenticationParameters()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.BalanceStrategy {
        {abstract} + pickConnection()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.BestResponseTimeBalanceStrategy {
        + BestResponseTimeBalanceStrategy()
        + destroy()
        + init()
        + pickConnection()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Blob {
        - binaryData : byte[]
        - exceptionInterceptor : ExceptionInterceptor
        - isClosed : boolean
        + free()
        + getBinaryStream()
        + getBinaryStream()
        + getBytes()
        + length()
        + position()
        + position()
        + setBinaryStream()
        + setBytes()
        + setBytes()
        + streamClosed()
        + streamClosed()
        + truncate()
        ~ Blob()
        ~ Blob()
        ~ Blob()
        - checkClosed()
        - getBinaryData()
        - setBinaryData()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.BlobFromLocator {
        - blobColumnName : String
        - creatorResultSet : ResultSetImpl
        - exceptionInterceptor : ExceptionInterceptor
        - numColsInResultSet : int
        - numPrimaryKeys : int
        - primaryKeyColumns : List<String>
        - primaryKeyValues : List<String>
        - quotedId : String
        - tableName : String
        + free()
        + getBinaryStream()
        + getBinaryStream()
        + getBytes()
        + length()
        + position()
        + position()
        + setBinaryStream()
        + setBytes()
        + setBytes()
        + truncate()
        ~ BlobFromLocator()
        ~ createGetBytesStatement()
        ~ getBytesInternal()
        - notEnoughInformationInQuery()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.BlobFromLocator.LocatorInputStream {
        ~ currentPositionInBlob : long
        ~ length : long
        ~ pStmt : PreparedStatement
        + close()
        + read()
        + read()
        + read()
        ~ LocatorInputStream()
        ~ LocatorInputStream()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Buffer {
        {static} + TYPE_ID_AUTH_SWITCH : short
        {static} + TYPE_ID_EOF : short
        {static} + TYPE_ID_ERROR : short
        {static} + TYPE_ID_LOCAL_INFILE : short
        {static} + TYPE_ID_OK : short
        # wasMultiPacket : boolean
        {static} ~ MAX_BYTES_TO_DUMP : int
        {static} ~ NO_LENGTH_LIMIT : int
        {static} ~ NULL_LENGTH : long
        - bufLength : int
        - byteBuffer : byte[]
        - position : int
        + Buffer()
        + fastSkipLenByteArray()
        + fastSkipLenString()
        + getBufLength()
        + getByteBuffer()
        + getNioBuffer()
        + getPosition()
        + readString()
        + setBufLength()
        + setByteBuffer()
        + setPosition()
        + setWasMultiPacket()
        + toString()
        + toSuperString()
        + wasMultiPacket()
        + writeByte()
        + writeBytesNoNull()
        # getBufferSource()
        ~ Buffer()
        ~ clear()
        ~ dump()
        ~ dump()
        ~ dumpClampedBytes()
        ~ dumpHeader()
        ~ dumpNBytes()
        ~ ensureCapacity()
        ~ getBytes()
        ~ getBytes()
        ~ getCapacity()
        ~ isAuthMethodSwitchRequestPacket()
        ~ isEOFPacket()
        ~ isOKPacket()
        ~ isRawPacket()
        ~ isResultSetOKPacket()
        ~ newReadLength()
        ~ readByte()
        ~ readByte()
        ~ readFieldLength()
        ~ readInt()
        ~ readIntAsLong()
        ~ readLenByteArray()
        ~ readLength()
        ~ readLong()
        ~ readLongInt()
        ~ readLongLong()
        ~ readString()
        ~ readString()
        ~ readnBytes()
        ~ writeBytesNoNull()
        ~ writeDouble()
        ~ writeFieldLength()
        ~ writeFloat()
        ~ writeInt()
        ~ writeLenBytes()
        ~ writeLenString()
        ~ writeLong()
        ~ writeLongInt()
        ~ writeLongLong()
        ~ writeString()
        ~ writeString()
        ~ writeStringNoNull()
        ~ writeStringNoNull()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.BufferRow {
        - homePosition : int
        - isBinaryEncoded : boolean
        - isNull : boolean[]
        - lastRequestedIndex : int
        - lastRequestedPos : int
        - metadata : Field[]
        - openStreams : List<InputStream>
        - preNullBitmaskHomePosition : int
        - rowFromServer : Buffer
        + BufferRow()
        + closeOpenStreams()
        + getBinaryInputStream()
        + getBytesSize()
        + getColumnValue()
        + getDateFast()
        + getInt()
        + getLong()
        + getNativeDate()
        + getNativeDateTimeValue()
        + getNativeDouble()
        + getNativeFloat()
        + getNativeInt()
        + getNativeLong()
        + getNativeShort()
        + getNativeTime()
        + getNativeTimestamp()
        + getReader()
        + getString()
        + getTimeFast()
        + getTimestampFast()
        + isFloatingPointNumber()
        + isNull()
        + length()
        + setColumnValue()
        + setMetadata()
        - findAndSeekToOffset()
        - findAndSeekToOffsetForBinaryEncoding()
        - setupIsNullBitmask()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ByteArrayRow {
        ~ internalRowData : byte[][]
        + ByteArrayRow()
        + closeOpenStreams()
        + getBinaryInputStream()
        + getBytesSize()
        + getColumnValue()
        + getDateFast()
        + getInt()
        + getLong()
        + getNativeDate()
        + getNativeDateTimeValue()
        + getNativeDouble()
        + getNativeFloat()
        + getNativeInt()
        + getNativeLong()
        + getNativeShort()
        + getNativeTime()
        + getNativeTimestamp()
        + getReader()
        + getString()
        + getTimeFast()
        + getTimestampFast()
        + isFloatingPointNumber()
        + isNull()
        + length()
        + setColumnValue()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.CacheAdapter {
        {abstract} + get()
        {abstract} + invalidate()
        {abstract} + invalidateAll()
        {abstract} + invalidateAll()
        {abstract} + put()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.CacheAdapterFactory {
        {abstract} + getInstance()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.CachedResultSetMetaData {
        ~ columnNameToIndex : Map<String, Integer>
        ~ fields : Field[]
        ~ fullColumnNameToIndex : Map<String, Integer>
        ~ metadata : ResultSetMetaData
        + getColumnNameToIndex()
        + getFields()
        + getFullColumnNameToIndex()
        + getMetadata()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.CallableStatement {
        {static} # JDBC_4_CSTMT_2_ARGS_CTOR : Constructor<?>
        {static} # JDBC_4_CSTMT_4_ARGS_CTOR : Constructor<?>
        # callingStoredFunction : boolean
        # outputParamWasNull : boolean
        {static} - NOT_OUTPUT_PARAMETER_INDICATOR : int
        {static} - PARAMETER_NAMESPACE_PREFIX : String
        - functionReturnValueResults : ResultSetInternalMethods
        - hasOutputParams : boolean
        - outputParameterResults : ResultSetInternalMethods
        - parameterIndexToRsIndex : int[]
        - placeholderToParameterIndexMap : int[]
        + CallableStatement()
        + CallableStatement()
        + addBatch()
        + clearParameters()
        + execute()
        + executeBatch()
        + executeLargeBatch()
        + executeLargeUpdate()
        + executeQuery()
        + executeUpdate()
        + getArray()
        + getArray()
        + getBigDecimal()
        + getBigDecimal()
        + getBigDecimal()
        + getBlob()
        + getBlob()
        + getBoolean()
        + getBoolean()
        + getByte()
        + getByte()
        + getBytes()
        + getBytes()
        + getClob()
        + getClob()
        + getDate()
        + getDate()
        + getDate()
        + getDate()
        + getDouble()
        + getDouble()
        + getFloat()
        + getFloat()
        + getInt()
        + getInt()
        + getLong()
        + getLong()
        + getObject()
        + getObject()
        + getObject()
        + getObject()
        + getObject()
        + getObject()
        + getParameterMetaData()
        + getRef()
        + getRef()
        + getShort()
        + getShort()
        + getString()
        + getString()
        + getTime()
        + getTime()
        + getTime()
        + getTime()
        + getTimestamp()
        + getTimestamp()
        + getTimestamp()
        + getTimestamp()
        + getURL()
        + getURL()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + setAsciiStream()
        + setAsciiStream()
        + setAsciiStream()
        + setBigDecimal()
        + setBinaryStream()
        + setBinaryStream()
        + setBinaryStream()
        + setBlob()
        + setBlob()
        + setBlob()
        + setBoolean()
        + setByte()
        + setBytes()
        + setCharacterStream()
        + setCharacterStream()
        + setCharacterStream()
        + setClob()
        + setClob()
        + setClob()
        + setDate()
        + setDate()
        + setDouble()
        + setFloat()
        + setInt()
        + setLong()
        + setNCharacterStream()
        + setNCharacterStream()
        + setNull()
        + setNull()
        + setObject()
        + setObject()
        + setObject()
        + setShort()
        + setString()
        + setTime()
        + setTime()
        + setTimestamp()
        + setTimestamp()
        + setURL()
        + wasNull()
        # checkReadOnlySafeStatement()
        # fixParameterName()
        {static} # getInstance()
        {static} # getInstance()
        # getNamedParamIndex()
        # getOutputParameters()
        # getParamTypes()
        # getParameterIndexOffset()
        # mapOutputParameterIndexToRsIndex()
        - checkIsOutputParam()
        - checkParameterIndexBounds()
        - checkReadOnlyProcedure()
        - checkStreamability()
        - convertGetProcedureColumnsToInternalDescriptors()
        - determineParameterTypes()
        - extractProcedureName()
        - fakeParameterTypes()
        - generateParameterMap()
        - hasParametersView()
        {static} - mangleParameterName()
        - retrieveOutParams()
        - setInOutParamsOnServer()
        - setOutParams()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.CallableStatement.CallableStatementParam {
        ~ desiredJdbcType : int
        ~ inOutModifier : int
        ~ index : int
        ~ isIn : boolean
        ~ isOut : boolean
        ~ jdbcType : int
        ~ nullability : short
        ~ paramName : String
        ~ precision : int
        ~ scale : int
        ~ typeName : String
        # clone()
        ~ CallableStatementParam()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.CallableStatement.CallableStatementParamInfo {
        ~ catalogInUse : String
        ~ isFunctionCall : boolean
        ~ isReadOnlySafeChecked : boolean
        ~ isReadOnlySafeProcedure : boolean
        ~ nativeSql : String
        ~ numParameters : int
        ~ parameterList : List<CallableStatementParam>
        ~ parameterMap : Map<String, CallableStatementParam>
        + getParameterClassName()
        + getParameterCount()
        + getParameterMode()
        + getParameterType()
        + getParameterTypeName()
        + getPrecision()
        + getScale()
        + isNullable()
        + isSigned()
        + isWrapperFor()
        + unwrap()
        # checkBounds()
        # clone()
        ~ CallableStatementParamInfo()
        ~ CallableStatementParamInfo()
        ~ getParameter()
        ~ getParameter()
        ~ iterator()
        ~ numberOfParameters()
        - addParametersFromDBMD()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.CharsetMapping {
        {static} + CHARSET_NAME_TO_CHARSET : Map<String, MysqlCharset>
        {static} + CHARSET_NAME_TO_COLLATION_INDEX : Map<String, Integer>
        {static} + COLLATION_INDEX_TO_CHARSET : MysqlCharset[]
        {static} + COLLATION_INDEX_TO_COLLATION_NAME : String[]
        {static} + COLLATION_NOT_DEFINED : String
        {static} + MAP_SIZE : int
        {static} + MYSQL_COLLATION_INDEX_binary : int
        {static} + MYSQL_COLLATION_INDEX_utf8 : int
        {static} + NOT_USED : String
        {static} + UTF8MB4_INDEXES : Set<Integer>
        {static} - ERROR_MESSAGE_FILE_TO_MYSQL_CHARSET : Map<String, String>
        {static} - ESCAPE_ENCODINGS : Set<String>
        {static} - JAVA_ENCODING_UC_TO_MYSQL_CHARSET : Map<String, List<MysqlCharset>>
        {static} - MULTIBYTE_ENCODINGS : Set<String>
        {static} - MYSQL_4_0_CHARSET_NAME_cp1251cias : String
        {static} - MYSQL_4_0_CHARSET_NAME_cp1251csas : String
        {static} - MYSQL_4_0_CHARSET_NAME_croat : String
        {static} - MYSQL_4_0_CHARSET_NAME_czech : String
        {static} - MYSQL_4_0_CHARSET_NAME_danish : String
        {static} - MYSQL_4_0_CHARSET_NAME_dos : String
        {static} - MYSQL_4_0_CHARSET_NAME_estonia : String
        {static} - MYSQL_4_0_CHARSET_NAME_euc_kr : String
        {static} - MYSQL_4_0_CHARSET_NAME_german1 : String
        {static} - MYSQL_4_0_CHARSET_NAME_hungarian : String
        {static} - MYSQL_4_0_CHARSET_NAME_koi8_ru : String
        {static} - MYSQL_4_0_CHARSET_NAME_koi8_ukr : String
        {static} - MYSQL_4_0_CHARSET_NAME_latin1_de : String
        {static} - MYSQL_4_0_CHARSET_NAME_latvian : String
        {static} - MYSQL_4_0_CHARSET_NAME_latvian1 : String
        {static} - MYSQL_4_0_CHARSET_NAME_usa7 : String
        {static} - MYSQL_4_0_CHARSET_NAME_win1250 : String
        {static} - MYSQL_4_0_CHARSET_NAME_win1251 : String
        {static} - MYSQL_4_0_CHARSET_NAME_win1251ukr : String
        {static} - MYSQL_CHARSET_NAME_armscii8 : String
        {static} - MYSQL_CHARSET_NAME_ascii : String
        {static} - MYSQL_CHARSET_NAME_big5 : String
        {static} - MYSQL_CHARSET_NAME_binary : String
        {static} - MYSQL_CHARSET_NAME_cp1250 : String
        {static} - MYSQL_CHARSET_NAME_cp1251 : String
        {static} - MYSQL_CHARSET_NAME_cp1256 : String
        {static} - MYSQL_CHARSET_NAME_cp1257 : String
        {static} - MYSQL_CHARSET_NAME_cp850 : String
        {static} - MYSQL_CHARSET_NAME_cp852 : String
        {static} - MYSQL_CHARSET_NAME_cp866 : String
        {static} - MYSQL_CHARSET_NAME_cp932 : String
        {static} - MYSQL_CHARSET_NAME_dec8 : String
        {static} - MYSQL_CHARSET_NAME_eucjpms : String
        {static} - MYSQL_CHARSET_NAME_euckr : String
        {static} - MYSQL_CHARSET_NAME_gb18030 : String
        {static} - MYSQL_CHARSET_NAME_gb2312 : String
        {static} - MYSQL_CHARSET_NAME_gbk : String
        {static} - MYSQL_CHARSET_NAME_geostd8 : String
        {static} - MYSQL_CHARSET_NAME_greek : String
        {static} - MYSQL_CHARSET_NAME_hebrew : String
        {static} - MYSQL_CHARSET_NAME_hp8 : String
        {static} - MYSQL_CHARSET_NAME_keybcs2 : String
        {static} - MYSQL_CHARSET_NAME_koi8r : String
        {static} - MYSQL_CHARSET_NAME_koi8u : String
        {static} - MYSQL_CHARSET_NAME_latin1 : String
        {static} - MYSQL_CHARSET_NAME_latin2 : String
        {static} - MYSQL_CHARSET_NAME_latin5 : String
        {static} - MYSQL_CHARSET_NAME_latin7 : String
        {static} - MYSQL_CHARSET_NAME_macce : String
        {static} - MYSQL_CHARSET_NAME_macroman : String
        {static} - MYSQL_CHARSET_NAME_sjis : String
        {static} - MYSQL_CHARSET_NAME_swe7 : String
        {static} - MYSQL_CHARSET_NAME_tis620 : String
        {static} - MYSQL_CHARSET_NAME_ucs2 : String
        {static} - MYSQL_CHARSET_NAME_ujis : String
        {static} - MYSQL_CHARSET_NAME_utf16 : String
        {static} - MYSQL_CHARSET_NAME_utf16le : String
        {static} - MYSQL_CHARSET_NAME_utf32 : String
        {static} - MYSQL_CHARSET_NAME_utf8 : String
        {static} - MYSQL_CHARSET_NAME_utf8mb4 : String
        {static} - numberOfEncodingsConfigured : int
        {static} + getCollationIndexForJavaEncoding()
        {static} + getJavaEncodingForCollationIndex()
        {static} + getJavaEncodingForCollationIndex()
        {static} + getJavaEncodingForMysqlCharset()
        {static} + getJavaEncodingForMysqlCharset()
        {static} + getMblen()
        {static} + getMysqlCharsetForJavaEncoding()
        {static} + getMysqlCharsetNameForCollationIndex()
        {static} + isMultibyteCharset()
        {static} ~ getCharacterEncodingForErrorMessages()
        {static} ~ getNumberOfCharsetsConfigured()
        {static} ~ requiresEscapeEasternUnicode()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Clob {
        - charData : String
        - exceptionInterceptor : ExceptionInterceptor
        + free()
        + getAsciiStream()
        + getCharacterStream()
        + getCharacterStream()
        + getSubString()
        + length()
        + position()
        + position()
        + setAsciiStream()
        + setCharacterStream()
        + setString()
        + setString()
        + streamClosed()
        + truncate()
        + writerClosed()
        + writerClosed()
        ~ Clob()
        ~ Clob()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Collation {
        + collationName : String
        + index : int
        + priority : int
        + Collation()
        + toString()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.CommunicationsException {
        {static} ~ serialVersionUID : long
        - exceptionMessage : String
        + CommunicationsException()
        + getMessage()
        + getSQLState()
        + setWasStreamingResults()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.CompressedInputStream {
        - buffer : byte[]
        - in : InputStream
        - inflater : Inflater
        - log : Log
        - packetHeaderBuffer : byte[]
        - pos : int
        - traceProtocol : BooleanConnectionProperty
        + CompressedInputStream()
        + available()
        + close()
        + read()
        + read()
        + read()
        + skip()
        - getNextPacketFromServer()
        - getNextPacketIfRequired()
        - readFully()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.Connection {
        {abstract} + abort()
        {abstract} + abortInternal()
        {abstract} + changeUser()
        {abstract} + checkClosed()
        {abstract} + clearHasTriedMaster()
        {abstract} + clientPrepareStatement()
        {abstract} + clientPrepareStatement()
        {abstract} + clientPrepareStatement()
        {abstract} + clientPrepareStatement()
        {abstract} + clientPrepareStatement()
        {abstract} + clientPrepareStatement()
        {abstract} + getActiveStatementCount()
        {abstract} + getAutoIncrementIncrement()
        {abstract} + getConnectionMutex()
        {abstract} + getHost()
        {abstract} + getIdleFor()
        {abstract} + getLog()
        {abstract} + getNetworkTimeout()
        {abstract} + getProperties()
        {abstract} + getSchema()
        {abstract} + getServerCharacterEncoding()
        {abstract} + getServerCharset()
        {abstract} + getServerTimezoneTZ()
        {abstract} + getSessionMaxRows()
        {abstract} + getStatementComment()
        {abstract} + hasSameProperties()
        {abstract} + hasTriedMaster()
        {abstract} + initializeExtension()
        {abstract} + isAbonormallyLongQuery()
        {abstract} + isInGlobalTx()
        {abstract} + isMasterConnection()
        {abstract} + isNoBackslashEscapesSet()
        {abstract} + isSameResource()
        {abstract} + isServerLocal()
        {abstract} + lowerCaseTableNames()
        {abstract} + parserKnowsUnicode()
        {abstract} + ping()
        {abstract} + reportQueryTime()
        {abstract} + resetServerState()
        {abstract} + serverPrepareStatement()
        {abstract} + serverPrepareStatement()
        {abstract} + serverPrepareStatement()
        {abstract} + serverPrepareStatement()
        {abstract} + serverPrepareStatement()
        {abstract} + serverPrepareStatement()
        {abstract} + setFailedOver()
        {abstract} + setInGlobalTx()
        {abstract} + setNetworkTimeout()
        {abstract} + setPreferSlaveDuringFailover()
        {abstract} + setProxy()
        {abstract} + setSchema()
        {abstract} + setSessionMaxRows()
        {abstract} + setStatementComment()
        {abstract} + shutdownServer()
        {abstract} + supportsIsolationLevel()
        {abstract} + supportsQuotedIdentifiers()
        {abstract} + supportsTransactions()
        {abstract} + versionMeetsMinimum()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionFeatureNotAvailableException {
        {static} ~ serialVersionUID : long
        + ConnectionFeatureNotAvailableException()
        + getMessage()
        + getSQLState()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionGroup {
        - activeConnections : long
        - activeHosts : int
        - closedHosts : Set<String>
        - closedProxyTotalPhysicalConnections : long
        - closedProxyTotalTransactions : long
        - connectionProxies : HashMap<Long, LoadBalancedConnectionProxy>
        - connections : long
        - groupName : String
        - hostList : Set<String>
        - isInitialized : boolean
        + addHost()
        + addHost()
        + closeConnectionProxy()
        + getActiveHostCount()
        + getActiveLogicalConnectionCount()
        + getActivePhysicalConnectionCount()
        + getClosedHosts()
        + getGroupName()
        + getInitialHosts()
        + getTotalLogicalConnectionCount()
        + getTotalPhysicalConnectionCount()
        + getTotalTransactionCount()
        + registerConnectionProxy()
        + removeHost()
        + removeHost()
        + removeHost()
        ~ ConnectionGroup()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionGroupManager {
        {static} - GROUP_MAP : HashMap<String, ConnectionGroup>
        {static} - hasRegisteredJmx : boolean
        {static} - mbean : LoadBalanceConnectionGroupManager
        {static} + addHost()
        {static} + getActiveHostCount()
        {static} + getActiveHostLists()
        {static} + getActiveLogicalConnectionCount()
        {static} + getActivePhysicalConnectionCount()
        {static} + getConnectionGroup()
        {static} + getConnectionGroupInstance()
        {static} + getRegisteredConnectionGroups()
        {static} + getTotalHostCount()
        {static} + getTotalLogicalConnectionCount()
        {static} + getTotalPhysicalConnectionCount()
        {static} + getTotalTransactionCount()
        {static} + registerJmx()
        {static} + removeHost()
        {static} + removeHost()
        {static} - getGroupsMatching()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionImpl {
        {static} + JDBC_LOCAL_CHARACTER_SET_RESULTS : String
        {static} + charsetMap : Map<?, ?>
        + indexToCustomMysqlCharset : Map<Integer, String>
        {static} # DEFAULT_LOGGER_CLASS : String
        # props : Properties
        # resultSetMetadataCache : LRUCache<String, CachedResultSetMetaData>
        {static} # roundRobinStatsMap : Map<?, ?>
        {static} - ABORT_PERM : SQLPermission
        {static} - CHARSET_CONVERTER_NOT_AVAILABLE_MARKER : Object
        {static} - DEFAULT_RESULT_SET_CONCURRENCY : int
        {static} - DEFAULT_RESULT_SET_TYPE : int
        {static} - HISTOGRAM_BUCKETS : int
        {static} - JDBC_4_CONNECTION_CTOR : Constructor<?>
        {static} - LOGGER_INSTANCE_NAME : String
        {static} - NULL_LOGGER : Log
        {static} - SERVER_VERSION_STRING_VAR_NAME : String
        {static} - SET_NETWORK_TIMEOUT_PERM : SQLPermission
        - autoCommit : boolean
        - autoIncrementIncrement : int
        - cachedPreparedStatementParams : CacheAdapter<String, ParseInfo>
        - cancelTimer : Timer
        - characterSetMetadata : String
        - characterSetResultsOnServer : String
        - charsetConverterMap : Map<String, Object>
        - connectionCreationTimeMillis : long
        - connectionId : long
        - connectionLifecycleInterceptors : List<Extension>
        {static} - customCharsetToMblenMapByUrl : Map<String, Map<String, Integer>>
        {static} - customIndexToCharsetMapByUrl : Map<String, Map<Integer, String>>
        - database : String
        - dbmd : DatabaseMetaData
        - defaultTimeZone : TimeZone
        - errorMessageEncoding : String
        - eventSink : ProfilerEventHandler
        - exceptionInterceptor : ExceptionInterceptor
        - forceClosedReason : Throwable
        - hasIsolationLevels : boolean
        - hasQuotedIdentifiers : boolean
        - hasTriedMasterFlag : boolean
        - host : String
        - hostPortPair : String
        - io : MysqlIO
        - isClientTzUTC : boolean
        - isClosed : boolean
        - isInGlobalTx : boolean
        - isRunningOnJDK13 : boolean
        - isServerTzUTC : boolean
        - isolationLevel : int
        - lastQueryFinishedTime : long
        - log : Log
        - longestQueryTimeMs : long
        - lowerCaseTableNames : boolean
        {static} - mapTransIsolationNameToValue : Map<String, Integer>
        - maximumNumberTablesAccessed : long
        - metricsLastReportedMs : long
        - minimumNumberTablesAccessed : long
        - myURL : String
        - mysqlCharsetToCustomMblen : Map<String, Integer>
        - needsPing : boolean
        - netBufferLength : int
        - noBackslashEscapes : boolean
        - numTablesMetricsHistBreakpoints : long[]
        - numTablesMetricsHistCounts : int[]
        - numberOfPreparedExecutes : long
        - numberOfPrepares : long
        - numberOfQueriesIssued : long
        - numberOfResultSetsCreated : long
        - oldHistBreakpoints : long[]
        - oldHistCounts : int[]
        - openStatements : CopyOnWriteArrayList<Statement>
        - origDatabaseToConnectTo : String
        - origHostToConnectTo : String
        - origPortToConnectTo : int
        - parsedCallableStatementCache : LRUCache<CompoundCacheKey, CallableStatementParamInfo>
        - parserKnowsUnicode : boolean
        - password : String
        - perfMetricsHistBreakpoints : long[]
        - perfMetricsHistCounts : int[]
        - port : int
        - proxy : MySQLConnection
        - queryTimeCount : long
        - queryTimeMean : double
        - queryTimeSum : double
        - queryTimeSumSquares : double
        {static} - random : Random
        - readInfoMsg : boolean
        - readOnly : boolean
        - realProxy : InvocationHandler
        - requiresEscapingEncoder : boolean
        {static} - serialVersionUID : long
        - serverConfigCache : CacheAdapter<String, Map<String, String>>
        - serverSideStatementCache : LRUCache<CompoundCacheKey, ServerPreparedStatement>
        - serverSideStatementCheckCache : LRUCache<String, Boolean>
        - serverTimezoneTZ : TimeZone
        - serverTruncatesFracSecs : boolean
        - serverVariables : Map<String, String>
        - sessionCalendar : Calendar
        - sessionMaxRows : int
        - shortestQueryTimeMs : long
        - statementComment : String
        - statementInterceptors : List<StatementInterceptorV2>
        - storesLowerCaseTableName : boolean
        - totalQueryTimeMs : double
        - transactionsSupported : boolean
        - typeMap : Map<String, Class<?>>
        - useAnsiQuotes : boolean
        - usePlatformCharsetConverters : boolean
        - useServerPreparedStmts : boolean
        - user : String
        - utcCalendar : Calendar
        + ConnectionImpl()
        + abort()
        + abortInternal()
        + changeUser()
        + checkClosed()
        + clearHasTriedMaster()
        + clearWarnings()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + close()
        + commit()
        + createNewIO()
        + createStatement()
        + createStatement()
        + createStatement()
        + decachePreparedStatement()
        + dumpTestcaseQuery()
        + duplicate()
        + execSQL()
        + execSQL()
        + extractSqlFromPacket()
        + generateConnectionCommentBlock()
        + getActiveMySQLConnection()
        + getActiveStatementCount()
        + getAutoCommit()
        + getAutoIncrementIncrement()
        + getCachedMetaData()
        + getCalendarInstanceForSessionOrNew()
        + getCancelTimer()
        + getCatalog()
        + getCharacterSetMetadata()
        + getCharsetConverter()
        + getCharsetNameForIndex()
        + getConnectionMutex()
        + getDefaultTimeZone()
        + getEncodingForIndex()
        + getErrorMessageEncoding()
        + getExceptionInterceptor()
        + getHoldability()
        + getHost()
        + getHostPortPair()
        + getIO()
        + getId()
        + getIdleFor()
        + getLoadBalanceSafeProxy()
        + getLog()
        + getMaxBytesPerChar()
        + getMaxBytesPerChar()
        + getMetaData()
        + getMetadataSafeStatement()
        + getMetadataSafeStatement()
        + getMultiHostSafeProxy()
        + getNetBufferLength()
        + getNetworkTimeout()
        + getProfilerEventHandlerInstance()
        + getProperties()
        + getQueryTimingUnits()
        + getRequiresEscapingEncoder()
        + getSchema()
        + getServerCharacterEncoding()
        + getServerCharset()
        + getServerMajorVersion()
        + getServerMinorVersion()
        + getServerSubMinorVersion()
        + getServerTimezoneTZ()
        + getServerVariable()
        + getServerVersion()
        + getSessionLockedCalendar()
        + getSessionMaxRows()
        + getStatementComment()
        + getStatementInterceptorsInstances()
        + getTransactionIsolation()
        + getTypeMap()
        + getURL()
        + getUser()
        + getUtcCalendar()
        + getWarnings()
        + hasSameProperties()
        + hasTriedMaster()
        + incrementNumberOfPreparedExecutes()
        + incrementNumberOfPrepares()
        + incrementNumberOfResultSetsCreated()
        + initializeExtension()
        + initializeResultsMetadataFromCache()
        + initializeSafeStatementInterceptors()
        + isAbonormallyLongQuery()
        + isClientTzUTC()
        + isClosed()
        + isCursorFetchEnabled()
        + isInGlobalTx()
        + isMasterConnection()
        + isNoBackslashEscapesSet()
        + isProxySet()
        + isQueryCacheEnabled()
        + isReadInfoMsgEnabled()
        + isReadOnly()
        + isReadOnly()
        + isRunningOnJDK13()
        + isSameResource()
        + isServerLocal()
        + isServerTruncatesFracSecs()
        + isServerTzUTC()
        + lowerCaseTableNames()
        + nativeSQL()
        + parserKnowsUnicode()
        + ping()
        + pingInternal()
        + prepareCall()
        + prepareCall()
        + prepareCall()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + realClose()
        + recachePreparedStatement()
        + registerQueryExecutionTime()
        + registerStatement()
        + releaseSavepoint()
        + reportNumberOfTablesAccessed()
        + reportQueryTime()
        + resetServerState()
        + rollback()
        + rollback()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverSupportsConvertFn()
        + setAutoCommit()
        + setCatalog()
        + setFailedOver()
        + setHoldability()
        + setInGlobalTx()
        + setNetworkTimeout()
        + setPreferSlaveDuringFailover()
        + setProfilerEventHandlerInstance()
        + setProxy()
        + setReadInfoMsgEnabled()
        + setReadOnly()
        + setReadOnlyInternal()
        + setSavepoint()
        + setSavepoint()
        + setSchema()
        + setSessionMaxRows()
        + setStatementComment()
        + setTransactionIsolation()
        + setTypeMap()
        + shutdownServer()
        + storesLowerCaseTableName()
        + supportsIsolationLevel()
        + supportsQuotedIdentifiers()
        + supportsTransactions()
        + throwConnectionClosedException()
        + transactionBegun()
        + transactionCompleted()
        + unSafeStatementInterceptors()
        + unregisterStatement()
        + useAnsiQuotedIdentifiers()
        + versionMeetsMinimum()
        # ConnectionImpl()
        {static} # appendMessageToException()
        {static} # getInstance()
        {static} # getNextRoundRobinHostIndex()
        # reportMetricsIfNeeded()
        - addToHistogram()
        - addToPerformanceHistogram()
        - addToTablesAccessedHistogram()
        - buildCollationMapping()
        - canHandleAsServerPreparedStatement()
        - canHandleAsServerPreparedStatementNoCache()
        - characterSetNamesMatches()
        - checkAndCreatePerformanceHistogram()
        - checkAndCreateTablesAccessedHistogram()
        - checkServerEncoding()
        - checkTransactionIsolationLevel()
        - cleanup()
        - closeAllOpenStatements()
        - closeStatement()
        - configureCharsetProperties()
        - configureClientCharacterSet()
        - configureTimezone()
        - connectOneTryOnly()
        - connectWithRetries()
        - coreConnect()
        - createConfigCacheIfNeeded()
        - createInitialHistogram()
        - createPreparedStatementCaches()
        - getMetaData()
        - getProxy()
        - getServerVariableAsInt()
        - handleAutoCommitDefaults()
        - initializeDriverProperties()
        - initializePropsFromServer()
        - loadServerVariables()
        - normalizeHost()
        {static} - nullSafeCompare()
        - parseCallableStatement()
        - parsePortNumber()
        - repartitionHistogram()
        - repartitionPerformanceHistogram()
        - repartitionTablesAccessedHistogram()
        - reportMetrics()
        - rollbackNoChecks()
        - setSavepoint()
        - setSessionVariables()
        - setupServerForTruncationChecks()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionImpl.CompoundCacheKey {
        ~ componentOne : String
        ~ componentTwo : String
        ~ hashCode : int
        + equals()
        + hashCode()
        ~ CompoundCacheKey()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionImpl.ExceptionInterceptorChain {
        - interceptors : List<Extension>
        + destroy()
        + getInterceptors()
        + init()
        + interceptException()
        ~ ExceptionInterceptorChain()
        ~ addRingZero()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionImpl.NetworkTimeoutSetter {
        - connImplRef : WeakReference<ConnectionImpl>
        - milliseconds : int
        - mysqlIoRef : WeakReference<MysqlIO>
        + NetworkTimeoutSetter()
        + run()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.ConnectionLifecycleInterceptor {
        {abstract} + close()
        {abstract} + commit()
        {abstract} + rollback()
        {abstract} + rollback()
        {abstract} + setAutoCommit()
        {abstract} + setCatalog()
        {abstract} + transactionBegun()
        {abstract} + transactionCompleted()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.ConnectionProperties {
        {abstract} + exposeAsXml()
        {abstract} + getAllowLoadLocalInfile()
        {abstract} + getAllowMasterDownConnections()
        {abstract} + getAllowMultiQueries()
        {abstract} + getAllowNanAndInf()
        {abstract} + getAllowPublicKeyRetrieval()
        {abstract} + getAllowSlaveDownConnections()
        {abstract} + getAllowUrlInLocalInfile()
        {abstract} + getAlwaysSendSetIsolation()
        {abstract} + getAuthenticationPlugins()
        {abstract} + getAutoClosePStmtStreams()
        {abstract} + getAutoDeserialize()
        {abstract} + getAutoGenerateTestcaseScript()
        {abstract} + getAutoReconnectForPools()
        {abstract} + getAutoSlowLog()
        {abstract} + getBlobSendChunkSize()
        {abstract} + getBlobsAreStrings()
        {abstract} + getCacheCallableStatements()
        {abstract} + getCacheCallableStmts()
        {abstract} + getCacheDefaultTimezone()
        {abstract} + getCachePrepStmts()
        {abstract} + getCachePreparedStatements()
        {abstract} + getCacheResultSetMetadata()
        {abstract} + getCacheServerConfiguration()
        {abstract} + getCallableStatementCacheSize()
        {abstract} + getCallableStmtCacheSize()
        {abstract} + getCapitalizeTypeNames()
        {abstract} + getCharacterSetResults()
        {abstract} + getClientCertificateKeyStorePassword()
        {abstract} + getClientCertificateKeyStoreType()
        {abstract} + getClientCertificateKeyStoreUrl()
        {abstract} + getClientInfoProvider()
        {abstract} + getClobCharacterEncoding()
        {abstract} + getClobberStreamingResults()
        {abstract} + getCompensateOnDuplicateKeyUpdateCounts()
        {abstract} + getConnectTimeout()
        {abstract} + getConnectionAttributes()
        {abstract} + getConnectionCollation()
        {abstract} + getConnectionLifecycleInterceptors()
        {abstract} + getContinueBatchOnError()
        {abstract} + getCreateDatabaseIfNotExist()
        {abstract} + getDefaultAuthenticationPlugin()
        {abstract} + getDefaultFetchSize()
        {abstract} + getDetectCustomCollations()
        {abstract} + getDisabledAuthenticationPlugins()
        {abstract} + getDisconnectOnExpiredPasswords()
        {abstract} + getDontCheckOnDuplicateKeyUpdateInSQL()
        {abstract} + getDontTrackOpenResources()
        {abstract} + getDumpMetadataOnColumnNotFound()
        {abstract} + getDumpQueriesOnException()
        {abstract} + getDynamicCalendars()
        {abstract} + getElideSetAutoCommits()
        {abstract} + getEmptyStringsConvertToZero()
        {abstract} + getEmulateLocators()
        {abstract} + getEmulateUnsupportedPstmts()
        {abstract} + getEnableEscapeProcessing()
        {abstract} + getEnablePacketDebug()
        {abstract} + getEnableQueryTimeouts()
        {abstract} + getEnabledSSLCipherSuites()
        {abstract} + getEnabledTLSProtocols()
        {abstract} + getEncoding()
        {abstract} + getExceptionInterceptor()
        {abstract} + getExceptionInterceptors()
        {abstract} + getExplainSlowQueries()
        {abstract} + getFailOverReadOnly()
        {abstract} + getFunctionsNeverReturnBlobs()
        {abstract} + getGatherPerfMetrics()
        {abstract} + getGatherPerformanceMetrics()
        {abstract} + getGenerateSimpleParameterMetadata()
        {abstract} + getGetProceduresReturnsFunctions()
        {abstract} + getHoldResultsOpenOverStatementClose()
        {abstract} + getIgnoreNonTxTables()
        {abstract} + getIncludeInnodbStatusInDeadlockExceptions()
        {abstract} + getIncludeThreadDumpInDeadlockExceptions()
        {abstract} + getIncludeThreadNamesAsStatementComment()
        {abstract} + getInitialTimeout()
        {abstract} + getInteractiveClient()
        {abstract} + getIsInteractiveClient()
        {abstract} + getJdbcCompliantTruncation()
        {abstract} + getJdbcCompliantTruncationForReads()
        {abstract} + getLargeRowSizeThreshold()
        {abstract} + getLoadBalanceAutoCommitStatementRegex()
        {abstract} + getLoadBalanceAutoCommitStatementThreshold()
        {abstract} + getLoadBalanceBlacklistTimeout()
        {abstract} + getLoadBalanceConnectionGroup()
        {abstract} + getLoadBalanceEnableJMX()
        {abstract} + getLoadBalanceExceptionChecker()
        {abstract} + getLoadBalanceHostRemovalGracePeriod()
        {abstract} + getLoadBalancePingTimeout()
        {abstract} + getLoadBalanceSQLExceptionSubclassFailover()
        {abstract} + getLoadBalanceSQLStateFailover()
        {abstract} + getLoadBalanceStrategy()
        {abstract} + getLoadBalanceValidateConnectionOnSwapServer()
        {abstract} + getLocalSocketAddress()
        {abstract} + getLocatorFetchBufferSize()
        {abstract} + getLogSlowQueries()
        {abstract} + getLogXaCommands()
        {abstract} + getLogger()
        {abstract} + getLoggerClassName()
        {abstract} + getMaintainTimeStats()
        {abstract} + getMaxAllowedPacket()
        {abstract} + getMaxQuerySizeToLog()
        {abstract} + getMaxReconnects()
        {abstract} + getMaxRows()
        {abstract} + getMetadataCacheSize()
        {abstract} + getNetTimeoutForStreamingResults()
        {abstract} + getNoAccessToProcedureBodies()
        {abstract} + getNoDatetimeStringSync()
        {abstract} + getNoTimezoneConversionForDateType()
        {abstract} + getNoTimezoneConversionForTimeType()
        {abstract} + getNullCatalogMeansCurrent()
        {abstract} + getNullNamePatternMatchesAll()
        {abstract} + getOverrideSupportsIntegrityEnhancementFacility()
        {abstract} + getPacketDebugBufferSize()
        {abstract} + getPadCharsWithSpace()
        {abstract} + getParanoid()
        {abstract} + getParseInfoCacheFactory()
        {abstract} + getPasswordCharacterEncoding()
        {abstract} + getPedantic()
        {abstract} + getPinGlobalTxToPhysicalConnection()
        {abstract} + getPopulateInsertRowWithDefaultValues()
        {abstract} + getPrepStmtCacheSize()
        {abstract} + getPrepStmtCacheSqlLimit()
        {abstract} + getPreparedStatementCacheSize()
        {abstract} + getPreparedStatementCacheSqlLimit()
        {abstract} + getProcessEscapeCodesForPrepStmts()
        {abstract} + getProfileSQL()
        {abstract} + getProfileSql()
        {abstract} + getProfilerEventHandler()
        {abstract} + getPropertiesTransform()
        {abstract} + getQueriesBeforeRetryMaster()
        {abstract} + getQueryTimeoutKillsConnection()
        {abstract} + getReadFromMasterWhenNoSlaves()
        {abstract} + getReadOnlyPropagatesToServer()
        {abstract} + getReconnectAtTxEnd()
        {abstract} + getRelaxAutoCommit()
        {abstract} + getReplicationEnableJMX()
        {abstract} + getReportMetricsIntervalMillis()
        {abstract} + getRequireSSL()
        {abstract} + getResourceId()
        {abstract} + getResultSetSizeThreshold()
        {abstract} + getRetainStatementAfterResultSetClose()
        {abstract} + getRetriesAllDown()
        {abstract} + getRewriteBatchedStatements()
        {abstract} + getRollbackOnPooledClose()
        {abstract} + getRoundRobinLoadBalance()
        {abstract} + getRunningCTS13()
        {abstract} + getSecondsBeforeRetryMaster()
        {abstract} + getSelfDestructOnPingMaxOperations()
        {abstract} + getSelfDestructOnPingSecondsLifetime()
        {abstract} + getSendFractionalSeconds()
        {abstract} + getServerAffinityOrder()
        {abstract} + getServerConfigCacheFactory()
        {abstract} + getServerRSAPublicKeyFile()
        {abstract} + getServerTimezone()
        {abstract} + getSessionVariables()
        {abstract} + getSlowQueryThresholdMillis()
        {abstract} + getSlowQueryThresholdNanos()
        {abstract} + getSocketFactory()
        {abstract} + getSocketFactoryClassName()
        {abstract} + getSocketTimeout()
        {abstract} + getSocksProxyHost()
        {abstract} + getSocksProxyPort()
        {abstract} + getStatementInterceptors()
        {abstract} + getStrictFloatingPoint()
        {abstract} + getStrictUpdates()
        {abstract} + getTcpKeepAlive()
        {abstract} + getTcpNoDelay()
        {abstract} + getTcpRcvBuf()
        {abstract} + getTcpSndBuf()
        {abstract} + getTcpTrafficClass()
        {abstract} + getTinyInt1isBit()
        {abstract} + getTraceProtocol()
        {abstract} + getTransformedBitIsBoolean()
        {abstract} + getTreatUtilDateAsTimestamp()
        {abstract} + getTrustCertificateKeyStorePassword()
        {abstract} + getTrustCertificateKeyStoreType()
        {abstract} + getTrustCertificateKeyStoreUrl()
        {abstract} + getUltraDevHack()
        {abstract} + getUseAffectedRows()
        {abstract} + getUseBlobToStoreUTF8OutsideBMP()
        {abstract} + getUseColumnNamesInFindColumn()
        {abstract} + getUseCompression()
        {abstract} + getUseConfigs()
        {abstract} + getUseCursorFetch()
        {abstract} + getUseDirectRowUnpack()
        {abstract} + getUseDynamicCharsetInfo()
        {abstract} + getUseFastDateParsing()
        {abstract} + getUseFastIntParsing()
        {abstract} + getUseGmtMillisForDatetimes()
        {abstract} + getUseHostsInPrivileges()
        {abstract} + getUseInformationSchema()
        {abstract} + getUseJDBCCompliantTimezoneShift()
        {abstract} + getUseJvmCharsetConverters()
        {abstract} + getUseLegacyDatetimeCode()
        {abstract} + getUseLocalSessionState()
        {abstract} + getUseLocalTransactionState()
        {abstract} + getUseNanosForElapsedTime()
        {abstract} + getUseOldAliasMetadataBehavior()
        {abstract} + getUseOldUTF8Behavior()
        {abstract} + getUseOnlyServerErrorMessages()
        {abstract} + getUseReadAheadInput()
        {abstract} + getUseSSL()
        {abstract} + getUseSSPSCompatibleTimezoneShift()
        {abstract} + getUseServerPrepStmts()
        {abstract} + getUseServerPreparedStmts()
        {abstract} + getUseSqlStateCodes()
        {abstract} + getUseStreamLengthsInPrepStmts()
        {abstract} + getUseTimezone()
        {abstract} + getUseUltraDevWorkAround()
        {abstract} + getUseUnbufferedInput()
        {abstract} + getUseUnicode()
        {abstract} + getUseUsageAdvisor()
        {abstract} + getUtf8OutsideBmpExcludedColumnNamePattern()
        {abstract} + getUtf8OutsideBmpIncludedColumnNamePattern()
        {abstract} + getVerifyServerCertificate()
        {abstract} + getYearIsDateType()
        {abstract} + getZeroDateTimeBehavior()
        {abstract} + isUseSSLExplicit()
        {abstract} + setAllowLoadLocalInfile()
        {abstract} + setAllowMasterDownConnections()
        {abstract} + setAllowMultiQueries()
        {abstract} + setAllowNanAndInf()
        {abstract} + setAllowPublicKeyRetrieval()
        {abstract} + setAllowSlaveDownConnections()
        {abstract} + setAllowUrlInLocalInfile()
        {abstract} + setAlwaysSendSetIsolation()
        {abstract} + setAuthenticationPlugins()
        {abstract} + setAutoClosePStmtStreams()
        {abstract} + setAutoDeserialize()
        {abstract} + setAutoGenerateTestcaseScript()
        {abstract} + setAutoReconnect()
        {abstract} + setAutoReconnectForConnectionPools()
        {abstract} + setAutoReconnectForPools()
        {abstract} + setAutoSlowLog()
        {abstract} + setBlobSendChunkSize()
        {abstract} + setBlobsAreStrings()
        {abstract} + setCacheCallableStatements()
        {abstract} + setCacheCallableStmts()
        {abstract} + setCacheDefaultTimezone()
        {abstract} + setCachePrepStmts()
        {abstract} + setCachePreparedStatements()
        {abstract} + setCacheResultSetMetadata()
        {abstract} + setCacheServerConfiguration()
        {abstract} + setCallableStatementCacheSize()
        {abstract} + setCallableStmtCacheSize()
        {abstract} + setCapitalizeDBMDTypes()
        {abstract} + setCapitalizeTypeNames()
        {abstract} + setCharacterEncoding()
        {abstract} + setCharacterSetResults()
        {abstract} + setClientCertificateKeyStorePassword()
        {abstract} + setClientCertificateKeyStoreType()
        {abstract} + setClientCertificateKeyStoreUrl()
        {abstract} + setClientInfoProvider()
        {abstract} + setClobCharacterEncoding()
        {abstract} + setClobberStreamingResults()
        {abstract} + setCompensateOnDuplicateKeyUpdateCounts()
        {abstract} + setConnectTimeout()
        {abstract} + setConnectionCollation()
        {abstract} + setConnectionLifecycleInterceptors()
        {abstract} + setContinueBatchOnError()
        {abstract} + setCreateDatabaseIfNotExist()
        {abstract} + setDefaultAuthenticationPlugin()
        {abstract} + setDefaultFetchSize()
        {abstract} + setDetectCustomCollations()
        {abstract} + setDetectServerPreparedStmts()
        {abstract} + setDisabledAuthenticationPlugins()
        {abstract} + setDisconnectOnExpiredPasswords()
        {abstract} + setDontCheckOnDuplicateKeyUpdateInSQL()
        {abstract} + setDontTrackOpenResources()
        {abstract} + setDumpMetadataOnColumnNotFound()
        {abstract} + setDumpQueriesOnException()
        {abstract} + setDynamicCalendars()
        {abstract} + setElideSetAutoCommits()
        {abstract} + setEmptyStringsConvertToZero()
        {abstract} + setEmulateLocators()
        {abstract} + setEmulateUnsupportedPstmts()
        {abstract} + setEnableEscapeProcessing()
        {abstract} + setEnablePacketDebug()
        {abstract} + setEnableQueryTimeouts()
        {abstract} + setEnabledSSLCipherSuites()
        {abstract} + setEnabledTLSProtocols()
        {abstract} + setEncoding()
        {abstract} + setExceptionInterceptors()
        {abstract} + setExplainSlowQueries()
        {abstract} + setFailOverReadOnly()
        {abstract} + setFunctionsNeverReturnBlobs()
        {abstract} + setGatherPerfMetrics()
        {abstract} + setGatherPerformanceMetrics()
        {abstract} + setGenerateSimpleParameterMetadata()
        {abstract} + setGetProceduresReturnsFunctions()
        {abstract} + setHoldResultsOpenOverStatementClose()
        {abstract} + setIgnoreNonTxTables()
        {abstract} + setIncludeInnodbStatusInDeadlockExceptions()
        {abstract} + setIncludeThreadDumpInDeadlockExceptions()
        {abstract} + setIncludeThreadNamesAsStatementComment()
        {abstract} + setInitialTimeout()
        {abstract} + setInteractiveClient()
        {abstract} + setIsInteractiveClient()
        {abstract} + setJdbcCompliantTruncation()
        {abstract} + setJdbcCompliantTruncationForReads()
        {abstract} + setLargeRowSizeThreshold()
        {abstract} + setLoadBalanceAutoCommitStatementRegex()
        {abstract} + setLoadBalanceAutoCommitStatementThreshold()
        {abstract} + setLoadBalanceBlacklistTimeout()
        {abstract} + setLoadBalanceConnectionGroup()
        {abstract} + setLoadBalanceEnableJMX()
        {abstract} + setLoadBalanceExceptionChecker()
        {abstract} + setLoadBalanceHostRemovalGracePeriod()
        {abstract} + setLoadBalancePingTimeout()
        {abstract} + setLoadBalanceSQLExceptionSubclassFailover()
        {abstract} + setLoadBalanceSQLStateFailover()
        {abstract} + setLoadBalanceStrategy()
        {abstract} + setLoadBalanceValidateConnectionOnSwapServer()
        {abstract} + setLocalSocketAddress()
        {abstract} + setLocatorFetchBufferSize()
        {abstract} + setLogSlowQueries()
        {abstract} + setLogXaCommands()
        {abstract} + setLogger()
        {abstract} + setLoggerClassName()
        {abstract} + setMaintainTimeStats()
        {abstract} + setMaxQuerySizeToLog()
        {abstract} + setMaxReconnects()
        {abstract} + setMaxRows()
        {abstract} + setMetadataCacheSize()
        {abstract} + setNetTimeoutForStreamingResults()
        {abstract} + setNoAccessToProcedureBodies()
        {abstract} + setNoDatetimeStringSync()
        {abstract} + setNoTimezoneConversionForDateType()
        {abstract} + setNoTimezoneConversionForTimeType()
        {abstract} + setNullCatalogMeansCurrent()
        {abstract} + setNullNamePatternMatchesAll()
        {abstract} + setOverrideSupportsIntegrityEnhancementFacility()
        {abstract} + setPacketDebugBufferSize()
        {abstract} + setPadCharsWithSpace()
        {abstract} + setParanoid()
        {abstract} + setParseInfoCacheFactory()
        {abstract} + setPasswordCharacterEncoding()
        {abstract} + setPedantic()
        {abstract} + setPinGlobalTxToPhysicalConnection()
        {abstract} + setPopulateInsertRowWithDefaultValues()
        {abstract} + setPrepStmtCacheSize()
        {abstract} + setPrepStmtCacheSqlLimit()
        {abstract} + setPreparedStatementCacheSize()
        {abstract} + setPreparedStatementCacheSqlLimit()
        {abstract} + setProcessEscapeCodesForPrepStmts()
        {abstract} + setProfileSQL()
        {abstract} + setProfileSql()
        {abstract} + setProfilerEventHandler()
        {abstract} + setPropertiesTransform()
        {abstract} + setQueriesBeforeRetryMaster()
        {abstract} + setQueryTimeoutKillsConnection()
        {abstract} + setReadFromMasterWhenNoSlaves()
        {abstract} + setReadOnlyPropagatesToServer()
        {abstract} + setReconnectAtTxEnd()
        {abstract} + setRelaxAutoCommit()
        {abstract} + setReplicationEnableJMX()
        {abstract} + setReportMetricsIntervalMillis()
        {abstract} + setRequireSSL()
        {abstract} + setResourceId()
        {abstract} + setResultSetSizeThreshold()
        {abstract} + setRetainStatementAfterResultSetClose()
        {abstract} + setRetriesAllDown()
        {abstract} + setRewriteBatchedStatements()
        {abstract} + setRollbackOnPooledClose()
        {abstract} + setRoundRobinLoadBalance()
        {abstract} + setRunningCTS13()
        {abstract} + setSecondsBeforeRetryMaster()
        {abstract} + setSelfDestructOnPingMaxOperations()
        {abstract} + setSelfDestructOnPingSecondsLifetime()
        {abstract} + setSendFractionalSeconds()
        {abstract} + setServerAffinityOrder()
        {abstract} + setServerConfigCacheFactory()
        {abstract} + setServerRSAPublicKeyFile()
        {abstract} + setServerTimezone()
        {abstract} + setSessionVariables()
        {abstract} + setSlowQueryThresholdMillis()
        {abstract} + setSlowQueryThresholdNanos()
        {abstract} + setSocketFactory()
        {abstract} + setSocketFactoryClassName()
        {abstract} + setSocketTimeout()
        {abstract} + setSocksProxyHost()
        {abstract} + setSocksProxyPort()
        {abstract} + setStatementInterceptors()
        {abstract} + setStrictFloatingPoint()
        {abstract} + setStrictUpdates()
        {abstract} + setTcpKeepAlive()
        {abstract} + setTcpNoDelay()
        {abstract} + setTcpRcvBuf()
        {abstract} + setTcpSndBuf()
        {abstract} + setTcpTrafficClass()
        {abstract} + setTinyInt1isBit()
        {abstract} + setTraceProtocol()
        {abstract} + setTransformedBitIsBoolean()
        {abstract} + setTreatUtilDateAsTimestamp()
        {abstract} + setTrustCertificateKeyStorePassword()
        {abstract} + setTrustCertificateKeyStoreType()
        {abstract} + setTrustCertificateKeyStoreUrl()
        {abstract} + setUltraDevHack()
        {abstract} + setUseAffectedRows()
        {abstract} + setUseBlobToStoreUTF8OutsideBMP()
        {abstract} + setUseColumnNamesInFindColumn()
        {abstract} + setUseCompression()
        {abstract} + setUseConfigs()
        {abstract} + setUseCursorFetch()
        {abstract} + setUseDirectRowUnpack()
        {abstract} + setUseDynamicCharsetInfo()
        {abstract} + setUseFastDateParsing()
        {abstract} + setUseFastIntParsing()
        {abstract} + setUseGmtMillisForDatetimes()
        {abstract} + setUseHostsInPrivileges()
        {abstract} + setUseInformationSchema()
        {abstract} + setUseJDBCCompliantTimezoneShift()
        {abstract} + setUseJvmCharsetConverters()
        {abstract} + setUseLegacyDatetimeCode()
        {abstract} + setUseLocalSessionState()
        {abstract} + setUseLocalTransactionState()
        {abstract} + setUseNanosForElapsedTime()
        {abstract} + setUseOldAliasMetadataBehavior()
        {abstract} + setUseOldUTF8Behavior()
        {abstract} + setUseOnlyServerErrorMessages()
        {abstract} + setUseReadAheadInput()
        {abstract} + setUseSSL()
        {abstract} + setUseSSPSCompatibleTimezoneShift()
        {abstract} + setUseServerPrepStmts()
        {abstract} + setUseServerPreparedStmts()
        {abstract} + setUseSqlStateCodes()
        {abstract} + setUseStreamLengthsInPrepStmts()
        {abstract} + setUseTimezone()
        {abstract} + setUseUltraDevWorkAround()
        {abstract} + setUseUnbufferedInput()
        {abstract} + setUseUnicode()
        {abstract} + setUseUsageAdvisor()
        {abstract} + setUtf8OutsideBmpExcludedColumnNamePattern()
        {abstract} + setUtf8OutsideBmpIncludedColumnNamePattern()
        {abstract} + setVerifyServerCertificate()
        {abstract} + setYearIsDateType()
        {abstract} + setZeroDateTimeBehavior()
        {abstract} + useUnbufferedInput()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionPropertiesImpl {
        {static} # ZERO_DATETIME_BEHAVIOR_CONVERT_TO_NULL : String
        {static} # ZERO_DATETIME_BEHAVIOR_EXCEPTION : String
        {static} # ZERO_DATETIME_BEHAVIOR_ROUND : String
        # characterEncodingIsAliasForSjis : boolean
        {static} - CONNECTION_AND_AUTH_CATEGORY : String
        {static} - DEBUGING_PROFILING_CATEGORY : String
        {static} - HA_CATEGORY : String
        {static} - MISC_CATEGORY : String
        {static} - NETWORK_CATEGORY : String
        {static} - PERFORMANCE_CATEGORY : String
        {static} - PROPERTY_CATEGORIES : String[]
        {static} - PROPERTY_LIST : ArrayList<Field>
        {static} - SECURITY_CATEGORY : String
        {static} - STANDARD_LOGGER_NAME : String
        - autoGenerateTestcaseScriptAsBoolean : boolean
        - autoReconnectForPoolsAsBoolean : boolean
        - cacheResultSetMetaDataAsBoolean : boolean
        - characterEncodingAsString : String
        - highAvailabilityAsBoolean : boolean
        - jdbcCompliantTruncationForReads : boolean
        - maintainTimeStatsAsBoolean : boolean
        - maxRowsAsInt : int
        - profileSQLAsBoolean : boolean
        - reconnectTxAtEndAsBoolean : boolean
        {static} - serialVersionUID : long
        - useOldUTF8BehaviorAsBoolean : boolean
        - useUnicodeAsBoolean : boolean
        - useUsageAdvisorAsBoolean : boolean
        + exposeAsProperties()
        + exposeAsXml()
        + getAllowLoadLocalInfile()
        + getAllowMasterDownConnections()
        + getAllowMultiQueries()
        + getAllowNanAndInf()
        + getAllowPublicKeyRetrieval()
        + getAllowSlaveDownConnections()
        + getAllowUrlInLocalInfile()
        + getAlwaysSendSetIsolation()
        + getAuthenticationPlugins()
        + getAutoClosePStmtStreams()
        + getAutoDeserialize()
        + getAutoGenerateTestcaseScript()
        + getAutoReconnectForPools()
        + getAutoSlowLog()
        + getBlobSendChunkSize()
        + getBlobsAreStrings()
        + getCacheCallableStatements()
        + getCacheCallableStmts()
        + getCacheDefaultTimezone()
        + getCachePrepStmts()
        + getCachePreparedStatements()
        + getCacheResultSetMetadata()
        + getCacheServerConfiguration()
        + getCallableStatementCacheSize()
        + getCallableStmtCacheSize()
        + getCapitalizeTypeNames()
        + getCharacterSetResults()
        + getClientCertificateKeyStorePassword()
        + getClientCertificateKeyStoreType()
        + getClientCertificateKeyStoreUrl()
        + getClientInfoProvider()
        + getClobCharacterEncoding()
        + getClobberStreamingResults()
        + getCompensateOnDuplicateKeyUpdateCounts()
        + getConnectTimeout()
        + getConnectionAttributes()
        + getConnectionCollation()
        + getConnectionLifecycleInterceptors()
        + getContinueBatchOnError()
        + getCreateDatabaseIfNotExist()
        + getDefaultAuthenticationPlugin()
        + getDefaultFetchSize()
        + getDetectCustomCollations()
        + getDisabledAuthenticationPlugins()
        + getDisconnectOnExpiredPasswords()
        + getDontCheckOnDuplicateKeyUpdateInSQL()
        + getDontTrackOpenResources()
        + getDumpMetadataOnColumnNotFound()
        + getDumpQueriesOnException()
        + getDynamicCalendars()
        + getElideSetAutoCommits()
        + getEmptyStringsConvertToZero()
        + getEmulateLocators()
        + getEmulateUnsupportedPstmts()
        + getEnableEscapeProcessing()
        + getEnablePacketDebug()
        + getEnableQueryTimeouts()
        + getEnabledSSLCipherSuites()
        + getEnabledTLSProtocols()
        + getEncoding()
        + getExceptionInterceptor()
        + getExceptionInterceptors()
        + getExplainSlowQueries()
        + getFailOverReadOnly()
        + getFunctionsNeverReturnBlobs()
        + getGatherPerfMetrics()
        + getGatherPerformanceMetrics()
        + getGenerateSimpleParameterMetadata()
        + getGetProceduresReturnsFunctions()
        + getHoldResultsOpenOverStatementClose()
        + getIgnoreNonTxTables()
        + getIncludeInnodbStatusInDeadlockExceptions()
        + getIncludeThreadDumpInDeadlockExceptions()
        + getIncludeThreadNamesAsStatementComment()
        + getInitialTimeout()
        + getInteractiveClient()
        + getIsInteractiveClient()
        + getJdbcCompliantTruncation()
        + getJdbcCompliantTruncationForReads()
        + getLargeRowSizeThreshold()
        + getLoadBalanceAutoCommitStatementRegex()
        + getLoadBalanceAutoCommitStatementThreshold()
        + getLoadBalanceBlacklistTimeout()
        + getLoadBalanceConnectionGroup()
        + getLoadBalanceEnableJMX()
        + getLoadBalanceExceptionChecker()
        + getLoadBalanceHostRemovalGracePeriod()
        + getLoadBalancePingTimeout()
        + getLoadBalanceSQLExceptionSubclassFailover()
        + getLoadBalanceSQLStateFailover()
        + getLoadBalanceStrategy()
        + getLoadBalanceValidateConnectionOnSwapServer()
        + getLocalSocketAddress()
        + getLocatorFetchBufferSize()
        + getLogSlowQueries()
        + getLogXaCommands()
        + getLogger()
        + getLoggerClassName()
        + getMaintainTimeStats()
        + getMaxAllowedPacket()
        + getMaxQuerySizeToLog()
        + getMaxReconnects()
        + getMaxRows()
        + getMetadataCacheSize()
        + getNetTimeoutForStreamingResults()
        + getNoAccessToProcedureBodies()
        + getNoDatetimeStringSync()
        + getNoTimezoneConversionForDateType()
        + getNoTimezoneConversionForTimeType()
        + getNullCatalogMeansCurrent()
        + getNullNamePatternMatchesAll()
        + getOverrideSupportsIntegrityEnhancementFacility()
        + getPacketDebugBufferSize()
        + getPadCharsWithSpace()
        + getParanoid()
        + getParseInfoCacheFactory()
        + getPasswordCharacterEncoding()
        + getPedantic()
        + getPinGlobalTxToPhysicalConnection()
        + getPopulateInsertRowWithDefaultValues()
        + getPrepStmtCacheSize()
        + getPrepStmtCacheSqlLimit()
        + getPreparedStatementCacheSize()
        + getPreparedStatementCacheSqlLimit()
        + getProcessEscapeCodesForPrepStmts()
        + getProfileSQL()
        + getProfileSql()
        + getProfilerEventHandler()
        + getPropertiesTransform()
        + getQueriesBeforeRetryMaster()
        + getQueryTimeoutKillsConnection()
        + getReadFromMasterWhenNoSlaves()
        + getReadOnlyPropagatesToServer()
        + getReconnectAtTxEnd()
        + getRelaxAutoCommit()
        + getReplicationConnectionGroup()
        + getReplicationEnableJMX()
        + getReportMetricsIntervalMillis()
        + getRequireSSL()
        + getResourceId()
        + getResultSetSizeThreshold()
        + getRetainStatementAfterResultSetClose()
        + getRetriesAllDown()
        + getRewriteBatchedStatements()
        + getRollbackOnPooledClose()
        + getRoundRobinLoadBalance()
        + getRunningCTS13()
        + getSecondsBeforeRetryMaster()
        + getSelfDestructOnPingMaxOperations()
        + getSelfDestructOnPingSecondsLifetime()
        + getSendFractionalSeconds()
        + getServerAffinityOrder()
        + getServerConfigCacheFactory()
        + getServerRSAPublicKeyFile()
        + getServerTimezone()
        + getSessionVariables()
        + getSlowQueryThresholdMillis()
        + getSlowQueryThresholdNanos()
        + getSocketFactory()
        + getSocketFactoryClassName()
        + getSocketTimeout()
        + getSocksProxyHost()
        + getSocksProxyPort()
        + getStatementInterceptors()
        + getStrictFloatingPoint()
        + getStrictUpdates()
        + getTcpKeepAlive()
        + getTcpNoDelay()
        + getTcpRcvBuf()
        + getTcpSndBuf()
        + getTcpTrafficClass()
        + getTinyInt1isBit()
        + getTraceProtocol()
        + getTransformedBitIsBoolean()
        + getTreatUtilDateAsTimestamp()
        + getTrustCertificateKeyStorePassword()
        + getTrustCertificateKeyStoreType()
        + getTrustCertificateKeyStoreUrl()
        + getUltraDevHack()
        + getUseAffectedRows()
        + getUseBlobToStoreUTF8OutsideBMP()
        + getUseColumnNamesInFindColumn()
        + getUseCompression()
        + getUseConfigs()
        + getUseCursorFetch()
        + getUseDirectRowUnpack()
        + getUseDynamicCharsetInfo()
        + getUseFastDateParsing()
        + getUseFastIntParsing()
        + getUseGmtMillisForDatetimes()
        + getUseHostsInPrivileges()
        + getUseInformationSchema()
        + getUseJDBCCompliantTimezoneShift()
        + getUseJvmCharsetConverters()
        + getUseLegacyDatetimeCode()
        + getUseLocalSessionState()
        + getUseLocalTransactionState()
        + getUseNanosForElapsedTime()
        + getUseOldAliasMetadataBehavior()
        + getUseOldUTF8Behavior()
        + getUseOnlyServerErrorMessages()
        + getUseReadAheadInput()
        + getUseSSL()
        + getUseSSPSCompatibleTimezoneShift()
        + getUseServerPrepStmts()
        + getUseServerPreparedStmts()
        + getUseSqlStateCodes()
        + getUseStreamLengthsInPrepStmts()
        + getUseTimezone()
        + getUseUltraDevWorkAround()
        + getUseUnbufferedInput()
        + getUseUnicode()
        + getUseUsageAdvisor()
        + getUtf8OutsideBmpExcludedColumnNamePattern()
        + getUtf8OutsideBmpIncludedColumnNamePattern()
        + getVerifyServerCertificate()
        + getYearIsDateType()
        + getZeroDateTimeBehavior()
        + isUseSSLExplicit()
        + setAllowLoadLocalInfile()
        + setAllowMasterDownConnections()
        + setAllowMultiQueries()
        + setAllowNanAndInf()
        + setAllowPublicKeyRetrieval()
        + setAllowSlaveDownConnections()
        + setAllowUrlInLocalInfile()
        + setAlwaysSendSetIsolation()
        + setAuthenticationPlugins()
        + setAutoClosePStmtStreams()
        + setAutoDeserialize()
        + setAutoGenerateTestcaseScript()
        + setAutoReconnect()
        + setAutoReconnectForConnectionPools()
        + setAutoReconnectForPools()
        + setAutoSlowLog()
        + setBlobSendChunkSize()
        + setBlobsAreStrings()
        + setCacheCallableStatements()
        + setCacheCallableStmts()
        + setCacheDefaultTimezone()
        + setCachePrepStmts()
        + setCachePreparedStatements()
        + setCacheResultSetMetadata()
        + setCacheServerConfiguration()
        + setCallableStatementCacheSize()
        + setCallableStmtCacheSize()
        + setCapitalizeDBMDTypes()
        + setCapitalizeTypeNames()
        + setCharacterEncoding()
        + setCharacterSetResults()
        + setClientCertificateKeyStorePassword()
        + setClientCertificateKeyStoreType()
        + setClientCertificateKeyStoreUrl()
        + setClientInfoProvider()
        + setClobCharacterEncoding()
        + setClobberStreamingResults()
        + setCompensateOnDuplicateKeyUpdateCounts()
        + setConnectTimeout()
        + setConnectionAttributes()
        + setConnectionCollation()
        + setConnectionLifecycleInterceptors()
        + setContinueBatchOnError()
        + setCreateDatabaseIfNotExist()
        + setDefaultAuthenticationPlugin()
        + setDefaultFetchSize()
        + setDetectCustomCollations()
        + setDetectServerPreparedStmts()
        + setDisabledAuthenticationPlugins()
        + setDisconnectOnExpiredPasswords()
        + setDontCheckOnDuplicateKeyUpdateInSQL()
        + setDontTrackOpenResources()
        + setDumpMetadataOnColumnNotFound()
        + setDumpQueriesOnException()
        + setDynamicCalendars()
        + setElideSetAutoCommits()
        + setEmptyStringsConvertToZero()
        + setEmulateLocators()
        + setEmulateUnsupportedPstmts()
        + setEnableEscapeProcessing()
        + setEnablePacketDebug()
        + setEnableQueryTimeouts()
        + setEnabledSSLCipherSuites()
        + setEnabledTLSProtocols()
        + setEncoding()
        + setExceptionInterceptors()
        + setExplainSlowQueries()
        + setFailOverReadOnly()
        + setFunctionsNeverReturnBlobs()
        + setGatherPerfMetrics()
        + setGatherPerformanceMetrics()
        + setGenerateSimpleParameterMetadata()
        + setGetProceduresReturnsFunctions()
        + setHoldResultsOpenOverStatementClose()
        + setIgnoreNonTxTables()
        + setIncludeInnodbStatusInDeadlockExceptions()
        + setIncludeThreadDumpInDeadlockExceptions()
        + setIncludeThreadNamesAsStatementComment()
        + setInitialTimeout()
        + setInteractiveClient()
        + setIsInteractiveClient()
        + setJdbcCompliantTruncation()
        + setJdbcCompliantTruncationForReads()
        + setLargeRowSizeThreshold()
        + setLoadBalanceAutoCommitStatementRegex()
        + setLoadBalanceAutoCommitStatementThreshold()
        + setLoadBalanceBlacklistTimeout()
        + setLoadBalanceConnectionGroup()
        + setLoadBalanceEnableJMX()
        + setLoadBalanceExceptionChecker()
        + setLoadBalanceHostRemovalGracePeriod()
        + setLoadBalancePingTimeout()
        + setLoadBalanceSQLExceptionSubclassFailover()
        + setLoadBalanceSQLStateFailover()
        + setLoadBalanceStrategy()
        + setLoadBalanceValidateConnectionOnSwapServer()
        + setLocalSocketAddress()
        + setLocatorFetchBufferSize()
        + setLogSlowQueries()
        + setLogXaCommands()
        + setLogger()
        + setLoggerClassName()
        + setMaintainTimeStats()
        + setMaxAllowedPacket()
        + setMaxQuerySizeToLog()
        + setMaxReconnects()
        + setMaxRows()
        + setMetadataCacheSize()
        + setNetTimeoutForStreamingResults()
        + setNoAccessToProcedureBodies()
        + setNoDatetimeStringSync()
        + setNoTimezoneConversionForDateType()
        + setNoTimezoneConversionForTimeType()
        + setNullCatalogMeansCurrent()
        + setNullNamePatternMatchesAll()
        + setOverrideSupportsIntegrityEnhancementFacility()
        + setPacketDebugBufferSize()
        + setPadCharsWithSpace()
        + setParanoid()
        + setParseInfoCacheFactory()
        + setPasswordCharacterEncoding()
        + setPedantic()
        + setPinGlobalTxToPhysicalConnection()
        + setPopulateInsertRowWithDefaultValues()
        + setPrepStmtCacheSize()
        + setPrepStmtCacheSqlLimit()
        + setPreparedStatementCacheSize()
        + setPreparedStatementCacheSqlLimit()
        + setProcessEscapeCodesForPrepStmts()
        + setProfileSQL()
        + setProfileSql()
        + setProfilerEventHandler()
        + setPropertiesTransform()
        + setQueriesBeforeRetryMaster()
        + setQueryTimeoutKillsConnection()
        + setReadFromMasterWhenNoSlaves()
        + setReadOnlyPropagatesToServer()
        + setReconnectAtTxEnd()
        + setRelaxAutoCommit()
        + setReplicationConnectionGroup()
        + setReplicationEnableJMX()
        + setReportMetricsIntervalMillis()
        + setRequireSSL()
        + setResourceId()
        + setResultSetSizeThreshold()
        + setRetainStatementAfterResultSetClose()
        + setRetriesAllDown()
        + setRewriteBatchedStatements()
        + setRollbackOnPooledClose()
        + setRoundRobinLoadBalance()
        + setRunningCTS13()
        + setSecondsBeforeRetryMaster()
        + setSelfDestructOnPingMaxOperations()
        + setSelfDestructOnPingSecondsLifetime()
        + setSendFractionalSeconds()
        + setServerAffinityOrder()
        + setServerConfigCacheFactory()
        + setServerRSAPublicKeyFile()
        + setServerTimezone()
        + setSessionVariables()
        + setSlowQueryThresholdMillis()
        + setSlowQueryThresholdNanos()
        + setSocketFactory()
        + setSocketFactoryClassName()
        + setSocketTimeout()
        + setSocksProxyHost()
        + setSocksProxyPort()
        + setStatementInterceptors()
        + setStrictFloatingPoint()
        + setStrictUpdates()
        + setTcpKeepAlive()
        + setTcpNoDelay()
        + setTcpRcvBuf()
        + setTcpSndBuf()
        + setTcpTrafficClass()
        + setTinyInt1isBit()
        + setTraceProtocol()
        + setTransformedBitIsBoolean()
        + setTreatUtilDateAsTimestamp()
        + setTrustCertificateKeyStorePassword()
        + setTrustCertificateKeyStoreType()
        + setTrustCertificateKeyStoreUrl()
        + setUltraDevHack()
        + setUseAffectedRows()
        + setUseBlobToStoreUTF8OutsideBMP()
        + setUseColumnNamesInFindColumn()
        + setUseCompression()
        + setUseConfigs()
        + setUseCursorFetch()
        + setUseDirectRowUnpack()
        + setUseDynamicCharsetInfo()
        + setUseFastDateParsing()
        + setUseFastIntParsing()
        + setUseGmtMillisForDatetimes()
        + setUseHostsInPrivileges()
        + setUseInformationSchema()
        + setUseJDBCCompliantTimezoneShift()
        + setUseJvmCharsetConverters()
        + setUseLegacyDatetimeCode()
        + setUseLocalSessionState()
        + setUseLocalTransactionState()
        + setUseNanosForElapsedTime()
        + setUseOldAliasMetadataBehavior()
        + setUseOldUTF8Behavior()
        + setUseOnlyServerErrorMessages()
        + setUseReadAheadInput()
        + setUseSSL()
        + setUseSSPSCompatibleTimezoneShift()
        + setUseServerPrepStmts()
        + setUseServerPreparedStmts()
        + setUseSqlStateCodes()
        + setUseStreamLengthsInPrepStmts()
        + setUseTimezone()
        + setUseUltraDevWorkAround()
        + setUseUnbufferedInput()
        + setUseUnicode()
        + setUseUsageAdvisor()
        + setUtf8OutsideBmpExcludedColumnNamePattern()
        + setUtf8OutsideBmpIncludedColumnNamePattern()
        + setVerifyServerCertificate()
        + setYearIsDateType()
        + setZeroDateTimeBehavior()
        + useUnbufferedInput()
        {static} # exposeAsDriverPropertyInfo()
        # exposeAsDriverPropertyInfoInternal()
        # exposeAsProperties()
        # getHighAvailability()
        # initializeFromRef()
        # initializeProperties()
        # postInitialization()
        # setHighAvailability()
        # storeToRef()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty {
        {static} - serialVersionUID : long
        ~ BooleanConnectionProperty()
        ~ getAllowableValues()
        ~ getValueAsBoolean()
        ~ hasValueConstraints()
        ~ initializeFrom()
        ~ isRangeBased()
        ~ setValue()
    }
  }
  

  namespace com.mysql.jdbc {
    abstract class com.mysql.jdbc.ConnectionPropertiesImpl.ConnectionProperty {
        ~ allowableValues : String[]
        ~ categoryName : String
        ~ defaultValue : Object
        ~ description : String
        ~ lowerBound : int
        ~ order : int
        ~ propertyName : String
        ~ required : boolean
        {static} ~ serialVersionUID : long
        ~ sinceVersion : String
        ~ updateCount : int
        ~ upperBound : int
        ~ valueAsObject : Object
        ~ wasExplicitlySet : boolean
        + ConnectionProperty()
        ~ ConnectionProperty()
        ~ getAllowableValues()
        ~ getAsDriverPropertyInfo()
        ~ getCategoryName()
        ~ getDefaultValue()
        ~ getLowerBound()
        ~ getOrder()
        ~ getPropertyName()
        ~ getUpdateCount()
        ~ getUpperBound()
        ~ getValueAsObject()
        {abstract} ~ hasValueConstraints()
        ~ initializeFrom()
        ~ initializeFrom()
        {abstract} ~ initializeFrom()
        ~ isExplicitlySet()
        {abstract} ~ isRangeBased()
        ~ setCategoryName()
        ~ setOrder()
        ~ setValueAsObject()
        ~ storeTo()
        ~ validateStringValues()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty {
        ~ multiplier : int
        {static} - serialVersionUID : long
        + IntegerConnectionProperty()
        ~ IntegerConnectionProperty()
        ~ IntegerConnectionProperty()
        ~ getAllowableValues()
        ~ getLowerBound()
        ~ getUpperBound()
        ~ getValueAsInt()
        ~ hasValueConstraints()
        ~ initializeFrom()
        ~ isRangeBased()
        ~ setValue()
        ~ setValue()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionPropertiesImpl.LongConnectionProperty {
        {static} - serialVersionUID : long
        ~ LongConnectionProperty()
        ~ LongConnectionProperty()
        ~ getValueAsLong()
        ~ initializeFrom()
        ~ setValue()
        ~ setValue()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionPropertiesImpl.MemorySizeConnectionProperty {
        {static} - serialVersionUID : long
        - valueAsString : String
        ~ MemorySizeConnectionProperty()
        ~ getValueAsString()
        ~ initializeFrom()
        ~ setValue()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty {
        {static} - serialVersionUID : long
        ~ StringConnectionProperty()
        ~ StringConnectionProperty()
        ~ getValueAsString()
        ~ hasValueConstraints()
        ~ initializeFrom()
        ~ isRangeBased()
        ~ setValue()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ConnectionPropertiesImpl.XmlMap {
        # alpha : Map<String, ConnectionProperty>
        # ordered : Map<Integer, Map<String, ConnectionProperty>>
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.ConnectionPropertiesTransform {
        {abstract} + transformProperties()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Constants {
        {static} + EMPTY_BYTE_ARRAY : byte[]
        {static} + MILLIS_I18N : String
        {static} + SLASH_STAR_SPACE_AS_BYTES : byte[]
        {static} + SPACE_STAR_SLASH_SPACE_AS_BYTES : byte[]
        - Constants()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData {
        {static} # MAX_IDENTIFIER_LENGTH : int
        {static} # SYSTEM_TABLE_AS_BYTES : byte[]
        {static} # TABLE_AS_BYTES : byte[]
        {static} # VIEW_AS_BYTES : byte[]
        # conn : MySQLConnection
        # database : String
        # quotedId : String
        {static} - DEFERRABILITY : int
        {static} - DELETE_RULE : int
        {static} - FKCOLUMN_NAME : int
        {static} - FKTABLE_CAT : int
        {static} - FKTABLE_NAME : int
        {static} - FKTABLE_SCHEM : int
        {static} - FK_NAME : int
        {static} - JDBC_4_DBMD_IS_CTOR : Constructor<?>
        {static} - JDBC_4_DBMD_SHOW_CTOR : Constructor<?>
        {static} - KEY_SEQ : int
        {static} - MYSQL_KEYWORDS : String[]
        {static} - PKCOLUMN_NAME : int
        {static} - PKTABLE_CAT : int
        {static} - PKTABLE_NAME : int
        {static} - PKTABLE_SCHEM : int
        {static} - PK_NAME : int
        {static} - SQL2003_KEYWORDS : String[]
        {static} - SQL92_KEYWORDS : String[]
        {static} - SUPPORTS_FK : String
        {static} - UPDATE_RULE : int
        - exceptionInterceptor : ExceptionInterceptor
        {static} - mysqlKeywords : String
        + allProceduresAreCallable()
        + allTablesAreSelectable()
        + dataDefinitionCausesTransactionCommit()
        + dataDefinitionIgnoredInTransactions()
        + deletesAreDetected()
        + doesMaxRowSizeIncludeBlobs()
        + extractForeignKeyForTable()
        + extractForeignKeyFromCreateTable()
        + generatedKeyAlwaysReturned()
        + getAttributes()
        + getBestRowIdentifier()
        + getCatalogSeparator()
        + getCatalogTerm()
        + getCatalogs()
        + getClientInfoProperties()
        + getColumnPrivileges()
        + getColumns()
        + getConnection()
        + getCrossReference()
        + getDatabaseMajorVersion()
        + getDatabaseMinorVersion()
        + getDatabaseProductName()
        + getDatabaseProductVersion()
        + getDefaultTransactionIsolation()
        + getDriverMajorVersion()
        + getDriverMinorVersion()
        + getDriverName()
        + getDriverVersion()
        + getExportedKeys()
        + getExtraNameCharacters()
        + getFunctionColumns()
        + getFunctions()
        + getIdentifierQuoteString()
        + getImportedKeys()
        + getIndexInfo()
        + getJDBCMajorVersion()
        + getJDBCMinorVersion()
        + getMaxBinaryLiteralLength()
        + getMaxCatalogNameLength()
        + getMaxCharLiteralLength()
        + getMaxColumnNameLength()
        + getMaxColumnsInGroupBy()
        + getMaxColumnsInIndex()
        + getMaxColumnsInOrderBy()
        + getMaxColumnsInSelect()
        + getMaxColumnsInTable()
        + getMaxConnections()
        + getMaxCursorNameLength()
        + getMaxIndexLength()
        + getMaxProcedureNameLength()
        + getMaxRowSize()
        + getMaxSchemaNameLength()
        + getMaxStatementLength()
        + getMaxStatements()
        + getMaxTableNameLength()
        + getMaxTablesInSelect()
        + getMaxUserNameLength()
        + getNumericFunctions()
        + getPrimaryKeys()
        + getProcedureColumns()
        + getProcedureTerm()
        + getProcedures()
        + getPseudoColumns()
        + getResultSetHoldability()
        + getSQLKeywords()
        + getSQLStateType()
        + getSchemaTerm()
        + getSchemas()
        + getSchemas()
        + getSearchStringEscape()
        + getStringFunctions()
        + getSuperTables()
        + getSuperTypes()
        + getSystemFunctions()
        + getTablePrivileges()
        + getTableTypes()
        + getTables()
        + getTimeDateFunctions()
        + getTypeInfo()
        + getUDTs()
        + getURL()
        + getUserName()
        + getVersionColumns()
        + insertsAreDetected()
        + isCatalogAtStart()
        + isReadOnly()
        + locatorsUpdateCopy()
        + nullPlusNonNullIsNull()
        + nullsAreSortedAtEnd()
        + nullsAreSortedAtStart()
        + nullsAreSortedHigh()
        + nullsAreSortedLow()
        + othersDeletesAreVisible()
        + othersInsertsAreVisible()
        + othersUpdatesAreVisible()
        + ownDeletesAreVisible()
        + ownInsertsAreVisible()
        + ownUpdatesAreVisible()
        + providesQueryObjectGenerator()
        + storesLowerCaseIdentifiers()
        + storesLowerCaseQuotedIdentifiers()
        + storesMixedCaseIdentifiers()
        + storesMixedCaseQuotedIdentifiers()
        + storesUpperCaseIdentifiers()
        + storesUpperCaseQuotedIdentifiers()
        + supportsANSI92EntryLevelSQL()
        + supportsANSI92FullSQL()
        + supportsANSI92IntermediateSQL()
        + supportsAlterTableWithAddColumn()
        + supportsAlterTableWithDropColumn()
        + supportsBatchUpdates()
        + supportsCatalogsInDataManipulation()
        + supportsCatalogsInIndexDefinitions()
        + supportsCatalogsInPrivilegeDefinitions()
        + supportsCatalogsInProcedureCalls()
        + supportsCatalogsInTableDefinitions()
        + supportsColumnAliasing()
        + supportsConvert()
        + supportsConvert()
        + supportsCoreSQLGrammar()
        + supportsCorrelatedSubqueries()
        + supportsDataDefinitionAndDataManipulationTransactions()
        + supportsDataManipulationTransactionsOnly()
        + supportsDifferentTableCorrelationNames()
        + supportsExpressionsInOrderBy()
        + supportsExtendedSQLGrammar()
        + supportsFullOuterJoins()
        + supportsGetGeneratedKeys()
        + supportsGroupBy()
        + supportsGroupByBeyondSelect()
        + supportsGroupByUnrelated()
        + supportsIntegrityEnhancementFacility()
        + supportsLikeEscapeClause()
        + supportsLimitedOuterJoins()
        + supportsMinimumSQLGrammar()
        + supportsMixedCaseIdentifiers()
        + supportsMixedCaseQuotedIdentifiers()
        + supportsMultipleOpenResults()
        + supportsMultipleResultSets()
        + supportsMultipleTransactions()
        + supportsNamedParameters()
        + supportsNonNullableColumns()
        + supportsOpenCursorsAcrossCommit()
        + supportsOpenCursorsAcrossRollback()
        + supportsOpenStatementsAcrossCommit()
        + supportsOpenStatementsAcrossRollback()
        + supportsOrderByUnrelated()
        + supportsOuterJoins()
        + supportsPositionedDelete()
        + supportsPositionedUpdate()
        + supportsResultSetConcurrency()
        + supportsResultSetHoldability()
        + supportsResultSetType()
        + supportsSavepoints()
        + supportsSchemasInDataManipulation()
        + supportsSchemasInIndexDefinitions()
        + supportsSchemasInPrivilegeDefinitions()
        + supportsSchemasInProcedureCalls()
        + supportsSchemasInTableDefinitions()
        + supportsSelectForUpdate()
        + supportsStatementPooling()
        + supportsStoredFunctionsUsingCallSyntax()
        + supportsStoredProcedures()
        + supportsSubqueriesInComparisons()
        + supportsSubqueriesInExists()
        + supportsSubqueriesInIns()
        + supportsSubqueriesInQuantifieds()
        + supportsTableCorrelationNames()
        + supportsTransactionIsolationLevel()
        + supportsTransactions()
        + supportsUnion()
        + supportsUnionAll()
        + updatesAreDetected()
        + usesLocalFilePerTable()
        + usesLocalFiles()
        # DatabaseMetaData()
        # convertToJdbcFunctionList()
        # convertToJdbcProcedureList()
        # createColumnsFields()
        # createFieldMetadataForGetProcedures()
        # createFkMetadataFields()
        # createFunctionColumnsFields()
        # createIndexInfoFields()
        # createProcedureColumnsFields()
        # createTablesFields()
        # getCatalogIterator()
        # getColumnType()
        # getExceptionInterceptor()
        # getExportKeyResults()
        # getForeignKeyActions()
        # getFullyQualifiedName()
        # getImportKeyResults()
        {static} # getInstance()
        # getJDBC4FunctionNoTableConstant()
        # getProcedureOrFunctionColumns()
        # getProceduresAndOrFunctions()
        # getTableNameWithCase()
        # parseTableStatusIntoLocalAndReferencedColumns()
        # prepareMetaDataSafeStatement()
        # s2b()
        {static} ~ buildResultSet()
        - buildResultSet()
        - convertTypeDescriptorToProcedureRow()
        - endPositionOfParameterDeclaration()
        - findEndOfReturnsClause()
        - getCallStmtParameterTypes()
        - getCascadeDeleteOption()
        - getCascadeUpdateOption()
        - getResultsImpl()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData.ComparableWrapper {
        + ComparableWrapper()
        + compareTo()
        + equals()
        + getKey()
        + getValue()
        + hashCode()
        + toString()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData.IndexMetaDataKey {
        ~ columnIndexName : String
        ~ columnNonUnique : Boolean
        ~ columnOrdinalPosition : Short
        ~ columnType : Short
        + compareTo()
        + equals()
        + hashCode()
        ~ IndexMetaDataKey()
    }
  }
  

  namespace com.mysql.jdbc {
    abstract class com.mysql.jdbc.DatabaseMetaData.IteratorWithCleanup {
        {abstract} ~ close()
        {abstract} ~ hasNext()
        {abstract} ~ next()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData.LocalAndReferencedColumns {
        ~ constraintName : String
        ~ localColumnsList : List<String>
        ~ referencedCatalog : String
        ~ referencedColumnsList : List<String>
        ~ referencedTable : String
        ~ LocalAndReferencedColumns()
    }
  }
  

  namespace com.mysql.jdbc {
    enum ProcedureType {
      FUNCTION
      PROCEDURE
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData.ResultSetIterator {
        ~ colIndex : int
        ~ resultSet : ResultSet
        ~ ResultSetIterator()
        ~ close()
        ~ hasNext()
        ~ next()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData.SingleStringIterator {
        ~ onFirst : boolean
        ~ value : String
        ~ SingleStringIterator()
        ~ close()
        ~ hasNext()
        ~ next()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData.TableMetaDataKey {
        ~ tableCat : String
        ~ tableName : String
        ~ tableSchem : String
        ~ tableType : String
        + compareTo()
        + equals()
        + hashCode()
        ~ TableMetaDataKey()
    }
  }
  

  namespace com.mysql.jdbc {
    enum TableType {
      LOCAL_TEMPORARY
      SYSTEM_TABLE
      SYSTEM_VIEW
      TABLE
      UNKNOWN
      VIEW
      name
      nameAsBytes
      synonyms
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaData.TypeDescriptor {
        ~ bufferLength : int
        ~ charOctetLength : int
        ~ columnSize : Integer
        ~ dataType : short
        ~ decimalDigits : Integer
        ~ isNullable : String
        ~ nullability : int
        ~ numPrecRadix : int
        ~ typeName : String
        ~ TypeDescriptor()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema {
        - hasParametersView : boolean
        - hasReferentialConstraintsView : boolean
        + getColumnPrivileges()
        + getColumns()
        + getCrossReference()
        + getExportedKeys()
        + getFunctionColumns()
        + getFunctions()
        + getImportedKeys()
        + getIndexInfo()
        + getPrimaryKeys()
        + getProcedureColumns()
        + getProcedures()
        + getTables()
        + getVersionColumns()
        + gethasParametersView()
        # DatabaseMetaDataUsingInfoSchema()
        # executeMetadataQuery()
        # getJDBC4FunctionConstant()
        # getJDBC4FunctionNoTableConstant()
        # getProcedureColumnsNoISParametersView()
        # getRoutineTypeConditionForGetProcedureColumns()
        # getRoutineTypeConditionForGetProcedures()
        - generateDeleteRuleClause()
        - generateOptionalRefContraintsJoin()
        - generateUpdateRuleClause()
    }
  }
  

  namespace com.mysql.jdbc {
    enum JDBC4FunctionConstant {
      FUNCTION_COLUMN_IN
      FUNCTION_COLUMN_INOUT
      FUNCTION_COLUMN_OUT
      FUNCTION_COLUMN_RESULT
      FUNCTION_COLUMN_RETURN
      FUNCTION_COLUMN_UNKNOWN
      FUNCTION_NO_NULLS
      FUNCTION_NULLABLE
      FUNCTION_NULLABLE_UNKNOWN
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.DocsConnectionPropsHelper {
        {static} ~ serialVersionUID : long
        {static} + main()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Driver {
        + Driver()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.EscapeProcessor {
        {static} - JDBC_CONVERT_TO_MYSQL_TYPE_MAP : Map<String, String>
        {static} - JDBC_NO_CONVERT_TO_MYSQL_EXPRESSION_MAP : Map<String, String>
        {static} + escapeSQL()
        {static} - processConvertToken()
        {static} - processTimeToken()
        {static} - processTimestampToken()
        {static} - removeWhitespace()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.EscapeProcessorResult {
        ~ callingStoredFunction : boolean
        ~ escapedSql : String
        ~ usesVariables : byte
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.EscapeTokenizer {
        {static} - CHR_BEGIN_TOKEN : char
        {static} - CHR_COMMENT : char
        {static} - CHR_CR : char
        {static} - CHR_DBL_QUOTE : char
        {static} - CHR_END_TOKEN : char
        {static} - CHR_ESCAPE : char
        {static} - CHR_LF : char
        {static} - CHR_SGL_QUOTE : char
        {static} - CHR_VARIABLE : char
        - bracesLevel : int
        - emittingEscapeCode : boolean
        - inQuotes : boolean
        - pos : int
        - quoteChar : char
        - sawVariableUse : boolean
        - source : String
        - sourceLength : int
        + EscapeTokenizer()
        + hasMoreTokens()
        + nextToken()
        ~ sawVariableUse()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.ExceptionInterceptor {
        {abstract} + interceptException()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ExportControlled {
        {static} - SQL_STATE_BAD_SSL_PARAMS : String
        {static} - TLS_PROTOCOLS : String[]
        {static} - TLSv1 : String
        {static} - TLSv1_1 : String
        {static} - TLSv1_2 : String
        {static} + decodeRSAPublicKey()
        {static} + encryptWithRSAPublicKey()
        {static} + isSSLEstablished()
        {static} # enabled()
        {static} # transformSocketToSSLSocket()
        - ExportControlled()
        {static} - getSSLSocketFactoryDefaultOrConfigured()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ExportControlled.StandardSSLSocketFactory {
        - existingSocket : Socket
        - existingSocketFactory : SocketFactory
        - rawSocket : SSLSocket
        - sslFact : SSLSocketFactory
        + StandardSSLSocketFactory()
        + afterHandshake()
        + beforeHandshake()
        + connect()
        + isLocallyConnected()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ExportControlled.X509TrustManagerWrapper {
        - certFactory : CertificateFactory
        - origTm : X509TrustManager
        - validator : CertPathValidator
        - validatorParams : PKIXParameters
        - verifyServerCert : boolean
        + X509TrustManagerWrapper()
        + X509TrustManagerWrapper()
        + checkClientTrusted()
        + checkServerTrusted()
        + getAcceptedIssuers()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.Extension {
        {abstract} + destroy()
        {abstract} + init()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.FailoverConnectionProxy {
        {static} - DEFAULT_PRIMARY_HOST_INDEX : int
        {static} - INTERFACES_TO_PROXY : Class<?>[]
        {static} - METHOD_COMMIT : String
        {static} - METHOD_ROLLBACK : String
        {static} - METHOD_SET_AUTO_COMMIT : String
        {static} - METHOD_SET_READ_ONLY : String
        {static} - NO_CONNECTION_INDEX : int
        - currentHostIndex : int
        - enableFallBackToPrimaryHost : boolean
        - explicitlyAutoCommit : boolean
        - explicitlyReadOnly : Boolean
        - failoverReadOnly : boolean
        - primaryHostFailTimeMillis : long
        - primaryHostIndex : int
        - queriesBeforeRetryPrimaryHost : long
        - queriesIssuedSinceFailover : long
        - retriesAllDown : int
        - secondsBeforeRetryPrimaryHost : int
        {static} + createProxyInstance()
        + invokeMore()
        ~ connectedToPrimaryHost()
        ~ connectedToSecondaryHost()
        ~ createConnectionForHostIndex()
        ~ doAbort()
        ~ doAbortInternal()
        ~ doClose()
        ~ fallBackToPrimaryIfAvailable()
        ~ getNewJdbcInterfaceProxy()
        ~ incrementQueriesIssuedSinceFailover()
        ~ isConnected()
        ~ isMasterConnection()
        ~ isPrimaryHostIndex()
        ~ pickNewConnection()
        ~ readyToFallBackToPrimaryHost()
        ~ shouldExceptionTriggerConnectionSwitch()
        - FailoverConnectionProxy()
        - connectTo()
        - failOver()
        - failOver()
        - nextHost()
        - queriesBeforeRetryPrimaryHostIsMet()
        - resetAutoFallBackCounters()
        - secondsBeforeRetryPrimaryHostIsMet()
        - switchCurrentConnectionTo()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.FailoverConnectionProxy.FailoverJdbcInterfaceProxy {
        + invoke()
        ~ FailoverJdbcInterfaceProxy()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Field {
        # defaultValueLength : int
        # defaultValueStart : int
        {static} - AUTO_INCREMENT_FLAG : int
        {static} - NO_CHARSET_INFO : int
        - buffer : byte[]
        - colDecimals : int
        - colFlag : short
        - collationIndex : int
        - collationName : String
        - connection : MySQLConnection
        - databaseName : String
        - databaseNameLength : int
        - databaseNameStart : int
        - encoding : String
        - fullName : String
        - fullOriginalName : String
        - isImplicitTempTable : boolean
        - isSingleBit : boolean
        - length : long
        - maxBytesPerChar : int
        - mysqlType : int
        - name : String
        - nameLength : int
        - nameStart : int
        - originalColumnName : String
        - originalColumnNameLength : int
        - originalColumnNameStart : int
        - originalTableName : String
        - originalTableNameLength : int
        - originalTableNameStart : int
        - precisionAdjustFactor : int
        - sqlType : int
        - tableName : String
        - tableNameLength : int
        - tableNameStart : int
        - useOldNameMetadata : boolean
        - valueNeedsQuoting : boolean
        + getCollation()
        + getCollationIndex()
        + getColumnLabel()
        + getDatabaseName()
        + getEncoding()
        + getFullName()
        + getFullOriginalName()
        + getLength()
        + getMaxBytesPerCharacter()
        + getMysqlType()
        + getName()
        + getNameNoAliases()
        + getOriginalName()
        + getOriginalTableName()
        + getPrecisionAdjustFactor()
        + getSQLType()
        + getTable()
        + getTableName()
        + getTableNameNoAliases()
        + isAutoIncrement()
        + isBinary()
        + isBlob()
        + isCharsetApplicableType()
        + isMultipleKey()
        + isPrimaryKey()
        + isUniqueKey()
        + isUnsigned()
        + isZeroFill()
        + setConnection()
        + setEncoding()
        + setUnsigned()
        + toString()
        # getvalueNeedsQuoting()
        # isSingleBit()
        # setUseOldNameMetadata()
        ~ Field()
        ~ Field()
        ~ Field()
        ~ Field()
        ~ getDecimals()
        ~ isNotNull()
        ~ isOpaqueBinary()
        ~ isReadOnly()
        ~ setMysqlType()
        - checkForImplicitTemporaryTable()
        - determineNeedsQuoting()
        - getStringFromBytes()
        - isImplicitTemporaryTable()
        - isNativeDateTimeType()
        - isNativeNumericType()
        - setBlobTypeBasedOnLength()
        - setupForUtf8StringInBlob()
        - shouldSetupForUtf8StringInBlob()
    }
  }
  

  namespace com.mysql.jdbc {
    abstract class com.mysql.jdbc.IterateBlock {
        ~ iteratorWithCleanup : IteratorWithCleanup<T>
        ~ javaIterator : Iterator<T>
        ~ stopIterating : boolean
        + doForAll()
        + fullIteration()
        ~ IterateBlock()
        ~ IterateBlock()
        {abstract} ~ forEach()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC42CallableStatement {
        + JDBC42CallableStatement()
        + JDBC42CallableStatement()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + registerOutParameter()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        - checkSqlType()
        - translateAndCheckSqlType()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC42Helper {
        {static} ~ checkSqlType()
        {static} ~ convertJavaTimeToJavaSql()
        {static} ~ isSqlTypeSupported()
        {static} ~ translateAndCheckSqlType()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC42PreparedStatement {
        + JDBC42PreparedStatement()
        + JDBC42PreparedStatement()
        + JDBC42PreparedStatement()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        - checkSqlType()
        - translateAndCheckSqlType()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC42ResultSet {
        + JDBC42ResultSet()
        + JDBC42ResultSet()
        + getObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC42ServerPreparedStatement {
        + JDBC42ServerPreparedStatement()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        + setObject()
        - checkSqlType()
        - translateAndCheckSqlType()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC42UpdatableResultSet {
        + JDBC42UpdatableResultSet()
        + getObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
        - translateAndCheckSqlType()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4CallableStatement {
        + JDBC4CallableStatement()
        + JDBC4CallableStatement()
        + getCharacterStream()
        + getCharacterStream()
        + getNCharacterStream()
        + getNCharacterStream()
        + getNClob()
        + getNClob()
        + getNString()
        + getNString()
        + getRowId()
        + getRowId()
        + getSQLXML()
        + getSQLXML()
        + setNClob()
        + setNClob()
        + setNClob()
        + setNClob()
        + setNString()
        + setRowId()
        + setRowId()
        + setSQLXML()
        + setSQLXML()
        # getParamTypes()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.JDBC4ClientInfoProvider {
        {abstract} + destroy()
        {abstract} + getClientInfo()
        {abstract} + getClientInfo()
        {abstract} + initialize()
        {abstract} + setClientInfo()
        {abstract} + setClientInfo()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4ClientInfoProviderSP {
        ~ getClientInfoBulkSp : PreparedStatement
        ~ getClientInfoSp : PreparedStatement
        ~ setClientInfoSp : PreparedStatement
        + destroy()
        + getClientInfo()
        + getClientInfo()
        + initialize()
        + setClientInfo()
        + setClientInfo()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4CommentClientInfoProvider {
        - clientInfo : Properties
        + destroy()
        + getClientInfo()
        + getClientInfo()
        + initialize()
        + setClientInfo()
        + setClientInfo()
        - setComment()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4Connection {
        - infoProvider : JDBC4ClientInfoProvider
        {static} - serialVersionUID : long
        + JDBC4Connection()
        + createArrayOf()
        + createBlob()
        + createClob()
        + createNClob()
        + createSQLXML()
        + createStruct()
        + getClientInfo()
        + getClientInfo()
        + getClientInfoProviderImpl()
        + isValid()
        + isWrapperFor()
        + setClientInfo()
        + setClientInfo()
        + unwrap()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4DatabaseMetaData {
        + JDBC4DatabaseMetaData()
        + autoCommitFailureClosesAllResultSets()
        + getProcedureColumns()
        + getProcedures()
        + getRowIdLifetime()
        + isWrapperFor()
        + unwrap()
        # getColumnType()
        # getJDBC4FunctionNoTableConstant()
        {static} # getProcedureOrFunctionColumnType()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4DatabaseMetaDataUsingInfoSchema {
        + JDBC4DatabaseMetaDataUsingInfoSchema()
        + getRowIdLifetime()
        + isWrapperFor()
        + unwrap()
        # getColumnType()
        # getJDBC4FunctionConstant()
        # getJDBC4FunctionNoTableConstant()
        # getProcedureColumnsNoISParametersView()
        # getRoutineTypeConditionForGetProcedureColumns()
        # getRoutineTypeConditionForGetProcedures()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4LoadBalancedMySQLConnection {
        + JDBC4LoadBalancedMySQLConnection()
        + createArrayOf()
        + createBlob()
        + createClob()
        + createNClob()
        + createSQLXML()
        + createStruct()
        + getClientInfo()
        + getClientInfo()
        + getClientInfoProviderImpl()
        + isValid()
        + isWrapperFor()
        + setClientInfo()
        + setClientInfo()
        + unwrap()
        - getJDBC4Connection()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4MultiHostMySQLConnection {
        + JDBC4MultiHostMySQLConnection()
        + createArrayOf()
        + createBlob()
        + createClob()
        + createNClob()
        + createSQLXML()
        + createStruct()
        + getClientInfo()
        + getClientInfo()
        + getClientInfoProviderImpl()
        + isValid()
        + isWrapperFor()
        + setClientInfo()
        + setClientInfo()
        + unwrap()
        - getJDBC4Connection()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.JDBC4MySQLConnection {
        {abstract} + createArrayOf()
        {abstract} + createBlob()
        {abstract} + createClob()
        {abstract} + createNClob()
        {abstract} + createSQLXML()
        {abstract} + createStruct()
        {abstract} + getClientInfo()
        {abstract} + getClientInfo()
        {abstract} + getClientInfoProviderImpl()
        {abstract} + isValid()
        {abstract} + isWrapperFor()
        {abstract} + setClientInfo()
        {abstract} + setClientInfo()
        {abstract} + unwrap()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4MysqlSQLXML {
        - asByteArrayOutputStream : ByteArrayOutputStream
        - asDOMResult : DOMResult
        - asSAXResult : SAXResult
        - asStringWriter : StringWriter
        - columnIndexOfXml : int
        - exceptionInterceptor : ExceptionInterceptor
        - fromResultSet : boolean
        - inputFactory : XMLInputFactory
        - isClosed : boolean
        - outputFactory : XMLOutputFactory
        - owningResultSet : ResultSetInternalMethods
        - stringRep : String
        - workingWithResult : boolean
        + free()
        + getBinaryStream()
        + getCharacterStream()
        + getSource()
        + getString()
        + isEmpty()
        + setBinaryStream()
        + setCharacterStream()
        + setResult()
        + setString()
        # JDBC4MysqlSQLXML()
        # JDBC4MysqlSQLXML()
        # domSourceToString()
        # readerToString()
        # serializeAsCharacterStream()
        # serializeAsString()
        - binaryInputStreamStreamToReader()
        - checkClosed()
        - checkWorkingWithResult()
        - setBinaryStreamInternal()
        - setCharacterStreamInternal()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4MysqlSQLXML.SimpleSaxToReader {
        ~ buf : StringBuilder
        - inCDATA : boolean
        + characters()
        + comment()
        + endCDATA()
        + endDocument()
        + ignorableWhitespace()
        + startCDATA()
        + startDocument()
        + startElement()
        ~ toReader()
        - escapeCharsForXml()
        - escapeCharsForXml()
        - escapeCharsForXml()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4NClob {
        ~ JDBC4NClob()
        ~ JDBC4NClob()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4PreparedStatement {
        + JDBC4PreparedStatement()
        + JDBC4PreparedStatement()
        + JDBC4PreparedStatement()
        + setNClob()
        + setRowId()
        + setSQLXML()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4PreparedStatementHelper {
        {static} ~ setNClob()
        {static} ~ setNClob()
        {static} ~ setNClob()
        {static} ~ setRowId()
        {static} ~ setSQLXML()
        - JDBC4PreparedStatementHelper()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4ReplicationMySQLConnection {
        + JDBC4ReplicationMySQLConnection()
        + createArrayOf()
        + createBlob()
        + createClob()
        + createNClob()
        + createSQLXML()
        + createStruct()
        + getClientInfo()
        + getClientInfo()
        + getClientInfoProviderImpl()
        + isValid()
        + isWrapperFor()
        + setClientInfo()
        + setClientInfo()
        + unwrap()
        - getJDBC4Connection()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4ResultSet {
        + JDBC4ResultSet()
        + JDBC4ResultSet()
        + getHoldability()
        + getNCharacterStream()
        + getNCharacterStream()
        + getNClob()
        + getNClob()
        + getNString()
        + getNString()
        + getObject()
        + getRowId()
        + getRowId()
        + getSQLXML()
        + getSQLXML()
        + isWrapperFor()
        + unwrap()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBlob()
        + updateBlob()
        + updateBlob()
        + updateBlob()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateClob()
        + updateClob()
        + updateClob()
        + updateClob()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNString()
        + updateNString()
        + updateRowId()
        + updateRowId()
        + updateSQLXML()
        + updateSQLXML()
        # getNativeNClob()
        - getNClobFromString()
        - getStringForNClob()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4ServerPreparedStatement {
        + JDBC4ServerPreparedStatement()
        + setNCharacterStream()
        + setNClob()
        + setNClob()
        + setNString()
        + setRowId()
        + setSQLXML()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.JDBC4UpdatableResultSet {
        + JDBC4UpdatableResultSet()
        + getHoldability()
        + getNCharacterStream()
        + getNCharacterStream()
        + getNClob()
        + getNClob()
        + getNString()
        + getNString()
        + getRowId()
        + getRowId()
        + getSQLXML()
        + getSQLXML()
        + isClosed()
        + isWrapperFor()
        + unwrap()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBlob()
        + updateBlob()
        + updateBlob()
        + updateBlob()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateClob()
        + updateClob()
        + updateClob()
        + updateClob()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNCharacterStream()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNClob()
        + updateNString()
        + updateNString()
        + updateRowId()
        + updateSQLXML()
        + updateSQLXML()
        # getNativeNClob()
        - getNClobFromString()
        - getStringForNClob()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.LicenseConfiguration {
        {static} ~ checkLicenseType()
        - LicenseConfiguration()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.LoadBalanceExceptionChecker {
        {abstract} + shouldExceptionTriggerFailover()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.LoadBalancedAutoCommitInterceptor {
        - conn : ConnectionImpl
        - countStatements : boolean
        - matchingAfterStatementCount : int
        - matchingAfterStatementRegex : String
        - matchingAfterStatementThreshold : int
        - proxy : LoadBalancedConnectionProxy
        + destroy()
        + executeTopLevelOnly()
        + init()
        + postProcess()
        + preProcess()
        ~ pauseCounters()
        ~ resumeCounters()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.LoadBalancedConnection {
        {abstract} + addHost()
        {abstract} + ping()
        {abstract} + removeHost()
        {abstract} + removeHostWhenNotInUse()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.LoadBalancedConnectionProxy {
        {static} + BLACKLIST_TIMEOUT_PROPERTY_KEY : String
        {static} + HOST_REMOVAL_GRACE_PERIOD_PROPERTY_KEY : String
        # liveConnections : Map<String, ConnectionImpl>
        {static} - INTERFACES_TO_PROXY : Class<?>[]
        {static} - JDBC_4_LB_CONNECTION_CTOR : Constructor<?>
        - autoCommitSwapThreshold : int
        - balancer : BalanceStrategy
        - connectionGroup : ConnectionGroup
        - connectionGroupProxyID : long
        - connectionsToHostsMap : Map<ConnectionImpl, String>
        - exceptionChecker : LoadBalanceExceptionChecker
        {static} - globalBlacklist : Map<String, Long>
        - globalBlacklistTimeout : int
        - hostRemovalGracePeriod : int
        - hostsToListIndexMap : Map<String, Integer>
        - hostsToRemove : Set<String>
        - inTransaction : boolean
        {static} - nullLBConnectionInstance : LoadBalancedConnection
        - responseTimes : long[]
        - retriesAllDown : int
        - totalPhysicalConnections : long
        - transactionCount : long
        - transactionStartTime : long
        + addHost()
        + addToGlobalBlacklist()
        + addToGlobalBlacklist()
        + createConnectionForHost()
        {static} + createProxyInstance()
        + doPing()
        + getActivePhysicalConnectionCount()
        + getConnectionGroupProxyID()
        + getCurrentActiveHost()
        + getCurrentTransactionDuration()
        + getGlobalBlacklist()
        + getTotalPhysicalConnectionCount()
        + getTransactionCount()
        + inTransaction()
        + invokeMore()
        + isGlobalBlacklistEnabled()
        + removeHost()
        + removeHostWhenNotInUse()
        # propagateProxyDown()
        ~ doAbort()
        ~ doAbortInternal()
        ~ doClose()
        ~ getNewWrapperForThisAsConnection()
        {static} ~ getNullLoadBalancedConnectionInstance()
        ~ invalidateConnection()
        ~ isMasterConnection()
        ~ pickNewConnection()
        ~ shouldExceptionTriggerConnectionSwitch()
        ~ syncSessionState()
        - LoadBalancedConnectionProxy()
        - closeAllConnections()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.LoadBalancedConnectionProxy.NullLoadBalancedConnectionProxy {
        + NullLoadBalancedConnectionProxy()
        + invoke()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.LoadBalancedMySQLConnection {
        + LoadBalancedMySQLConnection()
        + addHost()
        + close()
        + ping()
        + ping()
        + removeHost()
        + removeHostWhenNotInUse()
        # getThisAsProxy()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Messages {
        {static} - BUNDLE_NAME : String
        {static} - RESOURCE_BUNDLE : ResourceBundle
        {static} + getString()
        {static} + getString()
        - Messages()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MiniAdmin {
        - conn : Connection
        + MiniAdmin()
        + MiniAdmin()
        + MiniAdmin()
        + shutdown()
    }
  }
  

  namespace com.mysql.jdbc {
    abstract class com.mysql.jdbc.MultiHostConnectionProxy {
        # lastExceptionDealtWith : Throwable
        ~ autoReconnect : boolean
        ~ closedExplicitly : boolean
        ~ closedReason : String
        ~ currentConnection : MySQLConnection
        ~ hostList : List<String>
        ~ isClosed : boolean
        ~ localProps : Properties
        ~ proxyConnection : MySQLConnection
        ~ thisAsConnection : MySQLConnection
        {static} - JDBC_4_MS_CONNECTION_CTOR : Constructor<?>
        {static} - METHOD_ABORT : String
        {static} - METHOD_ABORT_INTERNAL : String
        {static} - METHOD_CLOSE : String
        {static} - METHOD_EQUALS : String
        {static} - METHOD_GET_AUTO_COMMIT : String
        {static} - METHOD_GET_CATALOG : String
        {static} - METHOD_GET_MULTI_HOST_SAFE_PROXY : String
        {static} - METHOD_GET_SESSION_MAX_ROWS : String
        {static} - METHOD_GET_TRANSACTION_ISOLATION : String
        {static} - METHOD_HASH_CODE : String
        {static} - METHOD_IS_CLOSED : String
        + invoke()
        # allowedOnClosedConnection()
        # getProxy()
        # propagateProxyDown()
        # setProxy()
        ~ MultiHostConnectionProxy()
        ~ MultiHostConnectionProxy()
        ~ createConnectionForHost()
        ~ dealWithInvocationException()
        {abstract} ~ doAbort()
        {abstract} ~ doAbortInternal()
        {abstract} ~ doClose()
        ~ getNewJdbcInterfaceProxy()
        ~ getNewWrapperForThisAsConnection()
        ~ initializeHostsSpecs()
        ~ invalidateConnection()
        ~ invalidateCurrentConnection()
        {abstract} ~ invokeMore()
        {abstract} ~ isMasterConnection()
        {abstract} ~ pickNewConnection()
        ~ proxyIfReturnTypeIsJdbcInterface()
        {abstract} ~ shouldExceptionTriggerConnectionSwitch()
        ~ syncSessionState()
        ~ syncSessionState()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MultiHostConnectionProxy.JdbcInterfaceProxy {
        ~ invokeOn : Object
        + invoke()
        ~ JdbcInterfaceProxy()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MultiHostMySQLConnection {
        # thisAsProxy : MultiHostConnectionProxy
        + MultiHostMySQLConnection()
        + abort()
        + abortInternal()
        + changeUser()
        + checkClosed()
        + clearHasTriedMaster()
        + clearWarnings()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + clientPrepareStatement()
        + close()
        + commit()
        + createNewIO()
        + createStatement()
        + createStatement()
        + createStatement()
        + decachePreparedStatement()
        + dumpTestcaseQuery()
        + duplicate()
        + execSQL()
        + execSQL()
        + exposeAsXml()
        + extractSqlFromPacket()
        + generateConnectionCommentBlock()
        + getActiveMySQLConnection()
        + getActiveStatementCount()
        + getAllowLoadLocalInfile()
        + getAllowMasterDownConnections()
        + getAllowMultiQueries()
        + getAllowNanAndInf()
        + getAllowPublicKeyRetrieval()
        + getAllowSlaveDownConnections()
        + getAllowUrlInLocalInfile()
        + getAlwaysSendSetIsolation()
        + getAuthenticationPlugins()
        + getAutoClosePStmtStreams()
        + getAutoCommit()
        + getAutoDeserialize()
        + getAutoGenerateTestcaseScript()
        + getAutoIncrementIncrement()
        + getAutoReconnectForPools()
        + getAutoSlowLog()
        + getBlobSendChunkSize()
        + getBlobsAreStrings()
        + getCacheCallableStatements()
        + getCacheCallableStmts()
        + getCacheDefaultTimezone()
        + getCachePrepStmts()
        + getCachePreparedStatements()
        + getCacheResultSetMetadata()
        + getCacheServerConfiguration()
        + getCachedMetaData()
        + getCalendarInstanceForSessionOrNew()
        + getCallableStatementCacheSize()
        + getCallableStmtCacheSize()
        + getCancelTimer()
        + getCapitalizeTypeNames()
        + getCatalog()
        + getCharacterSetMetadata()
        + getCharacterSetResults()
        + getCharsetConverter()
        + getCharsetNameForIndex()
        + getClientCertificateKeyStorePassword()
        + getClientCertificateKeyStoreType()
        + getClientCertificateKeyStoreUrl()
        + getClientInfoProvider()
        + getClobCharacterEncoding()
        + getClobberStreamingResults()
        + getCompensateOnDuplicateKeyUpdateCounts()
        + getConnectTimeout()
        + getConnectionAttributes()
        + getConnectionCollation()
        + getConnectionLifecycleInterceptors()
        + getConnectionMutex()
        + getContinueBatchOnError()
        + getCreateDatabaseIfNotExist()
        + getDefaultAuthenticationPlugin()
        + getDefaultFetchSize()
        + getDefaultTimeZone()
        + getDetectCustomCollations()
        + getDisabledAuthenticationPlugins()
        + getDisconnectOnExpiredPasswords()
        + getDontCheckOnDuplicateKeyUpdateInSQL()
        + getDontTrackOpenResources()
        + getDumpMetadataOnColumnNotFound()
        + getDumpQueriesOnException()
        + getDynamicCalendars()
        + getElideSetAutoCommits()
        + getEmptyStringsConvertToZero()
        + getEmulateLocators()
        + getEmulateUnsupportedPstmts()
        + getEnableEscapeProcessing()
        + getEnablePacketDebug()
        + getEnableQueryTimeouts()
        + getEnabledSSLCipherSuites()
        + getEnabledTLSProtocols()
        + getEncoding()
        + getEncodingForIndex()
        + getErrorMessageEncoding()
        + getExceptionInterceptor()
        + getExceptionInterceptors()
        + getExplainSlowQueries()
        + getFailOverReadOnly()
        + getFunctionsNeverReturnBlobs()
        + getGatherPerfMetrics()
        + getGatherPerformanceMetrics()
        + getGenerateSimpleParameterMetadata()
        + getGetProceduresReturnsFunctions()
        + getHoldResultsOpenOverStatementClose()
        + getHoldability()
        + getHost()
        + getHostPortPair()
        + getIO()
        + getId()
        + getIdleFor()
        + getIgnoreNonTxTables()
        + getIncludeInnodbStatusInDeadlockExceptions()
        + getIncludeThreadDumpInDeadlockExceptions()
        + getIncludeThreadNamesAsStatementComment()
        + getInitialTimeout()
        + getInteractiveClient()
        + getIsInteractiveClient()
        + getJdbcCompliantTruncation()
        + getJdbcCompliantTruncationForReads()
        + getLargeRowSizeThreshold()
        + getLoadBalanceAutoCommitStatementRegex()
        + getLoadBalanceAutoCommitStatementThreshold()
        + getLoadBalanceBlacklistTimeout()
        + getLoadBalanceConnectionGroup()
        + getLoadBalanceEnableJMX()
        + getLoadBalanceExceptionChecker()
        + getLoadBalanceHostRemovalGracePeriod()
        + getLoadBalancePingTimeout()
        + getLoadBalanceSQLExceptionSubclassFailover()
        + getLoadBalanceSQLStateFailover()
        + getLoadBalanceSafeProxy()
        + getLoadBalanceStrategy()
        + getLoadBalanceValidateConnectionOnSwapServer()
        + getLocalSocketAddress()
        + getLocatorFetchBufferSize()
        + getLog()
        + getLogSlowQueries()
        + getLogXaCommands()
        + getLogger()
        + getLoggerClassName()
        + getMaintainTimeStats()
        + getMaxAllowedPacket()
        + getMaxBytesPerChar()
        + getMaxBytesPerChar()
        + getMaxQuerySizeToLog()
        + getMaxReconnects()
        + getMaxRows()
        + getMetaData()
        + getMetadataCacheSize()
        + getMetadataSafeStatement()
        + getMultiHostSafeProxy()
        + getNetBufferLength()
        + getNetTimeoutForStreamingResults()
        + getNetworkTimeout()
        + getNoAccessToProcedureBodies()
        + getNoDatetimeStringSync()
        + getNoTimezoneConversionForDateType()
        + getNoTimezoneConversionForTimeType()
        + getNullCatalogMeansCurrent()
        + getNullNamePatternMatchesAll()
        + getOverrideSupportsIntegrityEnhancementFacility()
        + getPacketDebugBufferSize()
        + getPadCharsWithSpace()
        + getParanoid()
        + getParseInfoCacheFactory()
        + getPasswordCharacterEncoding()
        + getPedantic()
        + getPinGlobalTxToPhysicalConnection()
        + getPopulateInsertRowWithDefaultValues()
        + getPrepStmtCacheSize()
        + getPrepStmtCacheSqlLimit()
        + getPreparedStatementCacheSize()
        + getPreparedStatementCacheSqlLimit()
        + getProcessEscapeCodesForPrepStmts()
        + getProfileSQL()
        + getProfileSql()
        + getProfilerEventHandler()
        + getProfilerEventHandlerInstance()
        + getProperties()
        + getPropertiesTransform()
        + getQueriesBeforeRetryMaster()
        + getQueryTimeoutKillsConnection()
        + getQueryTimingUnits()
        + getReadFromMasterWhenNoSlaves()
        + getReadOnlyPropagatesToServer()
        + getReconnectAtTxEnd()
        + getRelaxAutoCommit()
        + getReplicationEnableJMX()
        + getReportMetricsIntervalMillis()
        + getRequireSSL()
        + getRequiresEscapingEncoder()
        + getResourceId()
        + getResultSetSizeThreshold()
        + getRetainStatementAfterResultSetClose()
        + getRetriesAllDown()
        + getRewriteBatchedStatements()
        + getRollbackOnPooledClose()
        + getRoundRobinLoadBalance()
        + getRunningCTS13()
        + getSchema()
        + getSecondsBeforeRetryMaster()
        + getSelfDestructOnPingMaxOperations()
        + getSelfDestructOnPingSecondsLifetime()
        + getSendFractionalSeconds()
        + getServerAffinityOrder()
        + getServerCharacterEncoding()
        + getServerCharset()
        + getServerConfigCacheFactory()
        + getServerMajorVersion()
        + getServerMinorVersion()
        + getServerRSAPublicKeyFile()
        + getServerSubMinorVersion()
        + getServerTimezone()
        + getServerTimezoneTZ()
        + getServerVariable()
        + getServerVersion()
        + getSessionLockedCalendar()
        + getSessionMaxRows()
        + getSessionVariables()
        + getSlowQueryThresholdMillis()
        + getSlowQueryThresholdNanos()
        + getSocketFactory()
        + getSocketFactoryClassName()
        + getSocketTimeout()
        + getSocksProxyHost()
        + getSocksProxyPort()
        + getStatementComment()
        + getStatementInterceptors()
        + getStatementInterceptorsInstances()
        + getStrictFloatingPoint()
        + getStrictUpdates()
        + getTcpKeepAlive()
        + getTcpNoDelay()
        + getTcpRcvBuf()
        + getTcpSndBuf()
        + getTcpTrafficClass()
        + getTinyInt1isBit()
        + getTraceProtocol()
        + getTransactionIsolation()
        + getTransformedBitIsBoolean()
        + getTreatUtilDateAsTimestamp()
        + getTrustCertificateKeyStorePassword()
        + getTrustCertificateKeyStoreType()
        + getTrustCertificateKeyStoreUrl()
        + getTypeMap()
        + getURL()
        + getUltraDevHack()
        + getUseAffectedRows()
        + getUseBlobToStoreUTF8OutsideBMP()
        + getUseColumnNamesInFindColumn()
        + getUseCompression()
        + getUseConfigs()
        + getUseCursorFetch()
        + getUseDirectRowUnpack()
        + getUseDynamicCharsetInfo()
        + getUseFastDateParsing()
        + getUseFastIntParsing()
        + getUseGmtMillisForDatetimes()
        + getUseHostsInPrivileges()
        + getUseInformationSchema()
        + getUseJDBCCompliantTimezoneShift()
        + getUseJvmCharsetConverters()
        + getUseLegacyDatetimeCode()
        + getUseLocalSessionState()
        + getUseLocalTransactionState()
        + getUseNanosForElapsedTime()
        + getUseOldAliasMetadataBehavior()
        + getUseOldUTF8Behavior()
        + getUseOnlyServerErrorMessages()
        + getUseReadAheadInput()
        + getUseSSL()
        + getUseSSPSCompatibleTimezoneShift()
        + getUseServerPrepStmts()
        + getUseServerPreparedStmts()
        + getUseSqlStateCodes()
        + getUseStreamLengthsInPrepStmts()
        + getUseTimezone()
        + getUseUltraDevWorkAround()
        + getUseUnbufferedInput()
        + getUseUnicode()
        + getUseUsageAdvisor()
        + getUser()
        + getUtcCalendar()
        + getUtf8OutsideBmpExcludedColumnNamePattern()
        + getUtf8OutsideBmpIncludedColumnNamePattern()
        + getVerifyServerCertificate()
        + getWarnings()
        + getYearIsDateType()
        + getZeroDateTimeBehavior()
        + hasSameProperties()
        + hasTriedMaster()
        + incrementNumberOfPreparedExecutes()
        + incrementNumberOfPrepares()
        + incrementNumberOfResultSetsCreated()
        + initializeExtension()
        + initializeResultsMetadataFromCache()
        + initializeSafeStatementInterceptors()
        + isAbonormallyLongQuery()
        + isClientTzUTC()
        + isClosed()
        + isCursorFetchEnabled()
        + isInGlobalTx()
        + isMasterConnection()
        + isNoBackslashEscapesSet()
        + isProxySet()
        + isReadInfoMsgEnabled()
        + isReadOnly()
        + isReadOnly()
        + isRunningOnJDK13()
        + isSameResource()
        + isServerLocal()
        + isServerTruncatesFracSecs()
        + isServerTzUTC()
        + isUseSSLExplicit()
        + lowerCaseTableNames()
        + nativeSQL()
        + parserKnowsUnicode()
        + ping()
        + pingInternal()
        + prepareCall()
        + prepareCall()
        + prepareCall()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + prepareStatement()
        + realClose()
        + recachePreparedStatement()
        + registerQueryExecutionTime()
        + registerStatement()
        + releaseSavepoint()
        + reportNumberOfTablesAccessed()
        + reportQueryTime()
        + resetServerState()
        + rollback()
        + rollback()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverPrepareStatement()
        + serverSupportsConvertFn()
        + setAllowLoadLocalInfile()
        + setAllowMasterDownConnections()
        + setAllowMultiQueries()
        + setAllowNanAndInf()
        + setAllowPublicKeyRetrieval()
        + setAllowSlaveDownConnections()
        + setAllowUrlInLocalInfile()
        + setAlwaysSendSetIsolation()
        + setAuthenticationPlugins()
        + setAutoClosePStmtStreams()
        + setAutoCommit()
        + setAutoDeserialize()
        + setAutoGenerateTestcaseScript()
        + setAutoReconnect()
        + setAutoReconnectForConnectionPools()
        + setAutoReconnectForPools()
        + setAutoSlowLog()
        + setBlobSendChunkSize()
        + setBlobsAreStrings()
        + setCacheCallableStatements()
        + setCacheCallableStmts()
        + setCacheDefaultTimezone()
        + setCachePrepStmts()
        + setCachePreparedStatements()
        + setCacheResultSetMetadata()
        + setCacheServerConfiguration()
        + setCallableStatementCacheSize()
        + setCallableStmtCacheSize()
        + setCapitalizeDBMDTypes()
        + setCapitalizeTypeNames()
        + setCatalog()
        + setCharacterEncoding()
        + setCharacterSetResults()
        + setClientCertificateKeyStorePassword()
        + setClientCertificateKeyStoreType()
        + setClientCertificateKeyStoreUrl()
        + setClientInfoProvider()
        + setClobCharacterEncoding()
        + setClobberStreamingResults()
        + setCompensateOnDuplicateKeyUpdateCounts()
        + setConnectTimeout()
        + setConnectionCollation()
        + setConnectionLifecycleInterceptors()
        + setContinueBatchOnError()
        + setCreateDatabaseIfNotExist()
        + setDefaultAuthenticationPlugin()
        + setDefaultFetchSize()
        + setDetectCustomCollations()
        + setDetectServerPreparedStmts()
        + setDisabledAuthenticationPlugins()
        + setDisconnectOnExpiredPasswords()
        + setDontCheckOnDuplicateKeyUpdateInSQL()
        + setDontTrackOpenResources()
        + setDumpMetadataOnColumnNotFound()
        + setDumpQueriesOnException()
        + setDynamicCalendars()
        + setElideSetAutoCommits()
        + setEmptyStringsConvertToZero()
        + setEmulateLocators()
        + setEmulateUnsupportedPstmts()
        + setEnableEscapeProcessing()
        + setEnablePacketDebug()
        + setEnableQueryTimeouts()
        + setEnabledSSLCipherSuites()
        + setEnabledTLSProtocols()
        + setEncoding()
        + setExceptionInterceptors()
        + setExplainSlowQueries()
        + setFailOverReadOnly()
        + setFailedOver()
        + setFunctionsNeverReturnBlobs()
        + setGatherPerfMetrics()
        + setGatherPerformanceMetrics()
        + setGenerateSimpleParameterMetadata()
        + setGetProceduresReturnsFunctions()
        + setHoldResultsOpenOverStatementClose()
        + setHoldability()
        + setIgnoreNonTxTables()
        + setInGlobalTx()
        + setIncludeInnodbStatusInDeadlockExceptions()
        + setIncludeThreadDumpInDeadlockExceptions()
        + setIncludeThreadNamesAsStatementComment()
        + setInitialTimeout()
        + setInteractiveClient()
        + setIsInteractiveClient()
        + setJdbcCompliantTruncation()
        + setJdbcCompliantTruncationForReads()
        + setLargeRowSizeThreshold()
        + setLoadBalanceAutoCommitStatementRegex()
        + setLoadBalanceAutoCommitStatementThreshold()
        + setLoadBalanceBlacklistTimeout()
        + setLoadBalanceConnectionGroup()
        + setLoadBalanceEnableJMX()
        + setLoadBalanceExceptionChecker()
        + setLoadBalanceHostRemovalGracePeriod()
        + setLoadBalancePingTimeout()
        + setLoadBalanceSQLExceptionSubclassFailover()
        + setLoadBalanceSQLStateFailover()
        + setLoadBalanceStrategy()
        + setLoadBalanceValidateConnectionOnSwapServer()
        + setLocalSocketAddress()
        + setLocatorFetchBufferSize()
        + setLogSlowQueries()
        + setLogXaCommands()
        + setLogger()
        + setLoggerClassName()
        + setMaintainTimeStats()
        + setMaxQuerySizeToLog()
        + setMaxReconnects()
        + setMaxRows()
        + setMetadataCacheSize()
        + setNetTimeoutForStreamingResults()
        + setNetworkTimeout()
        + setNoAccessToProcedureBodies()
        + setNoDatetimeStringSync()
        + setNoTimezoneConversionForDateType()
        + setNoTimezoneConversionForTimeType()
        + setNullCatalogMeansCurrent()
        + setNullNamePatternMatchesAll()
        + setOverrideSupportsIntegrityEnhancementFacility()
        + setPacketDebugBufferSize()
        + setPadCharsWithSpace()
        + setParanoid()
        + setParseInfoCacheFactory()
        + setPasswordCharacterEncoding()
        + setPedantic()
        + setPinGlobalTxToPhysicalConnection()
        + setPopulateInsertRowWithDefaultValues()
        + setPreferSlaveDuringFailover()
        + setPrepStmtCacheSize()
        + setPrepStmtCacheSqlLimit()
        + setPreparedStatementCacheSize()
        + setPreparedStatementCacheSqlLimit()
        + setProcessEscapeCodesForPrepStmts()
        + setProfileSQL()
        + setProfileSql()
        + setProfilerEventHandler()
        + setProfilerEventHandlerInstance()
        + setPropertiesTransform()
        + setProxy()
        + setQueriesBeforeRetryMaster()
        + setQueryTimeoutKillsConnection()
        + setReadFromMasterWhenNoSlaves()
        + setReadInfoMsgEnabled()
        + setReadOnly()
        + setReadOnlyInternal()
        + setReadOnlyPropagatesToServer()
        + setReconnectAtTxEnd()
        + setRelaxAutoCommit()
        + setReplicationEnableJMX()
        + setReportMetricsIntervalMillis()
        + setRequireSSL()
        + setResourceId()
        + setResultSetSizeThreshold()
        + setRetainStatementAfterResultSetClose()
        + setRetriesAllDown()
        + setRewriteBatchedStatements()
        + setRollbackOnPooledClose()
        + setRoundRobinLoadBalance()
        + setRunningCTS13()
        + setSavepoint()
        + setSavepoint()
        + setSchema()
        + setSecondsBeforeRetryMaster()
        + setSelfDestructOnPingMaxOperations()
        + setSelfDestructOnPingSecondsLifetime()
        + setSendFractionalSeconds()
        + setServerAffinityOrder()
        + setServerConfigCacheFactory()
        + setServerRSAPublicKeyFile()
        + setServerTimezone()
        + setSessionMaxRows()
        + setSessionVariables()
        + setSlowQueryThresholdMillis()
        + setSlowQueryThresholdNanos()
        + setSocketFactory()
        + setSocketFactoryClassName()
        + setSocketTimeout()
        + setSocksProxyHost()
        + setSocksProxyPort()
        + setStatementComment()
        + setStatementInterceptors()
        + setStrictFloatingPoint()
        + setStrictUpdates()
        + setTcpKeepAlive()
        + setTcpNoDelay()
        + setTcpRcvBuf()
        + setTcpSndBuf()
        + setTcpTrafficClass()
        + setTinyInt1isBit()
        + setTraceProtocol()
        + setTransactionIsolation()
        + setTransformedBitIsBoolean()
        + setTreatUtilDateAsTimestamp()
        + setTrustCertificateKeyStorePassword()
        + setTrustCertificateKeyStoreType()
        + setTrustCertificateKeyStoreUrl()
        + setTypeMap()
        + setUltraDevHack()
        + setUseAffectedRows()
        + setUseBlobToStoreUTF8OutsideBMP()
        + setUseColumnNamesInFindColumn()
        + setUseCompression()
        + setUseConfigs()
        + setUseCursorFetch()
        + setUseDirectRowUnpack()
        + setUseDynamicCharsetInfo()
        + setUseFastDateParsing()
        + setUseFastIntParsing()
        + setUseGmtMillisForDatetimes()
        + setUseHostsInPrivileges()
        + setUseInformationSchema()
        + setUseJDBCCompliantTimezoneShift()
        + setUseJvmCharsetConverters()
        + setUseLegacyDatetimeCode()
        + setUseLocalSessionState()
        + setUseLocalTransactionState()
        + setUseNanosForElapsedTime()
        + setUseOldAliasMetadataBehavior()
        + setUseOldUTF8Behavior()
        + setUseOnlyServerErrorMessages()
        + setUseReadAheadInput()
        + setUseSSL()
        + setUseSSPSCompatibleTimezoneShift()
        + setUseServerPrepStmts()
        + setUseServerPreparedStmts()
        + setUseSqlStateCodes()
        + setUseStreamLengthsInPrepStmts()
        + setUseTimezone()
        + setUseUltraDevWorkAround()
        + setUseUnbufferedInput()
        + setUseUnicode()
        + setUseUsageAdvisor()
        + setUtf8OutsideBmpExcludedColumnNamePattern()
        + setUtf8OutsideBmpIncludedColumnNamePattern()
        + setVerifyServerCertificate()
        + setYearIsDateType()
        + setZeroDateTimeBehavior()
        + shutdownServer()
        + storesLowerCaseTableName()
        + supportsIsolationLevel()
        + supportsQuotedIdentifiers()
        + supportsTransactions()
        + throwConnectionClosedException()
        + transactionBegun()
        + transactionCompleted()
        + unSafeStatementInterceptors()
        + unregisterStatement()
        + useAnsiQuotedIdentifiers()
        + useUnbufferedInput()
        + versionMeetsMinimum()
        # getThisAsProxy()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.MySQLConnection {
        {abstract} + createNewIO()
        {abstract} + decachePreparedStatement()
        {abstract} + dumpTestcaseQuery()
        {abstract} + duplicate()
        {abstract} + execSQL()
        {abstract} + execSQL()
        {abstract} + extractSqlFromPacket()
        {abstract} + generateConnectionCommentBlock()
        {abstract} + getActiveMySQLConnection()
        {abstract} + getActiveStatementCount()
        {abstract} + getAutoIncrementIncrement()
        {abstract} + getCachedMetaData()
        {abstract} + getCalendarInstanceForSessionOrNew()
        {abstract} + getCancelTimer()
        {abstract} + getCharacterSetMetadata()
        {abstract} + getCharsetConverter()
        {abstract} + getCharsetNameForIndex()
        {abstract} + getConnectionAttributes()
        {abstract} + getDefaultTimeZone()
        {abstract} + getEncodingForIndex()
        {abstract} + getErrorMessageEncoding()
        {abstract} + getExceptionInterceptor()
        {abstract} + getHost()
        {abstract} + getHostPortPair()
        {abstract} + getIO()
        {abstract} + getId()
        {abstract} + getIdleFor()
        {abstract} + getLoadBalanceSafeProxy()
        {abstract} + getLog()
        {abstract} + getMaxBytesPerChar()
        {abstract} + getMaxBytesPerChar()
        {abstract} + getMetadataSafeStatement()
        {abstract} + getMultiHostSafeProxy()
        {abstract} + getNetBufferLength()
        {abstract} + getProfilerEventHandlerInstance()
        {abstract} + getProperties()
        {abstract} + getQueryTimingUnits()
        {abstract} + getRequiresEscapingEncoder()
        {abstract} + getServerCharset()
        {abstract} + getServerMajorVersion()
        {abstract} + getServerMinorVersion()
        {abstract} + getServerSubMinorVersion()
        {abstract} + getServerTimezoneTZ()
        {abstract} + getServerVariable()
        {abstract} + getServerVersion()
        {abstract} + getSessionLockedCalendar()
        {abstract} + getStatementComment()
        {abstract} + getStatementInterceptorsInstances()
        {abstract} + getURL()
        {abstract} + getUser()
        {abstract} + getUtcCalendar()
        {abstract} + incrementNumberOfPreparedExecutes()
        {abstract} + incrementNumberOfPrepares()
        {abstract} + incrementNumberOfResultSetsCreated()
        {abstract} + initializeResultsMetadataFromCache()
        {abstract} + initializeSafeStatementInterceptors()
        {abstract} + isAbonormallyLongQuery()
        {abstract} + isClientTzUTC()
        {abstract} + isCursorFetchEnabled()
        {abstract} + isProxySet()
        {abstract} + isReadInfoMsgEnabled()
        {abstract} + isReadOnly()
        {abstract} + isReadOnly()
        {abstract} + isRunningOnJDK13()
        {abstract} + isServerTruncatesFracSecs()
        {abstract} + isServerTzUTC()
        {abstract} + lowerCaseTableNames()
        {abstract} + pingInternal()
        {abstract} + realClose()
        {abstract} + recachePreparedStatement()
        {abstract} + registerQueryExecutionTime()
        {abstract} + registerStatement()
        {abstract} + reportNumberOfTablesAccessed()
        {abstract} + serverSupportsConvertFn()
        {abstract} + setProfilerEventHandlerInstance()
        {abstract} + setProxy()
        {abstract} + setReadInfoMsgEnabled()
        {abstract} + setReadOnlyInternal()
        {abstract} + shutdownServer()
        {abstract} + storesLowerCaseTableName()
        {abstract} + throwConnectionClosedException()
        {abstract} + transactionBegun()
        {abstract} + transactionCompleted()
        {abstract} + unSafeStatementInterceptors()
        {abstract} + unregisterStatement()
        {abstract} + useAnsiQuotedIdentifiers()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MysqlCharset {
        + charsetName : String
        + javaEncodingsUc : List<String>
        + major : int
        + mblen : int
        + minor : int
        + priority : int
        + subminor : int
        + MysqlCharset()
        + MysqlCharset()
        + MysqlCharset()
        + toString()
        ~ getMatchingJavaEncoding()
        ~ isOkayForVersion()
        - addEncodingMapping()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MysqlDataTruncation {
        {static} ~ serialVersionUID : long
        - message : String
        - vendorErrorCode : int
        + MysqlDataTruncation()
        + getErrorCode()
        + getMessage()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MysqlDefs {
        {static} + FIELD_TYPE_BLOB : int
        {static} + NO_CHARSET_INFO : int
        {static} ~ COM_BINLOG_DUMP : int
        {static} ~ COM_CHANGE_USER : int
        {static} ~ COM_CLOSE_STATEMENT : int
        {static} ~ COM_CONNECT_OUT : int
        {static} ~ COM_END : int
        {static} ~ COM_EXECUTE : int
        {static} ~ COM_FETCH : int
        {static} ~ COM_LONG_DATA : int
        {static} ~ COM_PREPARE : int
        {static} ~ COM_REGISTER_SLAVE : int
        {static} ~ COM_RESET_STMT : int
        {static} ~ COM_SET_OPTION : int
        {static} ~ COM_TABLE_DUMP : int
        {static} ~ CONNECT : int
        {static} ~ CREATE_DB : int
        {static} ~ DEBUG : int
        {static} ~ DELAYED_INSERT : int
        {static} ~ DROP_DB : int
        {static} ~ FIELD_LIST : int
        {static} ~ FIELD_TYPE_BIT : int
        {static} ~ FIELD_TYPE_DATE : int
        {static} ~ FIELD_TYPE_DATETIME : int
        {static} ~ FIELD_TYPE_DECIMAL : int
        {static} ~ FIELD_TYPE_DOUBLE : int
        {static} ~ FIELD_TYPE_ENUM : int
        {static} ~ FIELD_TYPE_FLOAT : int
        {static} ~ FIELD_TYPE_GEOMETRY : int
        {static} ~ FIELD_TYPE_INT24 : int
        {static} ~ FIELD_TYPE_JSON : int
        {static} ~ FIELD_TYPE_LONG : int
        {static} ~ FIELD_TYPE_LONGLONG : int
        {static} ~ FIELD_TYPE_LONG_BLOB : int
        {static} ~ FIELD_TYPE_MEDIUM_BLOB : int
        {static} ~ FIELD_TYPE_NEWDATE : int
        {static} ~ FIELD_TYPE_NEW_DECIMAL : int
        {static} ~ FIELD_TYPE_NULL : int
        {static} ~ FIELD_TYPE_SET : int
        {static} ~ FIELD_TYPE_SHORT : int
        {static} ~ FIELD_TYPE_STRING : int
        {static} ~ FIELD_TYPE_TIME : int
        {static} ~ FIELD_TYPE_TIMESTAMP : int
        {static} ~ FIELD_TYPE_TINY : int
        {static} ~ FIELD_TYPE_TINY_BLOB : int
        {static} ~ FIELD_TYPE_VARCHAR : int
        {static} ~ FIELD_TYPE_VAR_STRING : int
        {static} ~ FIELD_TYPE_YEAR : int
        {static} ~ INIT_DB : int
        {static} ~ LENGTH_BLOB : long
        {static} ~ LENGTH_LONGBLOB : long
        {static} ~ LENGTH_MEDIUMBLOB : long
        {static} ~ LENGTH_TINYBLOB : long
        {static} ~ MAX_ROWS : int
        {static} ~ OPEN_CURSOR_FLAG : byte
        {static} ~ PING : int
        {static} ~ PROCESS_INFO : int
        {static} ~ PROCESS_KILL : int
        {static} ~ QUERY : int
        {static} ~ QUIT : int
        {static} ~ RELOAD : int
        {static} ~ SHUTDOWN : int
        {static} ~ SLEEP : int
        {static} ~ STATISTICS : int
        {static} ~ TIME : int
        {static} - mysqlToJdbcTypesMap : Map<String, Integer>
        {static} + typeToName()
        {static} ~ appendJdbcTypeMappingQuery()
        {static} ~ mysqlToJavaType()
        {static} ~ mysqlToJavaType()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MysqlErrorNumbers {
        {static} + ERROR_CODE_NULL_LOAD_BALANCED_CONNECTION : int
        {static} + ERROR_CODE_REPLICATION_CONNECTION_WITH_NO_HOSTS : int
        {static} + ER_ABORTING_CONNECTION : int
        {static} + ER_ACCESS_DENIED_CHANGE_USER_ERROR : int
        {static} + ER_ACCESS_DENIED_ERROR : int
        {static} + ER_ACCESS_DENIED_NO_PASSWORD_ERROR : int
        {static} + ER_ADD_PARTITION_NO_NEW_PARTITION : int
        {static} + ER_ADD_PARTITION_SUBPART_ERROR : int
        {static} + ER_ADMIN_WRONG_MRG_TABLE : int
        {static} + ER_AES_INVALID_IV : int
        {static} + ER_ALTER_FILEGROUP_FAILED : int
        {static} + ER_ALTER_INFO : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL : int
        {static} + ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION : int
        {static} + ER_AMBIGUOUS_FIELD_TERM : int
        {static} + ER_AUTOINC_READ_FAILED : int
        {static} + ER_AUTO_CONVERT : int
        {static} + ER_AUTO_INCREMENT_CONFLICT : int
        {static} + ER_AUTO_POSITION_REQUIRES_GTID_MODE_ON : int
        {static} + ER_BAD_DB_ERROR : int
        {static} + ER_BAD_FIELD_ERROR : int
        {static} + ER_BAD_FT_COLUMN : int
        {static} + ER_BAD_HOST_ERROR : int
        {static} + ER_BAD_LOG_STATEMENT : int
        {static} + ER_BAD_NULL_ERROR : int
        {static} + ER_BAD_SLAVE : int
        {static} + ER_BAD_SLAVE_AUTO_POSITION : int
        {static} + ER_BAD_SLAVE_UNTIL_COND : int
        {static} + ER_BAD_TABLE_ERROR : int
        {static} + ER_BASE64_DECODE_ERROR : int
        {static} + ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX : int
        {static} + ER_BINLOG_CREATE_ROUTINE_NEED_SUPER : int
        {static} + ER_BINLOG_LOGGING_IMPOSSIBLE : int
        {static} + ER_BINLOG_LOGICAL_CORRUPTION : int
        {static} + ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE : int
        {static} + ER_BINLOG_PURGE_EMFILE : int
        {static} + ER_BINLOG_PURGE_FATAL_ERR : int
        {static} + ER_BINLOG_PURGE_PROHIBITED : int
        {static} + ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE : int
        {static} + ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE : int
        {static} + ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE : int
        {static} + ER_BINLOG_ROW_INJECTION_AND_STMT_MODE : int
        {static} + ER_BINLOG_ROW_LOGGING_FAILED : int
        {static} + ER_BINLOG_ROW_MODE_AND_STMT_ENGINE : int
        {static} + ER_BINLOG_ROW_RBR_TO_SBR : int
        {static} + ER_BINLOG_ROW_WRONG_TABLE_DEF : int
        {static} + ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX : int
        {static} + ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES : int
        {static} + ER_BINLOG_STMT_MODE_AND_ROW_ENGINE : int
        {static} + ER_BINLOG_UNSAFE_AND_STMT_ENGINE : int
        {static} + ER_BINLOG_UNSAFE_AUTOINC_COLUMNS : int
        {static} + ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST : int
        {static} + ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT : int
        {static} + ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT : int
        {static} + ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC : int
        {static} + ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN : int
        {static} + ER_BINLOG_UNSAFE_INSERT_DELAYED : int
        {static} + ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT : int
        {static} + ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE : int
        {static} + ER_BINLOG_UNSAFE_INSERT_TWO_KEYS : int
        {static} + ER_BINLOG_UNSAFE_LIMIT : int
        {static} + ER_BINLOG_UNSAFE_MIXED_STATEMENT : int
        {static} + ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE : int
        {static} + ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS : int
        {static} + ER_BINLOG_UNSAFE_REPLACE_SELECT : int
        {static} + ER_BINLOG_UNSAFE_ROUTINE : int
        {static} + ER_BINLOG_UNSAFE_STATEMENT : int
        {static} + ER_BINLOG_UNSAFE_SYSTEM_FUNCTION : int
        {static} + ER_BINLOG_UNSAFE_SYSTEM_TABLE : int
        {static} + ER_BINLOG_UNSAFE_SYSTEM_VARIABLE : int
        {static} + ER_BINLOG_UNSAFE_UDF : int
        {static} + ER_BINLOG_UNSAFE_UPDATE_IGNORE : int
        {static} + ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT : int
        {static} + ER_BLOBS_AND_NO_TERMINATED : int
        {static} + ER_BLOB_CANT_HAVE_DEFAULT : int
        {static} + ER_BLOB_FIELD_IN_PART_FUNC_ERROR : int
        {static} + ER_BLOB_KEY_WITHOUT_LENGTH : int
        {static} + ER_BLOB_USED_AS_KEY : int
        {static} + ER_CANNOT_ADD_FOREIGN : int
        {static} + ER_CANNOT_DISCARD_TEMPORARY_TABLE : int
        {static} + ER_CANNOT_LOAD_FROM_TABLE : int
        {static} + ER_CANNOT_LOAD_FROM_TABLE_V2 : int
        {static} + ER_CANNOT_USER : int
        {static} + ER_CANT_ACTIVATE_LOG : int
        {static} + ER_CANT_AGGREGATE_2COLLATIONS : int
        {static} + ER_CANT_AGGREGATE_3COLLATIONS : int
        {static} + ER_CANT_AGGREGATE_NCOLLATIONS : int
        {static} + ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION_WHEN_GTID_NEXT_LIST_IS_NULL : int
        {static} + ER_CANT_CHANGE_TX_ISOLATION : int
        {static} + ER_CANT_CREATE_DB : int
        {static} + ER_CANT_CREATE_FEDERATED_TABLE : int
        {static} + ER_CANT_CREATE_FILE : int
        {static} + ER_CANT_CREATE_GEOMETRY_OBJECT : int
        {static} + ER_CANT_CREATE_HANDLER_FILE : int
        {static} + ER_CANT_CREATE_SROUTINE : int
        {static} + ER_CANT_CREATE_TABLE : int
        {static} + ER_CANT_CREATE_THREAD : int
        {static} + ER_CANT_CREATE_USER_WITH_GRANT : int
        {static} + ER_CANT_DELETE_FILE : int
        {static} + ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET : int
        {static} + ER_CANT_DO_THIS_DURING_AN_TRANSACTION : int
        {static} + ER_CANT_DROP_FIELD_OR_KEY : int
        {static} + ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION : int
        {static} + ER_CANT_FIND_DL_ENTRY : int
        {static} + ER_CANT_FIND_SYSTEM_REC : int
        {static} + ER_CANT_FIND_UDF : int
        {static} + ER_CANT_GET_STAT : int
        {static} + ER_CANT_GET_WD : int
        {static} + ER_CANT_INITIALIZE_UDF : int
        {static} + ER_CANT_LOCK : int
        {static} + ER_CANT_LOCK_LOG_TABLE : int
        {static} + ER_CANT_OPEN_FILE : int
        {static} + ER_CANT_OPEN_LIBRARY : int
        {static} + ER_CANT_READ_DIR : int
        {static} + ER_CANT_REMOVE_ALL_FIELDS : int
        {static} + ER_CANT_RENAME_LOG_TABLE : int
        {static} + ER_CANT_REOPEN_TABLE : int
        {static} + ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF : int
        {static} + ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON : int
        {static} + ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF : int
        {static} + ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID : int
        {static} + ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY : int
        {static} + ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF : int
        {static} + ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY : int
        {static} + ER_CANT_SET_WD : int
        {static} + ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT : int
        {static} + ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG : int
        {static} + ER_CANT_UPDATE_WITH_READLOCK : int
        {static} + ER_CANT_USE_OPTION_HERE : int
        {static} + ER_CANT_WRITE_LOCK_LOG_TABLE : int
        {static} + ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE : int
        {static} + ER_CHECKREAD : int
        {static} + ER_CHECK_NOT_IMPLEMENTED : int
        {static} + ER_CHECK_NO_SUCH_TABLE : int
        {static} + ER_COALESCE_ONLY_ON_HASH_PARTITION : int
        {static} + ER_COALESCE_PARTITION_NO_PARTITION : int
        {static} + ER_COLLATION_CHARSET_MISMATCH : int
        {static} + ER_COLUMNACCESS_DENIED_ERROR : int
        {static} + ER_COL_COUNT_DOESNT_MATCH_CORRUPTED : int
        {static} + ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2 : int
        {static} + ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE : int
        {static} + ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2 : int
        {static} + ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG : int
        {static} + ER_COND_ITEM_TOO_LONG : int
        {static} + ER_CONFLICTING_DECLARATIONS : int
        {static} + ER_CONFLICT_FN_PARSE_ERROR : int
        {static} + ER_CONNECT_TO_FOREIGN_DATA_SOURCE : int
        {static} + ER_CONNECT_TO_MASTER : int
        {static} + ER_CONSECUTIVE_REORG_PARTITIONS : int
        {static} + ER_CON_COUNT_ERROR : int
        {static} + ER_CORRUPT_HELP_DB : int
        {static} + ER_CRASHED_ON_REPAIR : int
        {static} + ER_CRASHED_ON_USAGE : int
        {static} + ER_CREATE_DB_WITH_READ_LOCK : int
        {static} + ER_CREATE_FILEGROUP_FAILED : int
        {static} + ER_CUT_VALUE_GROUP_CONCAT : int
        {static} + ER_CYCLIC_REFERENCE : int
        {static} + ER_DATABASE_NAME : int
        {static} + ER_DATA_OUT_OF_RANGE : int
        {static} + ER_DATA_TOO_LONG : int
        {static} + ER_DATETIME_FUNCTION_OVERFLOW : int
        {static} + ER_DA_INVALID_CONDITION_NUMBER : int
        {static} + ER_DBACCESS_DENIED_ERROR : int
        {static} + ER_DB_CREATE_EXISTS : int
        {static} + ER_DB_DROP_DELETE : int
        {static} + ER_DB_DROP_EXISTS : int
        {static} + ER_DB_DROP_RMDIR : int
        {static} + ER_DDL_LOG_ERROR : int
        {static} + ER_DEBUG_SYNC_HIT_LIMIT : int
        {static} + ER_DEBUG_SYNC_TIMEOUT : int
        {static} + ER_DELAYED_CANT_CHANGE_LOCK : int
        {static} + ER_DELAYED_INSERT_TABLE_LOCKED : int
        {static} + ER_DELAYED_NOT_SUPPORTED : int
        {static} + ER_DERIVED_MUST_HAVE_ALIAS : int
        {static} + ER_DIFF_GROUPS_PROC : int
        {static} + ER_DISCARD_FK_CHECKS_RUNNING : int
        {static} + ER_DISK_FULL : int
        {static} + ER_DIVISION_BY_ZERO : int
        {static} + ER_DROP_DB_WITH_READ_LOCK : int
        {static} + ER_DROP_FILEGROUP_FAILED : int
        {static} + ER_DROP_INDEX_FK : int
        {static} + ER_DROP_LAST_PARTITION : int
        {static} + ER_DROP_PARTITION_NON_EXISTENT : int
        {static} + ER_DROP_USER : int
        {static} + ER_DUMP_NOT_IMPLEMENTED : int
        {static} + ER_DUPLICATED_VALUE_IN_TYPE : int
        {static} + ER_DUP_ARGUMENT : int
        {static} + ER_DUP_ENTRY : int
        {static} + ER_DUP_ENTRY_AUTOINCREMENT_CASE : int
        {static} + ER_DUP_ENTRY_WITH_KEY_NAME : int
        {static} + ER_DUP_FIELDNAME : int
        {static} + ER_DUP_INDEX : int
        {static} + ER_DUP_KEY : int
        {static} + ER_DUP_KEYNAME : int
        {static} + ER_DUP_LIST_ENTRY : int
        {static} + ER_DUP_SIGNAL_SET : int
        {static} + ER_DUP_UNIQUE : int
        {static} + ER_DUP_UNKNOWN_IN_INDEX : int
        {static} + ER_EMPTY_QUERY : int
        {static} + ER_ENGINE_OUT_OF_MEMORY : int
        {static} + ER_ERROR_DURING_CHECKPOINT : int
        {static} + ER_ERROR_DURING_COMMIT : int
        {static} + ER_ERROR_DURING_FLUSH_LOGS : int
        {static} + ER_ERROR_DURING_ROLLBACK : int
        {static} + ER_ERROR_IN_TRIGGER_BODY : int
        {static} + ER_ERROR_IN_UNKNOWN_TRIGGER_BODY : int
        {static} + ER_ERROR_MESSAGES : int
        {static} + ER_ERROR_ON_CLOSE : int
        {static} + ER_ERROR_ON_MASTER : int
        {static} + ER_ERROR_ON_READ : int
        {static} + ER_ERROR_ON_RENAME : int
        {static} + ER_ERROR_ON_WRITE : int
        {static} + ER_ERROR_WHEN_EXECUTING_COMMAND : int
        {static} + ER_EVENTS_DB_ERROR : int
        {static} + ER_EVENT_ALREADY_EXISTS : int
        {static} + ER_EVENT_CANNOT_ALTER_IN_THE_PAST : int
        {static} + ER_EVENT_CANNOT_CREATE_IN_THE_PAST : int
        {static} + ER_EVENT_CANNOT_DELETE : int
        {static} + ER_EVENT_CANT_ALTER : int
        {static} + ER_EVENT_COMPILE_ERROR : int
        {static} + ER_EVENT_DATA_TOO_LONG : int
        {static} + ER_EVENT_DOES_NOT_EXIST : int
        {static} + ER_EVENT_DROP_FAILED : int
        {static} + ER_EVENT_ENDS_BEFORE_STARTS : int
        {static} + ER_EVENT_EXEC_TIME_IN_THE_PAST : int
        {static} + ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG : int
        {static} + ER_EVENT_INVALID_CREATION_CTX : int
        {static} + ER_EVENT_MODIFY_QUEUE_ERROR : int
        {static} + ER_EVENT_NEITHER_M_EXPR_NOR_M_AT : int
        {static} + ER_EVENT_OPEN_TABLE_FAILED : int
        {static} + ER_EVENT_RECURSION_FORBIDDEN : int
        {static} + ER_EVENT_SAME_NAME : int
        {static} + ER_EVENT_SET_VAR_ERROR : int
        {static} + ER_EVENT_STORE_FAILED : int
        {static} + ER_EXCEPTIONS_WRITE_ERROR : int
        {static} + ER_EXEC_STMT_WITH_OPEN_CURSOR : int
        {static} + ER_EXPLAIN_NOT_SUPPORTED : int
        {static} + ER_FAILED_READ_FROM_PAR_FILE : int
        {static} + ER_FAILED_ROUTINE_BREAK_BINLOG : int
        {static} + ER_FEATURE_DISABLED : int
        {static} + ER_FIELD_NOT_FOUND_PART_ERROR : int
        {static} + ER_FIELD_SPECIFIED_TWICE : int
        {static} + ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD : int
        {static} + ER_FILEGROUP_OPTION_ONLY_ONCE : int
        {static} + ER_FILE_CORRUPT : int
        {static} + ER_FILE_EXISTS_ERROR : int
        {static} + ER_FILE_NOT_FOUND : int
        {static} + ER_FILE_USED : int
        {static} + ER_FILSORT_ABORT : int
        {static} + ER_FK_CANNOT_DELETE_PARENT : int
        {static} + ER_FK_CANNOT_OPEN_PARENT : int
        {static} + ER_FK_COLUMN_CANNOT_CHANGE : int
        {static} + ER_FK_COLUMN_CANNOT_CHANGE_CHILD : int
        {static} + ER_FK_COLUMN_CANNOT_DROP : int
        {static} + ER_FK_COLUMN_CANNOT_DROP_CHILD : int
        {static} + ER_FK_COLUMN_NOT_NULL : int
        {static} + ER_FK_DEPTH_EXCEEDED : int
        {static} + ER_FK_DUP_NAME : int
        {static} + ER_FK_FAIL_ADD_SYSTEM : int
        {static} + ER_FK_INCORRECT_OPTION : int
        {static} + ER_FK_NO_INDEX_CHILD : int
        {static} + ER_FK_NO_INDEX_PARENT : int
        {static} + ER_FLUSH_MASTER_BINLOG_CLOSED : int
        {static} + ER_FORBID_SCHEMA_CHANGE : int
        {static} + ER_FORCING_CLOSE : int
        {static} + ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST : int
        {static} + ER_FOREIGN_DATA_STRING_INVALID : int
        {static} + ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE : int
        {static} + ER_FOREIGN_DUPLICATE_KEY : int
        {static} + ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO : int
        {static} + ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO : int
        {static} + ER_FOREIGN_KEY_ON_PARTITIONED : int
        {static} + ER_FOREIGN_SERVER_DOESNT_EXIST : int
        {static} + ER_FOREIGN_SERVER_EXISTS : int
        {static} + ER_FORM_NOT_FOUND : int
        {static} + ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF : int
        {static} + ER_FPARSER_BAD_HEADER : int
        {static} + ER_FPARSER_EOF_IN_COMMENT : int
        {static} + ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER : int
        {static} + ER_FPARSER_ERROR_IN_PARAMETER : int
        {static} + ER_FPARSER_TOO_BIG_FILE : int
        {static} + ER_FRM_UNKNOWN_TYPE : int
        {static} + ER_FSEEK_FAIL : int
        {static} + ER_FT_MATCHING_KEY_NOT_FOUND : int
        {static} + ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING : int
        {static} + ER_FUNCTION_NOT_DEFINED : int
        {static} + ER_FUNC_INEXISTENT_NAME_COLLISION : int
        {static} + ER_GET_ERRMSG : int
        {static} + ER_GET_ERRNO : int
        {static} + ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER : int
        {static} + ER_GET_TEMPORARY_ERRMSG : int
        {static} + ER_GLOBAL_VARIABLE : int
        {static} + ER_GNO_EXHAUSTED : int
        {static} + ER_GOT_SIGNAL : int
        {static} + ER_GRANT_PLUGIN_USER_EXISTS : int
        {static} + ER_GRANT_WRONG_HOST_OR_USER : int
        {static} + ER_GTID_EXECUTED_WAS_CHANGED : int
        {static} + ER_GTID_MODE_2_OR_3_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON : int
        {static} + ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME : int
        {static} + ER_GTID_MODE_REQUIRES_BINLOG : int
        {static} + ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL : int
        {static} + ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST : int
        {static} + ER_GTID_NEXT_TYPE_UNDEFINED_GROUP : int
        {static} + ER_GTID_PURGED_WAS_CHANGED : int
        {static} + ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION : int
        {static} + ER_GTID_UNSAFE_CREATE_SELECT : int
        {static} + ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE : int
        {static} + ER_HANDSHAKE_ERROR : int
        {static} + ER_HASHCHK : int
        {static} + ER_HOSTNAME : int
        {static} + ER_HOST_IS_BLOCKED : int
        {static} + ER_HOST_NOT_PRIVILEGED : int
        {static} + ER_IDENT_CAUSES_TOO_LONG_PATH : int
        {static} + ER_ILLEGAL_GRANT_FOR_TABLE : int
        {static} + ER_ILLEGAL_HA : int
        {static} + ER_ILLEGAL_HA_CREATE_OPTION : int
        {static} + ER_ILLEGAL_REFERENCE : int
        {static} + ER_ILLEGAL_VALUE_FOR_TYPE : int
        {static} + ER_INCONSISTENT_ERROR : int
        {static} + ER_INCONSISTENT_PARTITION_INFO_ERROR : int
        {static} + ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR : int
        {static} + ER_INCORRECT_GLOBAL_LOCAL_VAR : int
        {static} + ER_INDEX_COLUMN_TOO_LONG : int
        {static} + ER_INDEX_CORRUPT : int
        {static} + ER_INDEX_REBUILD : int
        {static} + ER_INNODB_FORCED_RECOVERY : int
        {static} + ER_INNODB_FT_AUX_NOT_HEX_ID : int
        {static} + ER_INNODB_FT_LIMIT : int
        {static} + ER_INNODB_FT_WRONG_DOCID_COLUMN : int
        {static} + ER_INNODB_FT_WRONG_DOCID_INDEX : int
        {static} + ER_INNODB_IMPORT_ERROR : int
        {static} + ER_INNODB_INDEX_CORRUPT : int
        {static} + ER_INNODB_NO_FT_TEMP_TABLE : int
        {static} + ER_INNODB_NO_FT_USES_PARSER : int
        {static} + ER_INNODB_ONLINE_LOG_TOO_BIG : int
        {static} + ER_INNODB_READ_ONLY : int
        {static} + ER_INNODB_UNDO_LOG_FULL : int
        {static} + ER_INSECURE_CHANGE_MASTER : int
        {static} + ER_INSECURE_PLAIN_TEXT : int
        {static} + ER_INSERT_INFO : int
        {static} + ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT : int
        {static} + ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT : int
        {static} + ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN : int
        {static} + ER_INTERNAL_ERROR : int
        {static} + ER_INVALID_ARGUMENT_FOR_LOGARITHM : int
        {static} + ER_INVALID_CHARACTER_STRING : int
        {static} + ER_INVALID_DEFAULT : int
        {static} + ER_INVALID_FIELD_SIZE : int
        {static} + ER_INVALID_GROUP_FUNC_USE : int
        {static} + ER_INVALID_ON_UPDATE : int
        {static} + ER_INVALID_USE_OF_NULL : int
        {static} + ER_INVALID_YEAR_COLUMN_LENGTH : int
        {static} + ER_IO_ERR_LOG_INDEX_READ : int
        {static} + ER_IO_READ_ERROR : int
        {static} + ER_IO_WRITE_ERROR : int
        {static} + ER_IPSOCK_ERROR : int
        {static} + ER_KEY_COLUMN_DOES_NOT_EXITS : int
        {static} + ER_KEY_DOES_NOT_EXITS : int
        {static} + ER_KEY_NOT_FOUND : int
        {static} + ER_KEY_PART_0 : int
        {static} + ER_KEY_REF_DO_NOT_MATCH_TABLE_REF : int
        {static} + ER_KILL_DENIED_ERROR : int
        {static} + ER_LIMITED_PART_RANGE : int
        {static} + ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR : int
        {static} + ER_LOAD_DATA_INVALID_COLUMN : int
        {static} + ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR : int
        {static} + ER_LOAD_INFO : int
        {static} + ER_LOCAL_VARIABLE : int
        {static} + ER_LOCK_ABORTED : int
        {static} + ER_LOCK_DEADLOCK : int
        {static} + ER_LOCK_OR_ACTIVE_TRANSACTION : int
        {static} + ER_LOCK_TABLE_FULL : int
        {static} + ER_LOCK_WAIT_TIMEOUT : int
        {static} + ER_LOGGING_PROHIBIT_CHANGING_OF : int
        {static} + ER_LOG_IN_USE : int
        {static} + ER_LOG_PURGE_NO_FILE : int
        {static} + ER_LOG_PURGE_UNKNOWN_ERR : int
        {static} + ER_MALFORMED_DEFINER : int
        {static} + ER_MALFORMED_GTID_SET_ENCODING : int
        {static} + ER_MALFORMED_GTID_SET_SPECIFICATION : int
        {static} + ER_MALFORMED_GTID_SPECIFICATION : int
        {static} + ER_MALFORMED_PACKET : int
        {static} + ER_MASTER : int
        {static} + ER_MASTER_DELAY_VALUE_OUT_OF_RANGE : int
        {static} + ER_MASTER_FATAL_ERROR_READING_BINLOG : int
        {static} + ER_MASTER_HAS_PURGED_REQUIRED_GTIDS : int
        {static} + ER_MASTER_INFO : int
        {static} + ER_MASTER_NET_READ : int
        {static} + ER_MASTER_NET_WRITE : int
        {static} + ER_MAXVALUE_IN_VALUES_IN : int
        {static} + ER_MAX_PREPARED_STMT_COUNT_REACHED : int
        {static} + ER_MESSAGE_AND_STATEMENT : int
        {static} + ER_MISSING_HA_CREATE_OPTION : int
        {static} + ER_MISSING_SKIP_SLAVE : int
        {static} + ER_MIXING_NOT_ALLOWED : int
        {static} + ER_MIX_HANDLER_ERROR : int
        {static} + ER_MIX_OF_GROUP_FUNC_AND_FIELDS : int
        {static} + ER_MTS_CANT_PARALLEL : int
        {static} + ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS : int
        {static} + ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX : int
        {static} + ER_MTS_FEATURE_IS_NOT_SUPPORTED : int
        {static} + ER_MTS_INCONSISTENT_DATA : int
        {static} + ER_MTS_RECOVERY_FAILURE : int
        {static} + ER_MTS_RESET_WORKERS : int
        {static} + ER_MTS_UPDATED_DBS_GREATER_MAX : int
        {static} + ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR : int
        {static} + ER_MULTIPLE_PRI_KEY : int
        {static} + ER_MULTI_UPDATE_KEY_CONFLICT : int
        {static} + ER_MUST_CHANGE_PASSWORD : int
        {static} + ER_MUST_CHANGE_PASSWORD_LOGIN : int
        {static} + ER_M_BIGGER_THAN_D : int
        {static} + ER_NAME_BECOMES_EMPTY : int
        {static} + ER_NATIVE_FCT_NAME_COLLISION : int
        {static} + ER_NDB_CANT_SWITCH_BINLOG_FORMAT : int
        {static} + ER_NDB_REPLICATION_SCHEMA_ERROR : int
        {static} + ER_NEED_REPREPARE : int
        {static} + ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE : int
        {static} + ER_NET_ERROR_ON_WRITE : int
        {static} + ER_NET_FCNTL_ERROR : int
        {static} + ER_NET_PACKETS_OUT_OF_ORDER : int
        {static} + ER_NET_PACKET_TOO_LARGE : int
        {static} + ER_NET_READ_ERROR : int
        {static} + ER_NET_READ_ERROR_FROM_PIPE : int
        {static} + ER_NET_READ_INTERRUPTED : int
        {static} + ER_NET_UNCOMPRESS_ERROR : int
        {static} + ER_NET_WRITE_INTERRUPTED : int
        {static} + ER_NEVER_USED : int
        {static} + ER_NEW_ABORTING_CONNECTION : int
        {static} + ER_NISAMCHK : int
        {static} + ER_NO : int
        {static} + ER_NONEXISTING_GRANT : int
        {static} + ER_NONEXISTING_PROC_GRANT : int
        {static} + ER_NONEXISTING_TABLE_GRANT : int
        {static} + ER_NONUNIQ_TABLE : int
        {static} + ER_NONUPDATEABLE_COLUMN : int
        {static} + ER_NON_GROUPING_FIELD_USED : int
        {static} + ER_NON_INSERTABLE_TABLE : int
        {static} + ER_NON_RO_SELECT_DISABLE_TIMER : int
        {static} + ER_NON_UNIQ_ERROR : int
        {static} + ER_NON_UPDATABLE_TABLE : int
        {static} + ER_NORMAL_SHUTDOWN : int
        {static} + ER_NOT_ALLOWED_COMMAND : int
        {static} + ER_NOT_FORM_FILE : int
        {static} + ER_NOT_KEYFILE : int
        {static} + ER_NOT_SUPPORTED_AUTH_MODE : int
        {static} + ER_NOT_SUPPORTED_YET : int
        {static} + ER_NOT_VALID_PASSWORD : int
        {static} + ER_NO_BINARY_LOGGING : int
        {static} + ER_NO_BINLOG_ERROR : int
        {static} + ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR : int
        {static} + ER_NO_DB_ERROR : int
        {static} + ER_NO_DEFAULT : int
        {static} + ER_NO_DEFAULT_FOR_FIELD : int
        {static} + ER_NO_DEFAULT_FOR_VIEW_FIELD : int
        {static} + ER_NO_FILE_MAPPING : int
        {static} + ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT : int
        {static} + ER_NO_FT_MATERIALIZED_SUBQUERY : int
        {static} + ER_NO_GROUP_FOR_PROC : int
        {static} + ER_NO_PARTITION_FOR_GIVEN_VALUE : int
        {static} + ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT : int
        {static} + ER_NO_PARTS_ERROR : int
        {static} + ER_NO_PERMISSION_TO_CREATE_USER : int
        {static} + ER_NO_RAID_COMPILED : int
        {static} + ER_NO_REFERENCED_ROW : int
        {static} + ER_NO_REFERENCED_ROW_2 : int
        {static} + ER_NO_SUCH_INDEX : int
        {static} + ER_NO_SUCH_KEY_VALUE : int
        {static} + ER_NO_SUCH_PARTITION__UNUSED : int
        {static} + ER_NO_SUCH_TABLE : int
        {static} + ER_NO_SUCH_THREAD : int
        {static} + ER_NO_SUCH_USER : int
        {static} + ER_NO_TABLES_USED : int
        {static} + ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA : int
        {static} + ER_NO_UNIQUE_LOGFILE : int
        {static} + ER_NULL_COLUMN_IN_INDEX : int
        {static} + ER_NULL_IN_VALUES_LESS_THAN : int
        {static} + ER_OLD_FILE_FORMAT : int
        {static} + ER_OLD_KEYFILE : int
        {static} + ER_OLD_TEMPORALS_UPGRADED : int
        {static} + ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT : int
        {static} + ER_ONLY_INTEGERS_ALLOWED : int
        {static} + ER_ONLY_ON_RANGE_LIST_PARTITION : int
        {static} + ER_OPEN_AS_READONLY : int
        {static} + ER_OPERAND_COLUMNS : int
        {static} + ER_OPTION_PREVENTS_STATEMENT : int
        {static} + ER_ORDER_WITH_PROC : int
        {static} + ER_OUTOFMEMORY : int
        {static} + ER_OUT_OF_RESOURCES : int
        {static} + ER_OUT_OF_SORTMEMORY : int
        {static} + ER_PARSE_ERROR : int
        {static} + ER_PARTITIONS_MUST_BE_DEFINED_ERROR : int
        {static} + ER_PARTITION_CLAUSE_ON_NONPARTITIONED : int
        {static} + ER_PARTITION_COLUMN_LIST_ERROR : int
        {static} + ER_PARTITION_CONST_DOMAIN_ERROR : int
        {static} + ER_PARTITION_ENTRY_ERROR : int
        {static} + ER_PARTITION_EXCHANGE_DIFFERENT_OPTION : int
        {static} + ER_PARTITION_EXCHANGE_FOREIGN_KEY : int
        {static} + ER_PARTITION_EXCHANGE_PART_TABLE : int
        {static} + ER_PARTITION_EXCHANGE_TEMP_TABLE : int
        {static} + ER_PARTITION_FIELDS_TOO_LONG : int
        {static} + ER_PARTITION_FUNCTION_FAILURE : int
        {static} + ER_PARTITION_FUNCTION_IS_NOT_ALLOWED : int
        {static} + ER_PARTITION_FUNC_NOT_ALLOWED_ERROR : int
        {static} + ER_PARTITION_INSTEAD_OF_SUBPARTITION : int
        {static} + ER_PARTITION_MAXVALUE_ERROR : int
        {static} + ER_PARTITION_MERGE_ERROR : int
        {static} + ER_PARTITION_MGMT_ON_NONPARTITIONED : int
        {static} + ER_PARTITION_NAME : int
        {static} + ER_PARTITION_NOT_DEFINED_ERROR : int
        {static} + ER_PARTITION_NO_TEMPORARY : int
        {static} + ER_PARTITION_REQUIRES_VALUES_ERROR : int
        {static} + ER_PARTITION_SUBPARTITION_ERROR : int
        {static} + ER_PARTITION_SUBPART_MIX_ERROR : int
        {static} + ER_PARTITION_WRONG_NO_PART_ERROR : int
        {static} + ER_PARTITION_WRONG_NO_SUBPART_ERROR : int
        {static} + ER_PARTITION_WRONG_VALUES_ERROR : int
        {static} + ER_PART_STATE_ERROR : int
        {static} + ER_PASSWD_LENGTH : int
        {static} + ER_PASSWORD_ANONYMOUS_USER : int
        {static} + ER_PASSWORD_EXPIRE_ANONYMOUS_USER : int
        {static} + ER_PASSWORD_FORMAT : int
        {static} + ER_PASSWORD_NOT_ALLOWED : int
        {static} + ER_PASSWORD_NO_MATCH : int
        {static} + ER_PATH_LENGTH : int
        {static} + ER_PLUGIN_IS_NOT_LOADED : int
        {static} + ER_PLUGIN_IS_PERMANENT : int
        {static} + ER_PLUGIN_NO_INSTALL : int
        {static} + ER_PLUGIN_NO_UNINSTALL : int
        {static} + ER_PRIMARY_CANT_HAVE_NULL : int
        {static} + ER_PROCACCESS_DENIED_ERROR : int
        {static} + ER_PROC_AUTO_GRANT_FAIL : int
        {static} + ER_PROC_AUTO_REVOKE_FAIL : int
        {static} + ER_PS_MANY_PARAM : int
        {static} + ER_PS_NO_RECURSION : int
        {static} + ER_QUERY_CACHE_DISABLED : int
        {static} + ER_QUERY_INTERRUPTED : int
        {static} + ER_QUERY_ON_FOREIGN_DATA_SOURCE : int
        {static} + ER_QUERY_ON_MASTER : int
        {static} + ER_QUERY_TIMEOUT : int
        {static} + ER_RANGE_NOT_INCREASING_ERROR : int
        {static} + ER_RBR_NOT_AVAILABLE : int
        {static} + ER_READY : int
        {static} + ER_READ_ONLY_MODE : int
        {static} + ER_READ_ONLY_TRANSACTION : int
        {static} + ER_RECORD_FILE_FULL : int
        {static} + ER_REFERENCED_TRG_DOES_NOT_EXIST : int
        {static} + ER_REGEXP_ERROR : int
        {static} + ER_RELAY_LOG_FAIL : int
        {static} + ER_RELAY_LOG_INIT : int
        {static} + ER_REMOVED_SPACES : int
        {static} + ER_RENAMED_NAME : int
        {static} + ER_REORG_HASH_ONLY_ON_SAME_NO : int
        {static} + ER_REORG_NO_PARAM_ERROR : int
        {static} + ER_REORG_OUTSIDE_RANGE : int
        {static} + ER_REORG_PARTITION_NOT_EXIST : int
        {static} + ER_REQUIRES_PRIMARY_KEY : int
        {static} + ER_RESERVED_SYNTAX : int
        {static} + ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER : int
        {static} + ER_REVOKE_GRANTS : int
        {static} + ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET : int
        {static} + ER_ROW_DOES_NOT_MATCH_PARTITION : int
        {static} + ER_ROW_IN_WRONG_PARTITION : int
        {static} + ER_ROW_IS_REFERENCED : int
        {static} + ER_ROW_IS_REFERENCED_2 : int
        {static} + ER_ROW_SINGLE_PARTITION_FIELD_ERROR : int
        {static} + ER_RPL_INFO_DATA_TOO_LONG : int
        {static} + ER_SAME_NAME_PARTITION : int
        {static} + ER_SAME_NAME_PARTITION_FIELD : int
        {static} + ER_SELECT_REDUCED : int
        {static} + ER_SERVER_IS_IN_SECURE_AUTH_MODE : int
        {static} + ER_SERVER_SHUTDOWN : int
        {static} + ER_SET_CONSTANTS_ONLY : int
        {static} + ER_SET_PASSWORD_AUTH_PLUGIN : int
        {static} + ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION : int
        {static} + ER_SHUTDOWN_COMPLETE : int
        {static} + ER_SIGNAL_BAD_CONDITION_TYPE : int
        {static} + ER_SIGNAL_EXCEPTION : int
        {static} + ER_SIGNAL_NOT_FOUND : int
        {static} + ER_SIGNAL_WARN : int
        {static} + ER_SIZE_OVERFLOW_ERROR : int
        {static} + ER_SKIPPING_LOGGED_TRANSACTION : int
        {static} + ER_SLAVE_CANT_CREATE_CONVERSION : int
        {static} + ER_SLAVE_CONFIGURATION : int
        {static} + ER_SLAVE_CONVERSION_FAILED : int
        {static} + ER_SLAVE_CORRUPT_EVENT : int
        {static} + ER_SLAVE_CREATE_EVENT_FAILURE : int
        {static} + ER_SLAVE_FATAL_ERROR : int
        {static} + ER_SLAVE_HEARTBEAT_FAILURE : int
        {static} + ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE : int
        {static} + ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX : int
        {static} + ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN : int
        {static} + ER_SLAVE_IGNORED_SSL_PARAMS : int
        {static} + ER_SLAVE_IGNORED_TABLE : int
        {static} + ER_SLAVE_IGNORE_SERVER_IDS : int
        {static} + ER_SLAVE_INCIDENT : int
        {static} + ER_SLAVE_IO_THREAD_MUST_STOP : int
        {static} + ER_SLAVE_MASTER_COM_FAILURE : int
        {static} + ER_SLAVE_MI_INIT_REPOSITORY : int
        {static} + ER_SLAVE_MUST_STOP : int
        {static} + ER_SLAVE_NOT_RUNNING : int
        {static} + ER_SLAVE_RELAY_LOG_READ_FAILURE : int
        {static} + ER_SLAVE_RELAY_LOG_WRITE_FAILURE : int
        {static} + ER_SLAVE_RLI_INIT_REPOSITORY : int
        {static} + ER_SLAVE_SILENT_RETRY_TRANSACTION : int
        {static} + ER_SLAVE_SQL_THREAD_MUST_STOP : int
        {static} + ER_SLAVE_THREAD : int
        {static} + ER_SLAVE_WAS_NOT_RUNNING : int
        {static} + ER_SLAVE_WAS_RUNNING : int
        {static} + ER_SPATIAL_CANT_HAVE_NULL : int
        {static} + ER_SPATIAL_MUST_HAVE_GEOM_COL : int
        {static} + ER_SPECIFIC_ACCESS_DENIED_ERROR : int
        {static} + ER_SP_ALREADY_EXISTS : int
        {static} + ER_SP_BADRETURN : int
        {static} + ER_SP_BADSELECT : int
        {static} + ER_SP_BADSTATEMENT : int
        {static} + ER_SP_BAD_CURSOR_QUERY : int
        {static} + ER_SP_BAD_CURSOR_SELECT : int
        {static} + ER_SP_BAD_SQLSTATE : int
        {static} + ER_SP_BAD_VAR_SHADOW : int
        {static} + ER_SP_CANT_ALTER : int
        {static} + ER_SP_CANT_SET_AUTOCOMMIT : int
        {static} + ER_SP_CASE_NOT_FOUND : int
        {static} + ER_SP_COND_MISMATCH : int
        {static} + ER_SP_CURSOR_AFTER_HANDLER : int
        {static} + ER_SP_CURSOR_ALREADY_OPEN : int
        {static} + ER_SP_CURSOR_MISMATCH : int
        {static} + ER_SP_CURSOR_NOT_OPEN : int
        {static} + ER_SP_DOES_NOT_EXIST : int
        {static} + ER_SP_DROP_FAILED : int
        {static} + ER_SP_DUP_COND : int
        {static} + ER_SP_DUP_CURS : int
        {static} + ER_SP_DUP_HANDLER : int
        {static} + ER_SP_DUP_PARAM : int
        {static} + ER_SP_DUP_VAR : int
        {static} + ER_SP_FETCH_NO_DATA : int
        {static} + ER_SP_GOTO_IN_HNDLR : int
        {static} + ER_SP_LABEL_MISMATCH : int
        {static} + ER_SP_LABEL_REDEFINE : int
        {static} + ER_SP_LILABEL_MISMATCH : int
        {static} + ER_SP_NORETURN : int
        {static} + ER_SP_NORETURNEND : int
        {static} + ER_SP_NOT_VAR_ARG : int
        {static} + ER_SP_NO_AGGREGATE : int
        {static} + ER_SP_NO_DROP_SP : int
        {static} + ER_SP_NO_RECURSION : int
        {static} + ER_SP_NO_RECURSIVE_CREATE : int
        {static} + ER_SP_NO_RETSET : int
        {static} + ER_SP_PROC_TABLE_CORRUPT : int
        {static} + ER_SP_RECURSION_LIMIT : int
        {static} + ER_SP_STORE_FAILED : int
        {static} + ER_SP_SUBSELECT_NYI : int
        {static} + ER_SP_UNDECLARED_VAR : int
        {static} + ER_SP_UNINIT_VAR : int
        {static} + ER_SP_VARCOND_AFTER_CURSHNDLR : int
        {static} + ER_SP_WRONG_NAME : int
        {static} + ER_SP_WRONG_NO_OF_ARGS : int
        {static} + ER_SP_WRONG_NO_OF_FETCH_ARGS : int
        {static} + ER_SQLTHREAD_WITH_SECURE_SLAVE : int
        {static} + ER_SQL_MODE_NO_EFFECT : int
        {static} + ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE : int
        {static} + ER_SR_INVALID_CREATION_CTX : int
        {static} + ER_STACK_OVERRUN : int
        {static} + ER_STACK_OVERRUN_NEED_MORE : int
        {static} + ER_STARTUP : int
        {static} + ER_STMT_CACHE_FULL : int
        {static} + ER_STMT_HAS_NO_OPEN_CURSOR : int
        {static} + ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG : int
        {static} + ER_STOP_SLAVE_IO_THREAD_TIMEOUT : int
        {static} + ER_STOP_SLAVE_SQL_THREAD_TIMEOUT : int
        {static} + ER_STORAGE_ENGINE_NOT_LOADED : int
        {static} + ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT : int
        {static} + ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT : int
        {static} + ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN : int
        {static} + ER_SUBPARTITION_ERROR : int
        {static} + ER_SUBPARTITION_NAME : int
        {static} + ER_SUBQUERY_NO_1_ROW : int
        {static} + ER_SYNTAX_ERROR : int
        {static} + ER_TABLEACCESS_DENIED_ERROR : int
        {static} + ER_TABLENAME_NOT_ALLOWED_HERE : int
        {static} + ER_TABLESPACE_AUTO_EXTEND_ERROR : int
        {static} + ER_TABLESPACE_DISCARDED : int
        {static} + ER_TABLESPACE_EXISTS : int
        {static} + ER_TABLESPACE_MISSING : int
        {static} + ER_TABLES_DIFFERENT_METADATA : int
        {static} + ER_TABLE_CANT_HANDLE_AUTO_INCREMENT : int
        {static} + ER_TABLE_CANT_HANDLE_BLOB : int
        {static} + ER_TABLE_CANT_HANDLE_FT : int
        {static} + ER_TABLE_CANT_HANDLE_SPKEYS : int
        {static} + ER_TABLE_CORRUPT : int
        {static} + ER_TABLE_DEF_CHANGED : int
        {static} + ER_TABLE_EXISTS_ERROR : int
        {static} + ER_TABLE_HAS_NO_FT : int
        {static} + ER_TABLE_IN_FK_CHECK : int
        {static} + ER_TABLE_IN_SYSTEM_TABLESPACE : int
        {static} + ER_TABLE_MUST_HAVE_COLUMNS : int
        {static} + ER_TABLE_NAME : int
        {static} + ER_TABLE_NEEDS_REBUILD : int
        {static} + ER_TABLE_NEEDS_UPGRADE : int
        {static} + ER_TABLE_NOT_LOCKED : int
        {static} + ER_TABLE_NOT_LOCKED_FOR_WRITE : int
        {static} + ER_TABLE_SCHEMA_MISMATCH : int
        {static} + ER_TEMPORARY_NAME : int
        {static} + ER_TEMP_FILE_WRITE_FAILURE : int
        {static} + ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR : int
        {static} + ER_TEXTFILE_NOT_READABLE : int
        {static} + ER_TOO_BIG_DISPLAYWIDTH : int
        {static} + ER_TOO_BIG_FIELDLENGTH : int
        {static} + ER_TOO_BIG_FOR_UNCOMPRESS : int
        {static} + ER_TOO_BIG_PRECISION : int
        {static} + ER_TOO_BIG_ROWSIZE : int
        {static} + ER_TOO_BIG_SCALE : int
        {static} + ER_TOO_BIG_SELECT : int
        {static} + ER_TOO_BIG_SET : int
        {static} + ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT : int
        {static} + ER_TOO_LONG_BODY : int
        {static} + ER_TOO_LONG_FIELD_COMMENT : int
        {static} + ER_TOO_LONG_IDENT : int
        {static} + ER_TOO_LONG_INDEX_COMMENT : int
        {static} + ER_TOO_LONG_KEY : int
        {static} + ER_TOO_LONG_STRING : int
        {static} + ER_TOO_LONG_TABLE_COMMENT : int
        {static} + ER_TOO_LONG_TABLE_PARTITION_COMMENT : int
        {static} + ER_TOO_MANY_CONCURRENT_TRXS : int
        {static} + ER_TOO_MANY_DELAYED_THREADS : int
        {static} + ER_TOO_MANY_FIELDS : int
        {static} + ER_TOO_MANY_KEYS : int
        {static} + ER_TOO_MANY_KEY_PARTS : int
        {static} + ER_TOO_MANY_PARTITIONS_ERROR : int
        {static} + ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR : int
        {static} + ER_TOO_MANY_ROWS : int
        {static} + ER_TOO_MANY_TABLES : int
        {static} + ER_TOO_MANY_USER_CONNECTIONS : int
        {static} + ER_TOO_MANY_VALUES_ERROR : int
        {static} + ER_TOO_MUCH_AUTO_TIMESTAMP_COLS : int
        {static} + ER_TRANS_CACHE_FULL : int
        {static} + ER_TRG_ALREADY_EXISTS : int
        {static} + ER_TRG_CANT_CHANGE_ROW : int
        {static} + ER_TRG_CANT_OPEN_TABLE : int
        {static} + ER_TRG_CORRUPTED_FILE : int
        {static} + ER_TRG_DOES_NOT_EXIST : int
        {static} + ER_TRG_INVALID_CREATION_CTX : int
        {static} + ER_TRG_IN_WRONG_SCHEMA : int
        {static} + ER_TRG_NO_CREATION_CTX : int
        {static} + ER_TRG_NO_DEFINER : int
        {static} + ER_TRG_NO_SUCH_ROW_IN_TRG : int
        {static} + ER_TRG_ON_VIEW_OR_TEMP_TABLE : int
        {static} + ER_TRUNCATED_WRONG_VALUE : int
        {static} + ER_TRUNCATED_WRONG_VALUE_FOR_FIELD : int
        {static} + ER_TRUNCATE_ILLEGAL_FK : int
        {static} + ER_UDF_EXISTS : int
        {static} + ER_UDF_NO_PATHS : int
        {static} + ER_UNDO_RECORD_TOO_BIG : int
        {static} + ER_UNEXPECTED_EOF : int
        {static} + ER_UNION_TABLES_IN_DIFFERENT_DIR : int
        {static} + ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF : int
        {static} + ER_UNKNOWN_ALTER_ALGORITHM : int
        {static} + ER_UNKNOWN_ALTER_LOCK : int
        {static} + ER_UNKNOWN_CHARACTER_SET : int
        {static} + ER_UNKNOWN_COLLATION : int
        {static} + ER_UNKNOWN_COM_ERROR : int
        {static} + ER_UNKNOWN_ERROR : int
        {static} + ER_UNKNOWN_EXPLAIN_FORMAT : int
        {static} + ER_UNKNOWN_KEY_CACHE : int
        {static} + ER_UNKNOWN_LOCALE : int
        {static} + ER_UNKNOWN_PARTITION : int
        {static} + ER_UNKNOWN_PROCEDURE : int
        {static} + ER_UNKNOWN_STMT_HANDLER : int
        {static} + ER_UNKNOWN_STORAGE_ENGINE : int
        {static} + ER_UNKNOWN_SYSTEM_VARIABLE : int
        {static} + ER_UNKNOWN_TABLE : int
        {static} + ER_UNKNOWN_TARGET_BINLOG : int
        {static} + ER_UNKNOWN_TIME_ZONE : int
        {static} + ER_UNSUPORTED_LOG_ENGINE : int
        {static} + ER_UNSUPPORTED_ENGINE : int
        {static} + ER_UNSUPPORTED_EXTENSION : int
        {static} + ER_UNSUPPORTED_PS : int
        {static} + ER_UNTIL_COND_IGNORED : int
        {static} + ER_UPDATE_INFO : int
        {static} + ER_UPDATE_LOG_DEPRECATED_IGNORED : int
        {static} + ER_UPDATE_LOG_DEPRECATED_TRANSLATED : int
        {static} + ER_UPDATE_TABLE_USED : int
        {static} + ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE : int
        {static} + ER_USERNAME : int
        {static} + ER_USER_LIMIT_REACHED : int
        {static} + ER_VALUES_IS_NOT_INT_TYPE_ERROR : int
        {static} + ER_VARIABLE_IS_NOT_STRUCT : int
        {static} + ER_VARIABLE_IS_READONLY : int
        {static} + ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER : int
        {static} + ER_VARIABLE_NOT_SETTABLE_IN_SP : int
        {static} + ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION : int
        {static} + ER_VAR_CANT_BE_READ : int
        {static} + ER_VIEW_CHECKSUM : int
        {static} + ER_VIEW_CHECK_FAILED : int
        {static} + ER_VIEW_DELETE_MERGE_VIEW : int
        {static} + ER_VIEW_FRM_NO_USER : int
        {static} + ER_VIEW_INVALID : int
        {static} + ER_VIEW_INVALID_CREATION_CTX : int
        {static} + ER_VIEW_MULTIUPDATE : int
        {static} + ER_VIEW_NONUPD_CHECK : int
        {static} + ER_VIEW_NO_CREATION_CTX : int
        {static} + ER_VIEW_NO_EXPLAIN : int
        {static} + ER_VIEW_NO_INSERT_FIELD_LIST : int
        {static} + ER_VIEW_OTHER_USER : int
        {static} + ER_VIEW_PREVENT_UPDATE : int
        {static} + ER_VIEW_RECURSIVE : int
        {static} + ER_VIEW_SELECT_CLAUSE : int
        {static} + ER_VIEW_SELECT_DERIVED : int
        {static} + ER_VIEW_SELECT_TMPTABLE : int
        {static} + ER_VIEW_SELECT_VARIABLE : int
        {static} + ER_VIEW_WRONG_LIST : int
        {static} + ER_WARNING_NOT_COMPLETE_ROLLBACK : int
        {static} + ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE : int
        {static} + ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE : int
        {static} + ER_WARN_ALLOWED_PACKET_OVERFLOWED : int
        {static} + ER_WARN_CANT_DROP_DEFAULT_KEYCACHE : int
        {static} + ER_WARN_DATA_OUT_OF_RANGE : int
        {static} + ER_WARN_DATA_TRUNCATED : int
        {static} + ER_WARN_DEPRECATED_SYNTAX : int
        {static} + ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT : int
        {static} + ER_WARN_DEPRECATED_SYNTAX_WITH_VER : int
        {static} + ER_WARN_ENGINE_TRANSACTION_ROLLBACK : int
        {static} + ER_WARN_FIELD_RESOLVED : int
        {static} + ER_WARN_HOSTNAME_WONT_WORK : int
        {static} + ER_WARN_INDEX_NOT_APPLICABLE : int
        {static} + ER_WARN_INVALID_TIMESTAMP : int
        {static} + ER_WARN_I_S_SKIPPED_TABLE : int
        {static} + ER_WARN_LEGACY_SYNTAX_CONVERTED : int
        {static} + ER_WARN_NULL_TO_NOTNULL : int
        {static} + ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS : int
        {static} + ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO : int
        {static} + ER_WARN_PURGE_LOG_IN_USE : int
        {static} + ER_WARN_PURGE_LOG_IS_ACTIVE : int
        {static} + ER_WARN_QC_RESIZE : int
        {static} + ER_WARN_TOO_FEW_RECORDS : int
        {static} + ER_WARN_TOO_MANY_RECORDS : int
        {static} + ER_WARN_TRIGGER_DOESNT_HAVE_CREATED : int
        {static} + ER_WARN_USING_OTHER_HANDLER : int
        {static} + ER_WARN_VIEW_MERGE : int
        {static} + ER_WARN_VIEW_WITHOUT_KEY : int
        {static} + ER_WRONG_ARGUMENTS : int
        {static} + ER_WRONG_AUTO_KEY : int
        {static} + ER_WRONG_COLUMN_NAME : int
        {static} + ER_WRONG_DB_NAME : int
        {static} + ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR : int
        {static} + ER_WRONG_FIELD_SPEC : int
        {static} + ER_WRONG_FIELD_TERMINATORS : int
        {static} + ER_WRONG_FIELD_WITH_GROUP : int
        {static} + ER_WRONG_FK_DEF : int
        {static} + ER_WRONG_GROUP_FIELD : int
        {static} + ER_WRONG_KEY_COLUMN : int
        {static} + ER_WRONG_LOCK_OF_SYSTEM_TABLE : int
        {static} + ER_WRONG_MAGIC : int
        {static} + ER_WRONG_MRG_TABLE : int
        {static} + ER_WRONG_NAME_FOR_CATALOG : int
        {static} + ER_WRONG_NAME_FOR_INDEX : int
        {static} + ER_WRONG_NATIVE_TABLE_STRUCTURE : int
        {static} + ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT : int
        {static} + ER_WRONG_OBJECT : int
        {static} + ER_WRONG_OUTER_JOIN : int
        {static} + ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT : int
        {static} + ER_WRONG_PARAMCOUNT_TO_PROCEDURE : int
        {static} + ER_WRONG_PARAMETERS_TO_NATIVE_FCT : int
        {static} + ER_WRONG_PARAMETERS_TO_PROCEDURE : int
        {static} + ER_WRONG_PARAMETERS_TO_STORED_FCT : int
        {static} + ER_WRONG_PARTITION_NAME : int
        {static} + ER_WRONG_PERFSCHEMA_USAGE : int
        {static} + ER_WRONG_SIZE_NUMBER : int
        {static} + ER_WRONG_SPVAR_TYPE_IN_LIMIT : int
        {static} + ER_WRONG_STRING_LENGTH : int
        {static} + ER_WRONG_SUB_KEY : int
        {static} + ER_WRONG_SUM_SELECT : int
        {static} + ER_WRONG_TABLE_NAME : int
        {static} + ER_WRONG_TYPE_COLUMN_VALUE_ERROR : int
        {static} + ER_WRONG_TYPE_FOR_VAR : int
        {static} + ER_WRONG_USAGE : int
        {static} + ER_WRONG_VALUE : int
        {static} + ER_WRONG_VALUE_COUNT : int
        {static} + ER_WRONG_VALUE_COUNT_ON_ROW : int
        {static} + ER_WRONG_VALUE_FOR_TYPE : int
        {static} + ER_WRONG_VALUE_FOR_VAR : int
        {static} + ER_WSAS_FAILED : int
        {static} + ER_XAER_DUPID : int
        {static} + ER_XAER_INVAL : int
        {static} + ER_XAER_NOTA : int
        {static} + ER_XAER_OUTSIDE : int
        {static} + ER_XAER_RMFAIL : int
        {static} + ER_XA_RBDEADLOCK : int
        {static} + ER_XA_RBROLLBACK : int
        {static} + ER_XA_RBTIMEOUT : int
        {static} + ER_XA_RMERR : int
        {static} + ER_YES : int
        {static} + ER_ZLIB_Z_BUF_ERROR : int
        {static} + ER_ZLIB_Z_DATA_ERROR : int
        {static} + ER_ZLIB_Z_MEM_ERROR : int
        {static} + WARN_COND_ITEM_TRUNCATED : int
        {static} + WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED : int
        {static} + WARN_NO_MASTER_INFO : int
        {static} + WARN_ON_BLOCKHOLE_IN_RBR : int
        {static} + WARN_OPTION_BELOW_LIMIT : int
        {static} + WARN_OPTION_IGNORED : int
        {static} + WARN_PLUGIN_BUSY : int
        {static} + WARN_PLUGIN_DELETE_BUILTIN : int
        - MysqlErrorNumbers()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MysqlIO {
        {static} + SEED_LENGTH : int
        + mysqlConnection : Socket
        {static} # AUTH_411_OVERHEAD : int
        {static} # CLIENT_CONNECT_WITH_DB : int
        {static} # CLIENT_RESERVED : int
        {static} # CLIENT_SECURE_CONNECTION : int
        {static} # CLIENT_SSL : int
        {static} # COMP_HEADER_LENGTH : int
        {static} # HEADER_LENGTH : int
        {static} # INITIAL_PACKET_SIZE : int
        {static} # MAX_QUERY_SIZE_TO_EXPLAIN : int
        {static} # MAX_QUERY_SIZE_TO_LOG : int
        {static} # MIN_COMPRESS_LEN : int
        {static} # NULL_LENGTH : int
        {static} # ZERO_DATETIME_VALUE_MARKER : String
        {static} # ZERO_DATE_VALUE_MARKER : String
        # clientParam : long
        # connection : MySQLConnection
        # host : String
        # lastPacketReceivedTimeMs : long
        # lastPacketSentTimeMs : long
        # maxThreeBytes : int
        # mysqlInput : InputStream
        # mysqlOutput : BufferedOutputStream
        # port : int
        # seed : String
        # serverCapabilities : int
        # serverCharsetIndex : int
        # socketFactory : SocketFactory
        {static} ~ SERVER_MORE_RESULTS_EXISTS : int
        {static} - CLIENT_CAN_HANDLE_EXPIRED_PASSWORD : int
        {static} - CLIENT_COMPRESS : int
        {static} - CLIENT_CONNECT_ATTRS : int
        {static} - CLIENT_DEPRECATE_EOF : int
        {static} - CLIENT_FOUND_ROWS : int
        {static} - CLIENT_INTERACTIVE : int
        {static} - CLIENT_LOCAL_FILES : int
        {static} - CLIENT_LONG_FLAG : int
        {static} - CLIENT_LONG_PASSWORD : int
        {static} - CLIENT_MULTI_RESULTS : int
        {static} - CLIENT_MULTI_STATEMENTS : int
        {static} - CLIENT_PLUGIN_AUTH : int
        {static} - CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA : int
        {static} - CLIENT_PROTOCOL_41 : int
        {static} - CLIENT_SESSION_TRACK : int
        {static} - CLIENT_TRANSACTIONS : int
        {static} - CODE_PAGE_1252 : String
        {static} - EXPLAINABLE_STATEMENT : String
        {static} - EXPLAINABLE_STATEMENT_EXTENSION : String[]
        {static} - FALSE_SCRAMBLE : String
        {static} - MAX_PACKET_DUMP_LENGTH : int
        {static} - NONE : String
        {static} - SERVER_QUERY_NO_GOOD_INDEX_USED : int
        {static} - SERVER_QUERY_NO_INDEX_USED : int
        {static} - SERVER_QUERY_WAS_SLOW : int
        {static} - SERVER_STATUS_AUTOCOMMIT : int
        {static} - SERVER_STATUS_CURSOR_EXISTS : int
        {static} - SERVER_STATUS_IN_TRANS : int
        - authPluginDataLength : int
        - authenticationPlugins : Map<String, AuthenticationPlugin>
        - autoGenerateTestcaseScript : boolean
        - checkPacketSequence : boolean
        - clientDefaultAuthenticationPlugin : String
        - clientDefaultAuthenticationPluginName : String
        - colDecimalNeedsBump : boolean
        - commandCount : int
        - compressBufRef : SoftReference<Buffer>
        - compressedPacketSequence : byte
        - deflater : Deflater
        - disabledAuthenticationPlugins : List<String>
        - enablePacketDebug : boolean
        - exceptionInterceptor : ExceptionInterceptor
        - hadWarnings : boolean
        - has41NewNewProt : boolean
        - hasLongColumnInfo : boolean
        - isInteractiveClient : boolean
        {static} - jvmPlatformCharset : String
        - loadFileBufRef : SoftReference<Buffer>
        - logSlowQueries : boolean
        - maxAllowedPacket : int
        {static} - maxBufferSize : int
        - needToGrabQueryFromPacket : boolean
        - oldServerStatus : int
        - packetDebugRingBuffer : LinkedList<StringBuilder>
        - packetHeaderBuf : byte[]
        - packetSequence : byte
        - packetSequenceReset : boolean
        - platformDbCharsetMatches : boolean
        - profileSql : boolean
        - protocolVersion : byte
        - queryBadIndexUsed : boolean
        - queryNoIndexUsed : boolean
        - queryTimingUnits : String
        - readPacketSequence : byte
        - reusablePacket : Buffer
        - sendPacket : Buffer
        - serverDefaultAuthenticationPluginName : String
        - serverMajorVersion : int
        - serverMinorVersion : int
        - serverQueryWasSlow : boolean
        - serverStatus : int
        - serverSubMinorVersion : int
        - serverVersion : String
        - sharedSendPacket : Buffer
        - slowQueryThreshold : long
        - socketFactoryClassName : String
        - splitBufRef : SoftReference<Buffer>
        - statementExecutionDepth : int
        - statementInterceptors : List<StatementInterceptorV2>
        - streamingData : RowData
        - threadId : long
        - traceProtocol : boolean
        - use41Extensions : boolean
        - useAutoSlowLog : boolean
        - useBufferRowSizeThreshold : int
        - useCompression : boolean
        - useConnectWithDb : boolean
        - useDirectRowUnpack : boolean
        - useNanosForElapsedTime : boolean
        - useNewLargePackets : boolean
        - useNewUpdateCounts : boolean
        - warningCount : int
        + MysqlIO()
        + getQueryTimingUnits()
        + hasLongColumnInfo()
        + isEOFDeprecated()
        + isSSLEstablished()
        {static} + useBufferRowExplicit()
        # changeUser()
        # checkErrorPacket()
        # checkForCharsetMismatch()
        # clearInputStream()
        # dumpPacketRingBuffer()
        # explainSlowQuery()
        # fetchRowsViaCursor()
        # forceClose()
        # getCommandCount()
        # getCurrentTimeNanosOrMillis()
        # getExceptionInterceptor()
        # getLastPacketReceivedTimeMs()
        # getLastPacketSentTimeMs()
        # getNetworkResources()
        # getResultSet()
        # getServerStatus()
        # getSlowQueryThreshold()
        # getThreadId()
        # inTransactionOnServer()
        # isDataAvailable()
        # isSetNeededForAutoCommitMode()
        # readPacket()
        # readResultsForQueryOrUpdate()
        # releaseResources()
        # resetReadPacketSequence()
        # setSocketTimeout()
        # setStatementInterceptors()
        # shouldIntercept()
        # skipPacket()
        # unpackField()
        # useNanosForElapsedTime()
        ~ closeStreamer()
        ~ disableMultiQueries()
        ~ doHandshake()
        ~ enableMultiQueries()
        ~ getEncodingForHandshake()
        ~ getHost()
        {static} ~ getMaxBuf()
        ~ getServerMajorVersion()
        ~ getServerMinorVersion()
        ~ getServerSubMinorVersion()
        ~ getServerVersion()
        ~ getSharedSendPacket()
        ~ hadWarnings()
        ~ invokeStatementInterceptorsPost()
        ~ invokeStatementInterceptorsPre()
        ~ isVersion()
        ~ nextRow()
        ~ nextRowFast()
        ~ quit()
        ~ readAllResults()
        ~ resetMaxBuf()
        ~ scanForAndThrowDataTruncation()
        ~ secureAuth411()
        ~ sendCommand()
        ~ sqlQueryDirect()
        ~ tackOnMoreStreamingResults()
        ~ versionMeetsMinimum()
        - addAuthenticationPlugin()
        - adjustStartForFieldLength()
        - alignPacketSize()
        - appendCharsetByteForHandshake()
        - appendDeadlockStatusInformation()
        - buildResultSetWithRows()
        - buildResultSetWithUpdates()
        - calculateSlowQueryThreshold()
        - changeDatabaseTo()
        - checkConfidentiality()
        - checkErrorPacket()
        - checkErrorPacket()
        - checkForOutstandingStreamingData()
        - checkPacketSequencing()
        - checkTransactionState()
        - compressPacket()
        - createSocketFactory()
        - enqueuePacketForDebugging()
        - extractNativeEncodedColumn()
        - getAuthenticationPlugin()
        - getConnectionAttributesAsProperties()
        {static} - getPacketDumpToLog()
        - loadAuthenticationPlugins()
        - negotiateSSLConnection()
        - preserveOldTransactionState()
        - proceedHandshakeWithPluggableAuthentication()
        - readFully()
        - readRemainingMultiPackets()
        - readServerStatusForResultSets()
        - readSingleRowSet()
        - reclaimLargeReusablePacket()
        - reclaimLargeSharedSendPacket()
        - reuseAndReadPacket()
        - reuseAndReadPacket()
        - secureAuth()
        - send()
        - sendConnectionAttributes()
        - sendFileToServer()
        - sendSplitPackets()
        - setServerSlowQueryFlags()
        - skipFully()
        - skipLengthEncodedInteger()
        - unpackBinaryResultSetRow()
        - unpackNativeEncodedColumn()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MysqlParameterMetadata {
        ~ metadata : ResultSetMetaData
        ~ parameterCount : int
        ~ returnSimpleMetadata : boolean
        - exceptionInterceptor : ExceptionInterceptor
        + getParameterClassName()
        + getParameterCount()
        + getParameterMode()
        + getParameterType()
        + getParameterTypeName()
        + getPrecision()
        + getScale()
        + isNullable()
        + isSigned()
        + isWrapperFor()
        + unwrap()
        ~ MysqlParameterMetadata()
        ~ MysqlParameterMetadata()
        - checkAvailable()
        - checkBounds()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.MysqlSavepoint {
        - exceptionInterceptor : ExceptionInterceptor
        - savepointName : String
        + getSavepointId()
        + getSavepointName()
        ~ MysqlSavepoint()
        ~ MysqlSavepoint()
        {static} - getUniqueId()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NamedPipeSocketFactory {
        {static} + NAMED_PIPE_PROP_NAME : String
        - namedPipeSocket : Socket
        + NamedPipeSocketFactory()
        + afterHandshake()
        + beforeHandshake()
        + connect()
        + isLocallyConnected()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NamedPipeSocketFactory.NamedPipeSocket {
        - isClosed : boolean
        - namedPipeFile : RandomAccessFile
        + close()
        + getInputStream()
        + getOutputStream()
        + isClosed()
        ~ NamedPipeSocket()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NamedPipeSocketFactory.RandomAccessFileInputStream {
        ~ raFile : RandomAccessFile
        + available()
        + close()
        + read()
        + read()
        + read()
        ~ RandomAccessFileInputStream()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NamedPipeSocketFactory.RandomAccessFileOutputStream {
        ~ raFile : RandomAccessFile
        + close()
        + write()
        + write()
        + write()
        ~ RandomAccessFileOutputStream()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NdbLoadBalanceExceptionChecker {
        + shouldExceptionTriggerFailover()
        - checkNdbException()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NetworkResources {
        - mysqlConnection : Socket
        - mysqlInput : InputStream
        - mysqlOutput : OutputStream
        # NetworkResources()
        # forceClose()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NoSubInterceptorWrapper {
        - underlyingInterceptor : StatementInterceptorV2
        + NoSubInterceptorWrapper()
        + destroy()
        + executeTopLevelOnly()
        + getUnderlyingInterceptor()
        + init()
        + postProcess()
        + preProcess()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NonRegisteringDriver {
        {static} + DBNAME_PROPERTY_KEY : String
        {static} + DEBUG : boolean
        {static} + HOST_NAME_INDEX : int
        {static} + HOST_PROPERTY_KEY : String
        {static} + LICENSE : String
        {static} + LOADBALANCE_URL_PREFIX : String
        {static} + NAME : String
        {static} + NUM_HOSTS_PROPERTY_KEY : String
        {static} + OS : String
        {static} + PASSWORD_PROPERTY_KEY : String
        {static} + PATH_PROPERTY_KEY : String
        {static} + PLATFORM : String
        {static} + PORT_NUMBER_INDEX : int
        {static} + PORT_PROPERTY_KEY : String
        {static} + PROPERTIES_TRANSFORM_KEY : String
        {static} + PROTOCOL_PROPERTY_KEY : String
        {static} + RUNTIME_VENDOR : String
        {static} + RUNTIME_VERSION : String
        {static} + TRACE : boolean
        {static} + USER_PROPERTY_KEY : String
        {static} + USE_CONFIG_PROPERTY_KEY : String
        {static} + VERSION : String
        {static} - ALLOWED_QUOTES : String
        {static} - MXJ_URL_PREFIX : String
        {static} - REPLICATION_URL_PREFIX : String
        {static} - URL_PREFIX : String
        + NonRegisteringDriver()
        + acceptsURL()
        + connect()
        + database()
        {static} + expandHostKeyValues()
        + getMajorVersion()
        + getMinorVersion()
        {static} + getOSName()
        {static} + getPlatform()
        + getPropertyInfo()
        + host()
        {static} + isHostPropertiesList()
        + jdbcCompliant()
        + parseURL()
        + port()
        + property()
        # connectReplicationConnection()
        {static} # parseHostPortPair()
        {static} ~ getMajorVersionInternal()
        {static} ~ getMinorVersionInternal()
        - connectFailover()
        - connectLoadBalanced()
        - isHostMaster()
        {static} - safeIntParse()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NonRegisteringReplicationDriver {
        + NonRegisteringReplicationDriver()
        + connect()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NotImplemented {
        {static} ~ serialVersionUID : long
        + NotImplemented()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.NotUpdatable {
        {static} + NOT_UPDATEABLE_MESSAGE : String
        {static} - serialVersionUID : long
        + NotUpdatable()
        + NotUpdatable()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.OperationNotSupportedException {
        {static} ~ serialVersionUID : long
        ~ OperationNotSupportedException()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.OutputStreamWatcher {
        {abstract} + streamClosed()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PacketTooBigException {
        {static} ~ serialVersionUID : long
        + PacketTooBigException()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.ParameterBindings {
        {abstract} + getArray()
        {abstract} + getAsciiStream()
        {abstract} + getBigDecimal()
        {abstract} + getBinaryStream()
        {abstract} + getBlob()
        {abstract} + getBoolean()
        {abstract} + getByte()
        {abstract} + getBytes()
        {abstract} + getCharacterStream()
        {abstract} + getClob()
        {abstract} + getDate()
        {abstract} + getDouble()
        {abstract} + getFloat()
        {abstract} + getInt()
        {abstract} + getLong()
        {abstract} + getNCharacterStream()
        {abstract} + getNClob()
        {abstract} + getObject()
        {abstract} + getRef()
        {abstract} + getShort()
        {abstract} + getString()
        {abstract} + getTime()
        {abstract} + getTimestamp()
        {abstract} + getURL()
        {abstract} + isNull()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PerConnectionLRUFactory {
        + getInstance()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PerConnectionLRUFactory.PerConnectionLRU {
        - cache : LRUCache<String, ParseInfo>
        - cacheSqlLimit : int
        - conn : Connection
        + get()
        + invalidate()
        + invalidateAll()
        + invalidateAll()
        + put()
        # PerConnectionLRU()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PerVmServerConfigCacheFactory {
        {static} ~ serverConfigByUrl : ConcurrentHashMap<String, Map<String, String>>
        {static} - serverConfigCache : CacheAdapter<String, Map<String, String>>
        + getInstance()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.PingTarget {
        {abstract} + doPing()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PreparedStatement {
        # batchCommandIndex : int
        # batchHasPlainStatements : boolean
        # batchedValuesClause : String
        # firstCharOfStmt : char
        # isLoadDataQuery : boolean
        # isNull : boolean[]
        # numberOfExecutions : int
        # originalSql : String
        # parameterCount : int
        # parameterMetaData : MysqlParameterMetadata
        # parameterTypes : int[]
        # rewrittenBatchSize : int
        # serverSupportsFracSecs : boolean
        # useTrueBoolean : boolean
        # usingAnsiMode : boolean
        {static} - HEX_DIGITS : byte[]
        {static} - JDBC_4_PSTMT_2_ARG_CTOR : Constructor<?>
        {static} - JDBC_4_PSTMT_3_ARG_CTOR : Constructor<?>
        {static} - JDBC_4_PSTMT_4_ARG_CTOR : Constructor<?>
        - charsetEncoder : CharsetEncoder
        - compensateForOnDuplicateKeyUpdate : boolean
        - dbmd : DatabaseMetaData
        - ddf : SimpleDateFormat
        - doPingInstead : boolean
        - isStream : boolean[]
        - parameterStreams : InputStream[]
        - parameterValues : byte[][]
        - pstmtResultMetaData : ResultSetMetaData
        - staticSqlStrings : byte[][]
        - streamConvertBuf : byte[]
        - streamLengths : int[]
        - tdf : SimpleDateFormat
        - tsdf : SimpleDateFormat
        + PreparedStatement()
        + PreparedStatement()
        + PreparedStatement()
        + addBatch()
        + addBatch()
        + asSql()
        + asSql()
        + canRewriteAsMultiValueInsertAtSqlLevel()
        + clearBatch()
        + clearParameters()
        + execute()
        + executeLargeUpdate()
        + executeQuery()
        + executeUpdate()
        + getBytesRepresentation()
        + getDateTime()
        + getMetaData()
        + getNonRewrittenSql()
        + getParameterBindings()
        + getParameterMetaData()
        + getPreparedSql()
        + getRewrittenBatchSize()
        + getUpdateCount()
        + setArray()
        + setAsciiStream()
        + setAsciiStream()
        + setAsciiStream()
        + setBigDecimal()
        + setBinaryStream()
        + setBinaryStream()
        + setBinaryStream()
        + setBlob()
        + setBlob()
        + setBlob()
        + setBoolean()
        + setByte()
        + setBytes()
        + setCharacterStream()
        + setCharacterStream()
        + setCharacterStream()
        + setClob()
        + setClob()
        + setClob()
        + setDate()
        + setDate()
        + setDouble()
        + setFloat()
        + setInt()
        + setLong()
        + setNCharacterStream()
        + setNCharacterStream()
        + setNClob()
        + setNClob()
        + setNString()
        + setNull()
        + setNull()
        + setObject()
        + setObject()
        + setObject()
        + setRef()
        + setShort()
        + setString()
        + setTime()
        + setTime()
        + setTimestamp()
        + setTimestamp()
        + setURL()
        + setUnicodeStream()
        + toString()
        {static} # canRewrite()
        # checkBounds()
        # checkReadOnlySafeStatement()
        # computeBatchSize()
        # computeMaxParameterSetSizeAndBatchSize()
        # containsOnDuplicateKeyUpdateInSQL()
        # detectFractionalSecondsSupport()
        # executeBatchInternal()
        # executeBatchSerially()
        # executeBatchedInserts()
        # executeInternal()
        # executePreparedBatchAsMultiStatement()
        # executeUpdateInternal()
        # executeUpdateInternal()
        # fillSendPacket()
        # fillSendPacket()
        # getBytesRepresentationForBatch()
        {static} # getInstance()
        {static} # getInstance()
        {static} # getInstance()
        # getLocationOfOnDuplicateKeyUpdate()
        # getParameterIndexOffset()
        # getValuesClause()
        # isSelectQuery()
        # prepareBatchedInsertSQL()
        {static} # readFully()
        # realClose()
        # setBytes()
        # setBytesNoEscape()
        # setBytesNoEscapeNoQuotes()
        # setInternal()
        # setInternal()
        # setOneBatchedParameterSet()
        # setRetrieveGeneratedKeys()
        # setTimestampInternal()
        ~ getParseInfo()
        ~ isNull()
        - checkAllParametersSet()
        - doSSPSCompatibleTimezoneShift()
        - escapeblockFast()
        - escapeblockFast()
        - generateMultiStatementForBatch()
        - getDateTimePattern()
        - getSuccessor()
        - hexEscapeBlock()
        - initializeFromParseInfo()
        - isEscapeNeededForString()
        - newSetDateInternal()
        - newSetTimeInternal()
        - newSetTimestampInternal()
        - readblock()
        - readblock()
        - setNumericObject()
        - setSerializableObject()
        - setTimeInternal()
        - streamToBytes()
        - streamToBytes()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PreparedStatement.AppendingBatchVisitor {
        ~ statementComponents : LinkedList<byte[]>
        + append()
        + decrement()
        + getStaticSqlStrings()
        + increment()
        + merge()
        + mergeWithLast()
        + toString()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PreparedStatement.BatchParams {
        + isNull : boolean[]
        + isStream : boolean[]
        + parameterStreams : InputStream[]
        + parameterStrings : byte[][]
        + streamLengths : int[]
        ~ BatchParams()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.PreparedStatement.BatchVisitor {
        {abstract} + append()
        {abstract} + decrement()
        {abstract} + increment()
        {abstract} + merge()
        {abstract} + mergeWithLast()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PreparedStatement.EmulatedPreparedStatementBindings {
        - bindingsAsRs : ResultSetImpl
        - parameterIsNull : boolean[]
        + getArray()
        + getAsciiStream()
        + getBigDecimal()
        + getBinaryStream()
        + getBlob()
        + getBoolean()
        + getByte()
        + getBytes()
        + getCharacterStream()
        + getClob()
        + getDate()
        + getDouble()
        + getFloat()
        + getInt()
        + getLong()
        + getNCharacterStream()
        + getNClob()
        + getObject()
        + getRef()
        + getShort()
        + getString()
        + getTime()
        + getTimestamp()
        + getURL()
        + isNull()
        ~ EmulatedPreparedStatementBindings()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PreparedStatement.EndPoint {
        ~ begin : int
        ~ end : int
        ~ EndPoint()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.PreparedStatement.ParseInfo {
        ~ canRewriteAsMultiValueInsert : boolean
        ~ charEncoding : String
        ~ firstStmtChar : char
        ~ foundLoadData : boolean
        ~ hasPlaceholders : boolean
        ~ isOnDuplicateKeyUpdate : boolean
        ~ lastUsed : long
        ~ locationOfOnDuplicateKeyUpdate : int
        ~ numberOfQueries : int
        ~ parametersInDuplicateKeyClause : boolean
        ~ statementLength : int
        ~ statementStartPos : int
        ~ staticSql : byte[][]
        ~ valuesClause : String
        + ParseInfo()
        ~ ParseInfo()
        ~ getParseInfoForBatch()
        ~ getSqlForBatch()
        ~ getSqlForBatch()
        - ParseInfo()
        - buildInfoForBatch()
        - buildRewriteBatchedParams()
        - extractValuesClause()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ProfilerEventHandlerFactory {
        # log : Log
        - ownerConnection : Connection
        {static} + getInstance()
        {static} + removeInstance()
        - ProfilerEventHandlerFactory()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.RandomBalanceStrategy {
        + RandomBalanceStrategy()
        + destroy()
        + init()
        + pickConnection()
        - getArrayIndexMap()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ReflectiveStatementInterceptorAdapter {
        ~ v2PostProcessMethod : Method
        - toProxy : StatementInterceptor
        + ReflectiveStatementInterceptorAdapter()
        + destroy()
        + executeTopLevelOnly()
        {static} + getV2PostProcessMethod()
        + init()
        + postProcess()
        + preProcess()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.ReplicationConnection {
        {abstract} + addSlaveHost()
        {abstract} + getConnectionGroupId()
        {abstract} + getCurrentConnection()
        {abstract} + getMasterConnection()
        {abstract} + getSlavesConnection()
        {abstract} + isHostMaster()
        {abstract} + isHostSlave()
        {abstract} + promoteSlaveToMaster()
        {abstract} + removeMasterHost()
        {abstract} + removeMasterHost()
        {abstract} + removeSlave()
        {abstract} + removeSlave()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ReplicationConnectionGroup {
        - activeConnections : long
        - connections : long
        - groupName : String
        - isInitialized : boolean
        - masterHostList : Set<String>
        - replicationConnections : HashMap<Long, ReplicationConnection>
        - slaveHostList : Set<String>
        - slavesAdded : long
        - slavesPromoted : long
        - slavesRemoved : long
        + addSlaveHost()
        + getActiveConnectionCount()
        + getConnectionCount()
        + getConnectionCountWithHostAsMaster()
        + getConnectionCountWithHostAsSlave()
        + getGroupName()
        + getMasterHosts()
        + getNumberOfSlavePromotions()
        + getNumberOfSlavesAdded()
        + getNumberOfSlavesRemoved()
        + getSlaveHosts()
        + getTotalConnectionCount()
        + handleCloseConnection()
        + promoteSlaveToMaster()
        + registerReplicationConnection()
        + removeMasterHost()
        + removeMasterHost()
        + removeSlaveHost()
        + toString()
        ~ ReplicationConnectionGroup()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ReplicationConnectionGroupManager {
        {static} - GROUP_MAP : HashMap<String, ReplicationConnectionGroup>
        {static} - hasRegisteredJmx : boolean
        {static} - mbean : ReplicationGroupManager
        {static} + addSlaveHost()
        {static} + getActiveConnectionCount()
        {static} + getConnectionCountWithHostAsMaster()
        {static} + getConnectionCountWithHostAsSlave()
        {static} + getConnectionGroup()
        {static} + getConnectionGroupInstance()
        {static} + getGroupsMatching()
        {static} + getMasterHosts()
        {static} + getNumberOfMasterPromotion()
        {static} + getRegisteredReplicationConnectionGroups()
        {static} + getSlaveHosts()
        {static} + getSlavePromotionCount()
        {static} + getTotalConnectionCount()
        {static} + promoteSlaveToMaster()
        {static} + registerJmx()
        {static} + removeMasterHost()
        {static} + removeMasterHost()
        {static} + removeSlaveHost()
        {static} + removeSlaveHost()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ReplicationConnectionProxy {
        # allowMasterDownConnections : boolean
        # allowSlaveDownConnections : boolean
        # enableJMX : boolean
        # masterConnection : LoadBalancedConnection
        # readFromMasterWhenNoSlaves : boolean
        # readFromMasterWhenNoSlavesOriginal : boolean
        # readOnly : boolean
        # slavesConnection : LoadBalancedConnection
        ~ connectionGroup : ReplicationConnectionGroup
        {static} - INTERFACES_TO_PROXY : Class<?>[]
        {static} - JDBC_4_REPL_CONNECTION_CTOR : Constructor<?>
        - connectionGroupID : long
        - driver : NonRegisteringDriver
        - masterHosts : List<String>
        - masterProperties : Properties
        - slaveHosts : List<String>
        - slaveProperties : Properties
        - thisAsReplicationConnection : ReplicationConnection
        + addSlaveHost()
        {static} + createProxyInstance()
        + doPing()
        + getConnectionGroupId()
        + getCurrentConnection()
        + getMasterConnection()
        + getSlavesConnection()
        + isHostMaster()
        + isHostSlave()
        + isMasterConnection()
        + isReadOnly()
        + isSlavesConnection()
        + promoteSlaveToMaster()
        + removeMasterHost()
        + removeMasterHost()
        + removeMasterHost()
        + removeSlave()
        + removeSlave()
        + setReadOnly()
        # propagateProxyDown()
        ~ doAbort()
        ~ doAbortInternal()
        ~ doClose()
        ~ getNewWrapperForThisAsConnection()
        ~ invokeMore()
        ~ pickNewConnection()
        ~ shouldExceptionTriggerConnectionSwitch()
        ~ syncSessionState()
        - ReplicationConnectionProxy()
        - buildURL()
        - checkConnectionCapabilityForMethod()
        - initializeMasterConnection()
        - initializeSlavesConnection()
        - resetReadFromMasterWhenNoSlaves()
        - switchToMasterConnection()
        - switchToSlavesConnection()
        - switchToSlavesConnectionIfNecessary()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ReplicationDriver {
        + ReplicationDriver()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ReplicationMySQLConnection {
        + ReplicationMySQLConnection()
        + abort()
        + abortInternal()
        + addSlaveHost()
        + changeUser()
        + getActiveMySQLConnection()
        + getAllowMasterDownConnections()
        + getConnectionGroupId()
        + getCurrentConnection()
        + getMasterConnection()
        + getProperties()
        + getReplicationEnableJMX()
        + getSlavesConnection()
        + hasSameProperties()
        + isHostMaster()
        + isHostSlave()
        + isReadOnly()
        + ping()
        + promoteSlaveToMaster()
        + removeMasterHost()
        + removeMasterHost()
        + removeSlave()
        + removeSlave()
        + setAllowMasterDownConnections()
        + setProxy()
        + setReadOnly()
        + setReplicationEnableJMX()
        + setStatementComment()
        # getThisAsProxy()
        - getValidatedMasterConnection()
        - getValidatedSlavesConnection()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ResultSetImpl {
        {static} # MAX_DIFF_PREC : double
        {static} # MIN_DIFF_PREC : double
        # catalog : String
        # columnLabelToIndex : Map<String, Integer>
        # columnNameToIndex : Map<String, Integer>
        # columnToIndexCache : Map<String, Integer>
        # columnUsed : boolean[]
        # connection : MySQLConnection
        # currentRow : int
        # doingUpdates : boolean
        # fetchDirection : int
        # fetchSize : int
        # fields : Field[]
        # firstCharOfQuery : char
        # fullColumnNameToIndex : Map<String, Integer>
        # gmtCalendar : Calendar
        # hasBuiltIndexMapping : boolean
        # isBinaryEncoded : boolean
        # isClosed : boolean
        # nextResultSet : ResultSetInternalMethods
        # onInsertRow : boolean
        # owningStatement : StatementImpl
        # pointOfOrigin : String
        # reallyResult : boolean
        # resultId : int
        # resultSetConcurrency : int
        # resultSetType : int
        # retainOwningStatement : boolean
        # rowData : RowData
        # serverInfo : String
        # thisRow : ResultSetRow
        # updateCount : long
        # updateId : long
        # useFastDateParsing : boolean
        # useLegacyDatetimeCode : boolean
        # useUsageAdvisor : boolean
        # warningChain : SQLWarning
        # wasNullFlag : boolean
        # wrapperStatement : Statement
        {static} ~ EMPTY_SPACE : char[]
        ~ fastClientCal : Calendar
        ~ fastDefaultCal : Calendar
        {static} ~ resultCounter : int
        ~ statementUsedForFetchingRows : PreparedStatement
        {static} - JDBC_4_RS_4_ARG_CTOR : Constructor<?>
        {static} - JDBC_4_RS_5_ARG_CTOR : Constructor<?>
        {static} - JDBC_4_UPD_RS_5_ARG_CTOR : Constructor<?>
        - exceptionInterceptor : ExceptionInterceptor
        - invalidRowReason : String
        - jdbcCompliantTruncationForReads : boolean
        - onValidRow : boolean
        - padCharsWithSpace : boolean
        - serverTimeZoneTz : TimeZone
        - useColumnNamesInFindColumn : boolean
        - useFastIntParsing : boolean
        - useStrictFloatingPoint : boolean
        + ResultSetImpl()
        + ResultSetImpl()
        + absolute()
        + afterLast()
        {static} + arraysEqual()
        + beforeFirst()
        + buildIndexMapping()
        + cancelRowUpdates()
        + clearNextResult()
        + clearWarnings()
        + close()
        + copy()
        + deleteRow()
        + findColumn()
        + first()
        + getArray()
        + getArray()
        + getAsciiStream()
        + getAsciiStream()
        + getBigDecimal()
        + getBigDecimal()
        + getBigDecimal()
        + getBigDecimal()
        + getBinaryStream()
        + getBinaryStream()
        + getBlob()
        + getBlob()
        + getBoolean()
        + getBoolean()
        + getByte()
        + getByte()
        + getBytes()
        + getBytes()
        + getBytesSize()
        + getCharacterStream()
        + getCharacterStream()
        + getClob()
        + getClob()
        + getConcurrency()
        + getCursorName()
        + getDate()
        + getDate()
        + getDate()
        + getDate()
        + getDouble()
        + getDouble()
        + getFetchDirection()
        + getFetchSize()
        + getFirstCharOfQuery()
        + getFloat()
        + getFloat()
        + getId()
        + getInt()
        + getInt()
        + getLong()
        + getLong()
        + getMetaData()
        + getNextResultSet()
        + getObject()
        + getObject()
        + getObject()
        + getObject()
        + getObject()
        + getObject()
        + getObjectStoredProc()
        + getObjectStoredProc()
        + getObjectStoredProc()
        + getObjectStoredProc()
        + getRef()
        + getRef()
        + getRow()
        + getServerInfo()
        + getShort()
        + getShort()
        + getStatement()
        + getString()
        + getString()
        + getTime()
        + getTime()
        + getTime()
        + getTime()
        + getTimestamp()
        + getTimestamp()
        + getTimestamp()
        + getTimestamp()
        + getType()
        + getURL()
        + getURL()
        + getUnicodeStream()
        + getUnicodeStream()
        + getUpdateCount()
        + getUpdateID()
        + getWarnings()
        + initializeFromCachedMetaData()
        + initializeWithMetadata()
        + insertRow()
        + isAfterLast()
        + isBeforeFirst()
        + isClosed()
        + isFirst()
        + isLast()
        + last()
        + moveToCurrentRow()
        + moveToInsertRow()
        + next()
        + populateCachedMetaData()
        + prev()
        + previous()
        + realClose()
        + reallyResult()
        + redefineFieldsForDBMD()
        + refreshRow()
        + relative()
        + rowDeleted()
        + rowInserted()
        + rowUpdated()
        + setFetchDirection()
        + setFetchSize()
        + setFirstCharOfQuery()
        + setOwningStatement()
        + setStatementUsedForFetchingRows()
        + setWrapperStatement()
        + toString()
        + updateArray()
        + updateArray()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateBigDecimal()
        + updateBigDecimal()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBlob()
        + updateBlob()
        + updateBoolean()
        + updateBoolean()
        + updateByte()
        + updateByte()
        + updateBytes()
        + updateBytes()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateClob()
        + updateClob()
        + updateDate()
        + updateDate()
        + updateDouble()
        + updateDouble()
        + updateFloat()
        + updateFloat()
        + updateInt()
        + updateInt()
        + updateLong()
        + updateLong()
        + updateNull()
        + updateNull()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateRef()
        + updateRef()
        + updateRow()
        + updateShort()
        + updateShort()
        + updateString()
        + updateString()
        + updateTime()
        + updateTime()
        + updateTimestamp()
        + updateTimestamp()
        + wasNull()
        # checkClosed()
        # checkColumnBounds()
        # checkRowPos()
        {static} # convertLongToUlong()
        # fastDateCreate()
        # fastTimeCreate()
        # fastTimestampCreate()
        # getBytes()
        # getCalendarInstanceForSessionOrNew()
        # getDoubleInternal()
        # getDoubleInternal()
        # getExceptionInterceptor()
        # getGmtCalendar()
        {static} # getInstance()
        {static} # getInstance()
        # getNativeArray()
        # getNativeAsciiStream()
        # getNativeBigDecimal()
        # getNativeBigDecimal()
        # getNativeBinaryStream()
        # getNativeBlob()
        # getNativeByte()
        # getNativeByte()
        # getNativeBytes()
        # getNativeCharacterStream()
        # getNativeClob()
        # getNativeDate()
        # getNativeDate()
        # getNativeDouble()
        # getNativeFloat()
        # getNativeInt()
        # getNativeInt()
        # getNativeLong()
        # getNativeLong()
        # getNativeRef()
        # getNativeShort()
        # getNativeShort()
        # getNativeString()
        # getNativeURL()
        # getNativeUnicodeStream()
        # getStringInternal()
        # setBinaryEncoded()
        # setNextResultSet()
        # setResultSetConcurrency()
        # setResultSetType()
        # setServerInfo()
        ~ getNativeDateViaParseConversion()
        ~ getNativeTimeViaParseConversion()
        ~ getNativeTimestampViaParseConversion()
        - byteArrayToBoolean()
        - checkForIntegerTruncation()
        - checkForLongTruncation()
        - convertToZeroLiteralStringWithEmptyCheck()
        - convertToZeroWithEmptyCheck()
        - extractStringFromNativeColumn()
        - getBigDecimalFromString()
        - getBooleanFromString()
        - getByteFromString()
        - getBytesFromString()
        - getCharacterStreamFromString()
        - getClobFromString()
        - getDateFromString()
        - getDefaultTimeZone()
        - getDoubleFromString()
        - getFastClientCalendar()
        - getFastDefaultCalendar()
        - getFloatFromString()
        - getIntFromString()
        - getIntWithOverflowCheck()
        - getLong()
        - getLongFromString()
        - getLongWithOverflowCheck()
        - getNativeConvertToString()
        - getNativeTime()
        - getNativeTimestamp()
        - getNumericRepresentationOfSQLBitType()
        - getObjectDeserializingIfNeeded()
        - getShortFromString()
        - getStringForClob()
        - getTimeFromString()
        - getTimeInternal()
        - getTimestampFromString()
        - getTimestampInternal()
        - issueConversionViaParsingWarning()
        - parseIntAsDouble()
        - parseLongAsDouble()
        - parseLongWithOverflowCheck()
        - parseShortAsDouble()
        - parseShortWithOverflowCheck()
        - setRowPositionValidity()
        - throwRangeException()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.ResultSetInternalMethods {
        {abstract} + buildIndexMapping()
        {abstract} + clearNextResult()
        {abstract} + copy()
        {abstract} + getBytesSize()
        {abstract} + getFirstCharOfQuery()
        {abstract} + getId()
        {abstract} + getNextResultSet()
        {abstract} + getObjectStoredProc()
        {abstract} + getObjectStoredProc()
        {abstract} + getObjectStoredProc()
        {abstract} + getObjectStoredProc()
        {abstract} + getServerInfo()
        {abstract} + getUpdateCount()
        {abstract} + getUpdateID()
        {abstract} + initializeFromCachedMetaData()
        {abstract} + initializeWithMetadata()
        {abstract} + isClosed()
        {abstract} + populateCachedMetaData()
        {abstract} + realClose()
        {abstract} + reallyResult()
        {abstract} + redefineFieldsForDBMD()
        {abstract} + setFirstCharOfQuery()
        {abstract} + setOwningStatement()
        {abstract} + setStatementUsedForFetchingRows()
        {abstract} + setWrapperStatement()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ResultSetMetaData {
        ~ fields : Field[]
        ~ treatYearAsDate : boolean
        ~ useOldAliasBehavior : boolean
        - exceptionInterceptor : ExceptionInterceptor
        + ResultSetMetaData()
        + getCatalogName()
        + getColumnCharacterEncoding()
        + getColumnCharacterSet()
        + getColumnClassName()
        + getColumnCount()
        + getColumnDisplaySize()
        + getColumnLabel()
        + getColumnName()
        + getColumnType()
        + getColumnTypeName()
        + getPrecision()
        + getScale()
        + getSchemaName()
        + getTableName()
        + isAutoIncrement()
        + isCaseSensitive()
        + isCurrency()
        + isDefinitelyWritable()
        + isNullable()
        + isReadOnly()
        + isSearchable()
        + isSigned()
        + isWrapperFor()
        + isWritable()
        + toString()
        + unwrap()
        # getField()
        {static} ~ getClassNameForJavaType()
        {static} - clampedGetLength()
        {static} - isDecimalType()
    }
  }
  

  namespace com.mysql.jdbc {
    abstract class com.mysql.jdbc.ResultSetRow {
        # exceptionInterceptor : ExceptionInterceptor
        # metadata : Field[]
        {abstract} + closeOpenStreams()
        {abstract} + getBinaryInputStream()
        {abstract} + getBytesSize()
        {abstract} + getColumnValue()
        {abstract} + getDateFast()
        {abstract} + getInt()
        {abstract} + getLong()
        {abstract} + getNativeDate()
        {abstract} + getNativeDateTimeValue()
        {abstract} + getNativeDouble()
        {abstract} + getNativeFloat()
        {abstract} + getNativeInt()
        {abstract} + getNativeLong()
        {abstract} + getNativeShort()
        {abstract} + getNativeTime()
        {abstract} + getNativeTimestamp()
        {abstract} + getReader()
        {abstract} + getString()
        {abstract} + getTimeFast()
        {abstract} + getTimestampFast()
        {abstract} + isFloatingPointNumber()
        {abstract} + isNull()
        {abstract} + length()
        {abstract} + setColumnValue()
        + setMetadata()
        # ResultSetRow()
        # getDateFast()
        # getNativeDate()
        # getNativeDateTimeValue()
        # getNativeDouble()
        # getNativeFloat()
        # getNativeInt()
        # getNativeLong()
        # getNativeShort()
        # getNativeTime()
        # getNativeTimestamp()
        # getString()
        # getTimeFast()
        # getTimestampFast()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.RowData {
        {static} + RESULT_SET_SIZE_UNKNOWN : int
        {abstract} + addRow()
        {abstract} + afterLast()
        {abstract} + beforeFirst()
        {abstract} + beforeLast()
        {abstract} + close()
        {abstract} + getAt()
        {abstract} + getCurrentRowNumber()
        {abstract} + getOwner()
        {abstract} + hasNext()
        {abstract} + isAfterLast()
        {abstract} + isBeforeFirst()
        {abstract} + isDynamic()
        {abstract} + isEmpty()
        {abstract} + isFirst()
        {abstract} + isLast()
        {abstract} + moveRowRelative()
        {abstract} + next()
        {abstract} + removeRow()
        {abstract} + setCurrentRow()
        {abstract} + setMetadata()
        {abstract} + setOwner()
        {abstract} + size()
        {abstract} + wasEmpty()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.RowDataCursor {
        {static} - BEFORE_START_OF_ROWS : int
        {static} - SERVER_STATUS_LAST_ROW_SENT : int
        - currentPositionInEntireResult : int
        - currentPositionInFetchedRows : int
        - fetchedRows : List<ResultSetRow>
        - firstFetchCompleted : boolean
        - lastRowFetched : boolean
        - metadata : Field[]
        - mysql : MysqlIO
        - owner : ResultSetImpl
        - prepStmt : ServerPreparedStatement
        - statementIdOnServer : long
        - useBufferRowExplicit : boolean
        - wasEmpty : boolean
        + RowDataCursor()
        + addRow()
        + afterLast()
        + beforeFirst()
        + beforeLast()
        + close()
        + getAt()
        + getCurrentRowNumber()
        + getOwner()
        + hasNext()
        + isAfterLast()
        + isBeforeFirst()
        + isDynamic()
        + isEmpty()
        + isFirst()
        + isLast()
        + moveRowRelative()
        + next()
        + removeRow()
        + setCurrentRow()
        + setMetadata()
        + setOwner()
        + size()
        + wasEmpty()
        # nextRecord()
        - fetchMoreRows()
        - notSupported()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.RowDataDynamic {
        - columnCount : int
        - exceptionInterceptor : ExceptionInterceptor
        - index : int
        - io : MysqlIO
        - isAfterEnd : boolean
        - isBinaryEncoded : boolean
        - metadata : Field[]
        - moreResultsExisted : boolean
        - nextRow : ResultSetRow
        - noMoreRows : boolean
        - owner : ResultSetImpl
        - streamerClosed : boolean
        - useBufferRowExplicit : boolean
        - wasEmpty : boolean
        + RowDataDynamic()
        + addRow()
        + afterLast()
        + beforeFirst()
        + beforeLast()
        + close()
        + getAt()
        + getCurrentRowNumber()
        + getOwner()
        + hasNext()
        + isAfterLast()
        + isBeforeFirst()
        + isDynamic()
        + isEmpty()
        + isFirst()
        + isLast()
        + moveRowRelative()
        + next()
        + removeRow()
        + setCurrentRow()
        + setMetadata()
        + setOwner()
        + size()
        + wasEmpty()
        - nextRecord()
        - notSupported()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.RowDataStatic {
        ~ owner : ResultSetImpl
        - index : int
        - metadata : Field[]
        - rows : List<ResultSetRow>
        + RowDataStatic()
        + addRow()
        + afterLast()
        + beforeFirst()
        + beforeLast()
        + close()
        + getAt()
        + getCurrentRowNumber()
        + getOwner()
        + hasNext()
        + isAfterLast()
        + isBeforeFirst()
        + isDynamic()
        + isEmpty()
        + isFirst()
        + isLast()
        + moveRowRelative()
        + next()
        + removeRow()
        + setCurrentRow()
        + setMetadata()
        + setOwner()
        + size()
        + wasEmpty()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.SQLError {
        {static} + SQL_STATE_ACTIVE_SQL_TRANSACTION : String
        {static} + SQL_STATE_BASE_TABLE_NOT_FOUND : String
        {static} + SQL_STATE_BASE_TABLE_OR_VIEW_ALREADY_EXISTS : String
        {static} + SQL_STATE_BASE_TABLE_OR_VIEW_NOT_FOUND : String
        {static} + SQL_STATE_CARDINALITY_VIOLATION : String
        {static} + SQL_STATE_CASE_NOT_FOUND_FOR_CASE_STATEMENT : String
        {static} + SQL_STATE_CLI_SPECIFIC_CONDITION : String
        {static} + SQL_STATE_COLUMN_ALREADY_EXISTS : String
        {static} + SQL_STATE_COLUMN_NOT_FOUND : String
        {static} + SQL_STATE_COMMUNICATION_LINK_FAILURE : String
        {static} + SQL_STATE_CONNECTION_FAILURE : String
        {static} + SQL_STATE_CONNECTION_IN_USE : String
        {static} + SQL_STATE_CONNECTION_NOT_OPEN : String
        {static} + SQL_STATE_CONNECTION_REJECTED : String
        {static} + SQL_STATE_DATA_TRUNCATED : String
        {static} + SQL_STATE_DATETIME_FIELD_OVERFLOW : String
        {static} + SQL_STATE_DISCONNECT_ERROR : String
        {static} + SQL_STATE_DIVISION_BY_ZERO : String
        {static} + SQL_STATE_DRIVER_NOT_CAPABLE : String
        {static} + SQL_STATE_ERROR_IN_ROW : String
        {static} + SQL_STATE_ER_BAD_FIELD_ERROR : String
        {static} + SQL_STATE_ER_DUP_FIELDNAME : String
        {static} + SQL_STATE_ER_NO_SUCH_INDEX : String
        {static} + SQL_STATE_ER_QUERY_INTERRUPTED : String
        {static} + SQL_STATE_ER_TABLE_EXISTS_ERROR : String
        {static} + SQL_STATE_FEATURE_NOT_SUPPORTED : String
        {static} + SQL_STATE_GENERAL_ERROR : String
        {static} + SQL_STATE_ILLEGAL_ARGUMENT : String
        {static} + SQL_STATE_INDEX_ALREADY_EXISTS : String
        {static} + SQL_STATE_INDEX_NOT_FOUND : String
        {static} + SQL_STATE_INSERT_VALUE_LIST_NO_MATCH_COL_LIST : String
        {static} + SQL_STATE_INTEGRITY_CONSTRAINT_VIOLATION : String
        {static} + SQL_STATE_INVALID_AUTH_SPEC : String
        {static} + SQL_STATE_INVALID_CATALOG_NAME : String
        {static} + SQL_STATE_INVALID_CHARACTER_VALUE_FOR_CAST : String
        {static} + SQL_STATE_INVALID_COLUMN_NUMBER : String
        {static} + SQL_STATE_INVALID_CONDITION_NUMBER : String
        {static} + SQL_STATE_INVALID_CONNECTION_ATTRIBUTE : String
        {static} + SQL_STATE_INVALID_CURSOR_STATE : String
        {static} + SQL_STATE_INVALID_DATETIME_FORMAT : String
        {static} + SQL_STATE_INVALID_LOGARITHM_ARGUMENT : String
        {static} + SQL_STATE_INVALID_TRANSACTION_STATE : String
        {static} + SQL_STATE_INVALID_TRANSACTION_TERMINATION : String
        {static} + SQL_STATE_MEMORY_ALLOCATION_ERROR : String
        {static} + SQL_STATE_MEMORY_ALLOCATION_FAILURE : String
        {static} + SQL_STATE_MORE_THAN_ONE_ROW_UPDATED_OR_DELETED : String
        {static} + SQL_STATE_NO_DATA : String
        {static} + SQL_STATE_NO_DEFAULT_FOR_COLUMN : String
        {static} + SQL_STATE_NO_ROWS_UPDATED_OR_DELETED : String
        {static} + SQL_STATE_NULL_VALUE_NOT_ALLOWED : String
        {static} + SQL_STATE_NUMERIC_VALUE_OUT_OF_RANGE : String
        {static} + SQL_STATE_PRIVILEGE_NOT_REVOKED : String
        {static} + SQL_STATE_READ_ONLY_SQL_TRANSACTION : String
        {static} + SQL_STATE_RESIGNAL_WHEN_HANDLER_NOT_ACTIVE : String
        {static} + SQL_STATE_ROLLBACK_SERIALIZATION_FAILURE : String
        {static} + SQL_STATE_SRE_FUNCTION_EXECUTED_NO_RETURN_STATEMENT : String
        {static} + SQL_STATE_SRE_PROHIBITED_SQL_STATEMENT_ATTEMPTED : String
        {static} + SQL_STATE_STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER : String
        {static} + SQL_STATE_STRING_DATA_RIGHT_TRUNCATION : String
        {static} + SQL_STATE_SYNTAX_ERROR : String
        {static} + SQL_STATE_TIMEOUT_EXPIRED : String
        {static} + SQL_STATE_TRANSACTION_RESOLUTION_UNKNOWN : String
        {static} + SQL_STATE_UNABLE_TO_CONNECT_TO_DATASOURCE : String
        {static} + SQL_STATE_WARNING : String
        {static} + SQL_STATE_WRONG_NO_OF_PARAMETERS : String
        {static} + SQL_STATE_XAER_DUPID : String
        {static} + SQL_STATE_XAER_INVAL : String
        {static} + SQL_STATE_XAER_NOTA : String
        {static} + SQL_STATE_XAER_OUTSIDE : String
        {static} + SQL_STATE_XAER_RMFAIL : String
        {static} + SQL_STATE_XA_RBDEADLOCK : String
        {static} + SQL_STATE_XA_RBROLLBACK : String
        {static} + SQL_STATE_XA_RBTIMEOUT : String
        {static} + SQL_STATE_XA_RMERR : String
        {static} ~ ER_WARNING_NOT_COMPLETE_ROLLBACK : int
        {static} - DEFAULT_WAIT_TIMEOUT_SECONDS : long
        {static} - DUE_TO_TIMEOUT_FALSE : int
        {static} - DUE_TO_TIMEOUT_MAYBE : int
        {static} - DUE_TO_TIMEOUT_TRUE : int
        {static} - JDBC_4_COMMUNICATIONS_EXCEPTION_CTOR : Constructor<?>
        {static} - mysqlToSql99State : Map<Integer, String>
        {static} - mysqlToSqlState : Map<Integer, String>
        {static} - sqlStateMessages : Map<String, String>
        {static} + createBatchUpdateException()
        {static} + createCommunicationsException()
        {static} + createLinkFailureMessageBasedOnHeuristics()
        {static} + createSQLException()
        {static} + createSQLException()
        {static} + createSQLException()
        {static} + createSQLException()
        {static} + createSQLException()
        {static} + createSQLException()
        {static} + createSQLException()
        {static} + createSQLException()
        {static} + createSQLFeatureNotSupportedException()
        {static} + createSQLFeatureNotSupportedException()
        {static} + dumpSqlStatesMappingsAsXml()
        {static} ~ convertShowWarningsToSQLWarnings()
        {static} ~ convertShowWarningsToSQLWarnings()
        {static} ~ get()
        {static} ~ mysqlToSqlState()
        {static} - mysqlToSql99()
        {static} - mysqlToXOpen()
        {static} - runThroughExceptionInterceptor()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Security {
        {static} - CACHING_SHA2_DIGEST_LENGTH : int
        {static} - PVERSION41_CHAR : char
        {static} - SHA1_HASH_SIZE : int
        {static} + scramble411()
        {static} + scrambleCachingSha2()
        {static} + xorString()
        {static} ~ createKeyFromOldPassword()
        {static} ~ getBinaryPassword()
        {static} ~ makeScrambledPassword()
        {static} ~ passwordHashStage1()
        {static} ~ passwordHashStage2()
        - Security()
        {static} - charVal()
        {static} - getSaltFromPassword()
        {static} - longToHex()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.SequentialBalanceStrategy {
        - currentHostIndex : int
        + SequentialBalanceStrategy()
        + destroy()
        + init()
        + pickConnection()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ServerAffinityStrategy {
        {static} + AFFINITY_ORDER : String
        + affinityOrderedServers : String[]
        + init()
        + pickConnection()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ServerPreparedStatement {
        {static} # BLOB_STREAM_READ_BUF_SIZE : int
        # isCached : boolean
        {static} - JDBC_4_SPS_CTOR : Constructor<?>
        - canRewrite : boolean
        - defaultTzCalendar : Calendar
        - detectedLongParameterSwitch : boolean
        - fieldCount : int
        - hasCheckedRewrite : boolean
        - hasOnDuplicateKeyUpdate : boolean
        - invalid : boolean
        - invalidationException : SQLException
        - locationOfOnDuplicateKeyUpdate : int
        - outByteBuffer : Buffer
        - parameterBindings : BindValue[]
        - parameterFields : Field[]
        - resultFields : Field[]
        - sendTypesToServer : boolean
        - serverNeedsResetBeforeEachExecution : boolean
        - serverStatementId : long
        - serverTzCalendar : Calendar
        - stringTypeCode : int
        - useAutoSlowLog : boolean
        + addBatch()
        + asSql()
        + canRewriteAsMultiValueInsertAtSqlLevel()
        + clearParameters()
        + close()
        + getMetaData()
        + getParameterBindValues()
        + getParameterMetaData()
        + setArray()
        + setAsciiStream()
        + setBigDecimal()
        + setBinaryStream()
        + setBlob()
        + setBoolean()
        + setByte()
        + setBytes()
        + setCharacterStream()
        + setClob()
        + setDate()
        + setDate()
        + setDouble()
        + setFloat()
        + setInt()
        + setLong()
        + setNull()
        + setNull()
        + setPoolable()
        + setRef()
        + setShort()
        + setString()
        + setTime()
        + setTime()
        + setTimestamp()
        + setTimestamp()
        + setURL()
        + setUnicodeStream()
        + toString()
        # ServerPreparedStatement()
        # checkClosed()
        # computeMaxParameterSetSizeAndBatchSize()
        # containsOnDuplicateKeyUpdateInSQL()
        # executeBatchSerially()
        # executeInternal()
        # fillSendPacket()
        # fillSendPacket()
        # getBinding()
        {static} # getInstance()
        # getLocationOfOnDuplicateKeyUpdate()
        # getServerStatementId()
        # isOnDuplicateKeyUpdate()
        # prepareBatchedInsertSQL()
        # rePrepare()
        # realClose()
        # resetToType()
        # setClosed()
        # setOneBatchedParameterSet()
        ~ getBytes()
        ~ isCursorRequired()
        ~ isNull()
        - clearParametersInternal()
        - dumpCloseForTestcase()
        - dumpExecuteForTestcase()
        - dumpPrepareForTestcase()
        - getDefaultTzCalendar()
        - getServerTzCalendar()
        - serverExecute()
        - serverLongData()
        - serverPrepare()
        - serverResetStatement()
        - setTimeInternal()
        - setTimestampInternal()
        - storeBinding()
        - storeDateTime()
        - storeDateTime412AndOlder()
        - storeDateTime413AndNewer()
        - storeReader()
        - storeStream()
        - storeTime()
        - truncateQueryToLog()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ServerPreparedStatement.BatchedBindValues {
        + batchedParameterValues : BindValue[]
        ~ BatchedBindValues()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.ServerPreparedStatement.BindValue {
        + bindLength : long
        + boundBeforeExecutionNum : long
        + bufferType : int
        + calendar : Calendar
        + doubleBinding : double
        + floatBinding : float
        + isLongData : boolean
        + isNull : boolean
        + isSet : boolean
        + longBinding : long
        + value : Object
        + toString()
        + toString()
        ~ BindValue()
        ~ BindValue()
        ~ getBoundLength()
        ~ reset()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.SingleByteCharsetConverter {
        {static} - BYTE_RANGE : int
        {static} - CONVERTER_MAP : Map<String, SingleByteCharsetConverter>
        {static} - EMPTY_BYTE_ARRAY : byte[]
        {static} - allBytes : byte[]
        - byteToChars : char[]
        - charToByteMap : byte[]
        {static} - unknownCharsMap : byte[]
        {static} + getInstance()
        {static} + initCharset()
        + toBytes()
        + toBytes()
        + toBytes()
        + toBytes()
        + toBytesWrapped()
        + toBytesWrapped()
        + toString()
        + toString()
        {static} + toStringDefaultEncoding()
        - SingleByteCharsetConverter()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.SocketFactory {
        {abstract} + afterHandshake()
        {abstract} + beforeHandshake()
        {abstract} + connect()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.SocketMetadata {
        {abstract} + isLocallyConnected()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.SocketMetadata.Helper {
        {static} + IS_LOCAL_HOSTNAME_REPLACEMENT_PROPERTY_NAME : String
        {static} + isLocallyConnected()
        {static} - findProcessHost()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.SocksProxySocketFactory {
        {static} + SOCKS_DEFAULT_PORT : int
        # createSocket()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.StandardLoadBalanceExceptionChecker {
        - sqlExClassList : List<Class<?>>
        - sqlStateList : List<String>
        + destroy()
        + init()
        + shouldExceptionTriggerFailover()
        - configureSQLExceptionSubclassList()
        - configureSQLStateList()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.StandardSocketFactory {
        {static} + TCP_KEEP_ALIVE_DEFAULT_VALUE : String
        {static} + TCP_KEEP_ALIVE_PROPERTY_NAME : String
        {static} + TCP_NO_DELAY_DEFAULT_VALUE : String
        {static} + TCP_NO_DELAY_PROPERTY_NAME : String
        {static} + TCP_RCV_BUF_DEFAULT_VALUE : String
        {static} + TCP_RCV_BUF_PROPERTY_NAME : String
        {static} + TCP_SND_BUF_DEFAULT_VALUE : String
        {static} + TCP_SND_BUF_PROPERTY_NAME : String
        {static} + TCP_TRAFFIC_CLASS_DEFAULT_VALUE : String
        {static} + TCP_TRAFFIC_CLASS_PROPERTY_NAME : String
        # host : String
        # loginTimeoutCheckTimestamp : long
        # loginTimeoutCountdown : int
        # port : int
        # rawSocket : Socket
        # socketTimeoutBackup : int
        + afterHandshake()
        + beforeHandshake()
        + connect()
        + isLocallyConnected()
        # createSocket()
        # getRealTimeout()
        # resetLoginTimeCountdown()
        - configureSocket()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.Statement {
        {abstract} + disableStreamingResults()
        {abstract} + enableStreamingResults()
        {abstract} + getExceptionInterceptor()
        {abstract} + getId()
        {abstract} + getLocalInfileInputStream()
        {abstract} + getOpenResultSetCount()
        {abstract} + removeOpenResultSet()
        {abstract} + setHoldResultsOpenOverClose()
        {abstract} + setLocalInfileInputStream()
        {abstract} + setPingTarget()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.StatementImpl {
        {static} + USES_VARIABLES_FALSE : byte
        {static} + USES_VARIABLES_TRUE : byte
        {static} + USES_VARIABLES_UNKNOWN : byte
        {static} # ON_DUPLICATE_KEY_UPDATE_CLAUSE : String[]
        {static} # PING_MARKER : String
        # batchedArgs : List<Object>
        # batchedGeneratedKeys : ArrayList<ResultSetRow>
        # cancelTimeoutMutex : Object
        # charConverter : SingleByteCharsetConverter
        # charEncoding : String
        # clearWarningsCalled : boolean
        # connection : MySQLConnection
        # continueBatchOnError : boolean
        # currentCatalog : String
        # doEscapeProcessing : boolean
        # generatedKeysResults : ResultSetInternalMethods
        # holdResultsOpenOverClose : boolean
        # isClosed : boolean
        # lastInsertId : long
        # lastQueryIsOnDupKeyUpdate : boolean
        # maxFieldSize : int
        # maxRows : int
        # openResults : Set<ResultSetInternalMethods>
        # pedantic : boolean
        # physicalConnection : Reference<MySQLConnection>
        # pingTarget : PingTarget
        # profileSQL : boolean
        # resultSetConcurrency : int
        # resultSetType : int
        # results : ResultSetInternalMethods
        # retrieveGeneratedKeys : boolean
        # sendFractionalSeconds : boolean
        # statementExecuting : AtomicBoolean
        # statementId : int
        # timeoutInMillis : int
        # updateCount : long
        # useLegacyDatetimeCode : boolean
        # useUsageAdvisor : boolean
        # version5013OrNewer : boolean
        # warningChain : SQLWarning
        # wasCancelled : boolean
        # wasCancelledByTimeout : boolean
        {static} ~ statementCounter : int
        - closeOnCompletion : boolean
        - exceptionInterceptor : ExceptionInterceptor
        - fetchSize : int
        - isImplicitlyClosingResults : boolean
        - isPoolable : boolean
        - localInfileInputStream : InputStream
        - originalFetchSize : int
        - originalResultSetType : int
        + StatementImpl()
        + addBatch()
        + cancel()
        + clearBatch()
        + clearWarnings()
        + close()
        + closeOnCompletion()
        + disableStreamingResults()
        + enableStreamingResults()
        + execute()
        + execute()
        + execute()
        + execute()
        + executeBatch()
        + executeLargeBatch()
        + executeLargeUpdate()
        + executeLargeUpdate()
        + executeLargeUpdate()
        + executeLargeUpdate()
        + executeQuery()
        + executeUpdate()
        + executeUpdate()
        + executeUpdate()
        + executeUpdate()
        + getBatchedArgs()
        + getConnection()
        + getExceptionInterceptor()
        + getFetchDirection()
        + getFetchSize()
        + getGeneratedKeys()
        + getId()
        + getLargeMaxRows()
        + getLargeUpdateCount()
        + getLastInsertID()
        + getLocalInfileInputStream()
        + getLongUpdateCount()
        + getMaxFieldSize()
        + getMaxRows()
        + getMoreResults()
        + getMoreResults()
        + getOpenResultSetCount()
        + getQueryTimeout()
        + getResultSet()
        + getResultSetConcurrency()
        + getResultSetHoldability()
        + getResultSetType()
        + getUpdateCount()
        + getWarnings()
        + isCloseOnCompletion()
        + isClosed()
        + isPoolable()
        + isWrapperFor()
        + removeOpenResultSet()
        + setCursorName()
        + setEscapeProcessing()
        + setFetchDirection()
        + setFetchSize()
        + setHoldResultsOpenOverClose()
        + setLargeMaxRows()
        + setLocalInfileInputStream()
        + setMaxFieldSize()
        + setMaxRows()
        + setPingTarget()
        + setPoolable()
        + setQueryTimeout()
        + unwrap()
        # checkClosed()
        # checkForDml()
        # checkNullOrEmptyQuery()
        # closeAllOpenResults()
        # containsOnDuplicateKeyInString()
        # createStreamingResultSet()
        # doPingInstead()
        # executeBatchInternal()
        # executeSimpleNonQuery()
        # executeUpdateInternal()
        {static} # findStartOfStatement()
        # generatePingResultSet()
        # getBatchedGeneratedKeys()
        # getBatchedGeneratedKeys()
        # getCalendarInstanceForSessionOrNew()
        # getGeneratedKeysInternal()
        # getGeneratedKeysInternal()
        {static} # getOnDuplicateKeyLocation()
        # getResultSetInternal()
        # handleExceptionForBatch()
        # hasDeadlockOrTimeoutRolledBackTx()
        # implicitlyCloseAllOpenResults()
        # processMultiCountsAndKeys()
        # realClose()
        # resetCancelledState()
        # setupStreamingTimeout()
        # statementBegins()
        ~ isCursorRequired()
        ~ setResultSetConcurrency()
        ~ setResultSetType()
        - checkAndPerformCloseOnCompletionAction()
        - createResultSetUsingServerFetch()
        - executeBatchUsingMultiQueries()
        - executeInternal()
        - getRecordCountFromInfo()
        - useServerFetch()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.StatementImpl.CancelTask {
        ~ caughtWhileCancelling : SQLException
        ~ origConnId : long
        ~ origConnProps : Properties
        ~ origConnURL : String
        + run()
        ~ CancelTask()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.StatementInterceptor {
        {abstract} + destroy()
        {abstract} + executeTopLevelOnly()
        {abstract} + init()
        {abstract} + postProcess()
        {abstract} + preProcess()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.StatementInterceptorV2 {
        {abstract} + destroy()
        {abstract} + executeTopLevelOnly()
        {abstract} + init()
        {abstract} + postProcess()
        {abstract} + preProcess()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.StreamingNotifiable {
        {abstract} + setWasStreamingResults()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.StringUtils {
        {static} + SEARCH_MODE__ALL : Set<SearchMode>
        {static} + SEARCH_MODE__BSESC_COM_WS : Set<SearchMode>
        {static} + SEARCH_MODE__BSESC_MRK_WS : Set<SearchMode>
        {static} + SEARCH_MODE__COM_WS : Set<SearchMode>
        {static} + SEARCH_MODE__MRK_COM_WS : Set<SearchMode>
        {static} + SEARCH_MODE__MRK_WS : Set<SearchMode>
        {static} + SEARCH_MODE__NONE : Set<SearchMode>
        {static} ~ WILDCARD_ESCAPE : char
        {static} ~ WILDCARD_MANY : char
        {static} ~ WILDCARD_ONE : char
        {static} - BYTE_RANGE : int
        {static} - HEX_DIGITS : char[]
        {static} - NON_COMMENTS_MYSQL_VERSION_REF_LENGTH : int
        {static} - VALID_ID_CHARS : String
        {static} - WILD_COMPARE_CONTINUE_WITH_WILD : int
        {static} - WILD_COMPARE_MATCH : int
        {static} - WILD_COMPARE_NO_MATCH : int
        {static} - allBytes : byte[]
        {static} - byteToChars : char[]
        {static} - charsetsByAlias : ConcurrentHashMap<String, Charset>
        {static} - platformEncoding : String
        {static} - toPlainStringMethod : Method
        {static} + appendAsHex()
        {static} + appendAsHex()
        {static} + consistentToString()
        {static} + dumpAsHex()
        {static} + escapeEasternUnicodeByteStream()
        {static} + escapeQuote()
        {static} + firstAlphaCharUc()
        {static} + firstNonWsCharUc()
        {static} + firstNonWsCharUc()
        {static} + fixDecimalExponent()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytes()
        {static} + getBytesNullTerminated()
        {static} + getBytesWrapped()
        {static} + getInt()
        {static} + getInt()
        {static} + getLong()
        {static} + getLong()
        {static} + getShort()
        {static} + getShort()
        {static} + indexOf()
        {static} + indexOfIgnoreCase()
        {static} + indexOfIgnoreCase()
        {static} + indexOfIgnoreCase()
        {static} + indexOfIgnoreCase()
        {static} + indexOfIgnoreCase()
        {static} + indexOfQuoteDoubleAware()
        {static} + isEmptyOrWhitespaceOnly()
        {static} + isNullOrEmpty()
        {static} + isStrictlyNumeric()
        {static} + isValidIdChar()
        {static} + lastIndexOf()
        {static} + quoteIdentifier()
        {static} + quoteIdentifier()
        {static} + sanitizeProcOrFuncName()
        {static} + split()
        {static} + split()
        {static} + split()
        {static} + splitDBdotName()
        {static} + startsWithIgnoreCase()
        {static} + startsWithIgnoreCase()
        {static} + startsWithIgnoreCaseAndNonAlphaNumeric()
        {static} + startsWithIgnoreCaseAndWs()
        {static} + startsWithIgnoreCaseAndWs()
        {static} + startsWithIgnoreCaseAndWs()
        {static} + stripComments()
        {static} + stripEnclosure()
        {static} + toAsciiString()
        {static} + toAsciiString()
        {static} + toString()
        {static} + toString()
        {static} + toString()
        {static} + toString()
        {static} + unQuoteIdentifier()
        {static} + wildCompareIgnoreCase()
        {static} ~ findCharset()
        {static} ~ s2b()
        {static} - endsWith()
        {static} - indexOfNextChar()
        {static} - isCharAtPosNotEqualIgnoreCase()
        {static} - isCharEqualIgnoreCase()
        {static} - startsWith()
        {static} - wildCompareInternal()
    }
  }
  

  namespace com.mysql.jdbc {
    enum SearchMode {
      ALLOW_BACKSLASH_ESCAPE
      SKIP_BETWEEN_MARKERS
      SKIP_BLOCK_COMMENTS
      SKIP_LINE_COMMENTS
      SKIP_WHITE_SPACE
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.TimeUtil {
        {static} # systemNanoTimeMethod : Method
        {static} ~ GMT_TIMEZONE : TimeZone
        {static} - DEFAULT_TIMEZONE : TimeZone
        {static} - TIME_ZONE_MAPPINGS_RESOURCE : String
        {static} - timeZoneMappings : Properties
        {static} + adjustTimestampNanosPrecision()
        {static} + changeTimezone()
        {static} + changeTimezone()
        {static} + formatNanos()
        {static} + getCanonicalTimezone()
        {static} + getCurrentTimeNanosOrMillis()
        {static} + getDefaultTimeZone()
        {static} + getSimpleDateFormat()
        {static} + nanoTimeAvailable()
        {static} + setProlepticIfNeeded()
        {static} + truncateFractionalSeconds()
        {static} ~ fastDateCreate()
        {static} ~ fastDateCreate()
        {static} ~ fastTimeCreate()
        {static} ~ fastTimeCreate()
        {static} ~ fastTimestampCreate()
        {static} ~ fastTimestampCreate()
        {static} - jdbcCompliantZoneShift()
        {static} - loadTimeZoneMappings()
        {static} - timeFormattedString()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.UpdatableResultSet {
        # charConverter : SingleByteCharsetConverter
        # inserter : PreparedStatement
        # updater : PreparedStatement
        {static} ~ STREAM_DATA_MARKER : byte[]
        - charEncoding : String
        - databasesUsedToTablesUsed : Map<String, Map<String, Map<String, Integer>>>
        - defaultColumnValue : byte[][]
        - deleteSQL : String
        - deleter : PreparedStatement
        - initializedCharConverter : boolean
        - insertSQL : String
        - isUpdatable : boolean
        - notUpdatableReason : String
        - populateInserterWithDefaultValues : boolean
        - primaryKeyIndicies : List<Integer>
        - qualifiedAndQuotedTableName : String
        - quotedIdChar : String
        - refreshSQL : String
        - refresher : PreparedStatement
        - savedCurrentRow : ResultSetRow
        - updateSQL : String
        + absolute()
        + afterLast()
        + beforeFirst()
        + cancelRowUpdates()
        + deleteRow()
        + first()
        + getConcurrency()
        + insertRow()
        + isAfterLast()
        + isBeforeFirst()
        + isFirst()
        + isLast()
        + last()
        + moveToCurrentRow()
        + moveToInsertRow()
        + next()
        + prev()
        + previous()
        + realClose()
        + refreshRow()
        + relative()
        + rowDeleted()
        + rowInserted()
        + rowUpdated()
        + updateAsciiStream()
        + updateAsciiStream()
        + updateBigDecimal()
        + updateBigDecimal()
        + updateBinaryStream()
        + updateBinaryStream()
        + updateBlob()
        + updateBlob()
        + updateBoolean()
        + updateBoolean()
        + updateByte()
        + updateByte()
        + updateBytes()
        + updateBytes()
        + updateCharacterStream()
        + updateCharacterStream()
        + updateClob()
        + updateDate()
        + updateDate()
        + updateDouble()
        + updateDouble()
        + updateFloat()
        + updateFloat()
        + updateInt()
        + updateInt()
        + updateLong()
        + updateLong()
        + updateNull()
        + updateNull()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateObject()
        + updateRow()
        + updateShort()
        + updateShort()
        + updateString()
        + updateString()
        + updateTime()
        + updateTime()
        + updateTimestamp()
        + updateTimestamp()
        # UpdatableResultSet()
        # checkRowPos()
        # checkUpdatability()
        # generateStatements()
        # setResultSetConcurrency()
        # syncUpdate()
        # updateObjectInternal()
        ~ isUpdatable()
        - extractDefaultValues()
        - getCharConverter()
        - getColumnsToIndexMapForTableAndDB()
        - getQuotedIdChar()
        - refreshRow()
        - resetInserter()
        - setParamValue()
        - stripBinaryPrefix()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Util {
        {static} - MYSQL_JDBC_PACKAGE_ROOT : String
        {static} - enclosingInstance : Util
        {static} - implementedInterfacesCache : ConcurrentMap<Class<?>, Class<?>[]>
        {static} - isColdFusion : boolean
        {static} - isJdbc4 : boolean
        {static} - isJdbc42 : boolean
        {static} - isJdbcInterfaceCache : ConcurrentMap<Class<?>, Boolean>
        {static} - jvmUpdateNumber : int
        {static} - jvmVersion : int
        {static} + calculateDifferences()
        {static} + getImplementedInterfaces()
        {static} + getInstance()
        {static} + getJVMUpdateNumber()
        {static} + getJVMVersion()
        {static} + getPackageName()
        {static} + handleNewInstance()
        {static} + hashPre41Password()
        {static} + hashPre41Password()
        {static} + interfaceExists()
        {static} + isColdFusion()
        {static} + isCommunityEdition()
        {static} + isEnterpriseEdition()
        {static} + isJdbc4()
        {static} + isJdbc42()
        {static} + isJdbcInterface()
        {static} + isJdbcPackage()
        {static} + jvmMeetsMinimum()
        {static} + loadExtensions()
        {static} + newCrypt()
        {static} + oldCrypt()
        {static} + scramble()
        {static} + secondsSinceMillis()
        {static} + stackTraceToString()
        {static} + truncateAndConvertToInt()
        {static} + truncateAndConvertToInt()
        {static} ~ newHash()
        {static} ~ oldHash()
        {static} - randomInit()
        {static} - rnd()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.Util.RandStructcture {
        ~ maxValue : long
        ~ maxValueDbl : double
        ~ seed1 : long
        ~ seed2 : long
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.V1toV2StatementInterceptorAdapter {
        - toProxy : StatementInterceptor
        + V1toV2StatementInterceptorAdapter()
        + destroy()
        + executeTopLevelOnly()
        + init()
        + postProcess()
        + preProcess()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.WatchableOutputStream {
        - watcher : OutputStreamWatcher
        + close()
        + setWatcher()
    }
  }
  

  namespace com.mysql.jdbc {
    class com.mysql.jdbc.WatchableWriter {
        - watcher : WriterWatcher
        + close()
        + setWatcher()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.Wrapper {
        {abstract} + isWrapperFor()
        {abstract} + unwrap()
    }
  }
  

  namespace com.mysql.jdbc {
    interface com.mysql.jdbc.WriterWatcher {
        {abstract} + writerClosed()
    }
  }
  

  com.mysql.jdbc.AbandonedConnectionCleanupThread .up.|> Runnable
  com.mysql.jdbc.AbandonedConnectionCleanupThread +-down- com.mysql.jdbc.AbandonedConnectionCleanupThread.ConnectionFinalizerPhantomReference
  com.mysql.jdbc.BestResponseTimeBalanceStrategy .up.|> BalanceStrategy
  com.mysql.jdbc.Blob .up.|> OutputStreamWatcher
  com.mysql.jdbc.Blob .up.|> java.sql.Blob
  com.mysql.jdbc.BlobFromLocator .up.|> java.sql.Blob
  com.mysql.jdbc.BlobFromLocator +-down- com.mysql.jdbc.BlobFromLocator.LocatorInputStream
  com.mysql.jdbc.CallableStatement .up.|> java.sql.CallableStatement
  com.mysql.jdbc.CallableStatement o-- com.mysql.jdbc.CallableStatement.CallableStatementParamInfo : paramInfo
  com.mysql.jdbc.CallableStatement o-- com.mysql.jdbc.CallableStatement.CallableStatementParam : returnValueParam
  com.mysql.jdbc.CallableStatement +-down- com.mysql.jdbc.CallableStatement.CallableStatementParam
  com.mysql.jdbc.CallableStatement +-down- com.mysql.jdbc.CallableStatement.CallableStatementParamInfo
  com.mysql.jdbc.CallableStatement.CallableStatementParamInfo .up.|> ParameterMetaData
  com.mysql.jdbc.Clob .up.|> OutputStreamWatcher
  com.mysql.jdbc.Clob .up.|> WriterWatcher
  com.mysql.jdbc.Clob .up.|> java.sql.Clob
  com.mysql.jdbc.Collation o-- com.mysql.jdbc.MysqlCharset : mysqlCharset
  com.mysql.jdbc.CommunicationsException .up.|> StreamingNotifiable
  com.mysql.jdbc.ConnectionImpl .up.|> MySQLConnection
  com.mysql.jdbc.ConnectionImpl +-down- com.mysql.jdbc.ConnectionImpl.CompoundCacheKey
  com.mysql.jdbc.ConnectionImpl +-down- com.mysql.jdbc.ConnectionImpl.ExceptionInterceptorChain
  com.mysql.jdbc.ConnectionImpl +-down- com.mysql.jdbc.ConnectionImpl.NetworkTimeoutSetter
  com.mysql.jdbc.ConnectionImpl.ExceptionInterceptorChain .up.|> ExceptionInterceptor
  com.mysql.jdbc.ConnectionImpl.NetworkTimeoutSetter .up.|> Runnable
  com.mysql.jdbc.ConnectionPropertiesImpl .up.|> ConnectionProperties
  com.mysql.jdbc.ConnectionPropertiesImpl .up.|> Serializable
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.MemorySizeConnectionProperty : largeRowSizeThreshold
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : traceProtocol
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : allowLoadLocalInfile
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : allowMasterDownConnections
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : allowMultiQueries
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : allowNanAndInf
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : allowPublicKeyRetrieval
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : allowSlaveDownConnections
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : allowUrlInLocalInfile
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : alwaysSendSetIsolation
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : authenticationPlugins
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : autoClosePStmtStreams
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : autoDeserialize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : autoGenerateTestcaseScript
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : autoReconnect
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : autoReconnectForPools
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : autoSlowLog
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.MemorySizeConnectionProperty : blobSendChunkSize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : blobsAreStrings
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : cacheCallableStatements
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : cacheDefaultTimezone
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : cachePreparedStatements
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : cacheResultSetMetadata
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : cacheServerConfiguration
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : callableStatementCacheSize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : capitalizeTypeNames
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : characterEncoding
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : characterSetResults
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : clientCertificateKeyStorePassword
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : clientCertificateKeyStoreType
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : clientCertificateKeyStoreUrl
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : clientInfoProvider
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : clobCharacterEncoding
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : clobberStreamingResults
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : compensateOnDuplicateKeyUpdateCounts
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : connectTimeout
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : connectionAttributes
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : connectionCollation
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : connectionLifecycleInterceptors
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : continueBatchOnError
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : createDatabaseIfNotExist
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : defaultAuthenticationPlugin
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : defaultFetchSize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : detectCustomCollations
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : detectServerPreparedStmts
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : disabledAuthenticationPlugins
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : disconnectOnExpiredPasswords
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : dontCheckOnDuplicateKeyUpdateInSQL
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : dontTrackOpenResources
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : dumpMetadataOnColumnNotFound
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : dumpQueriesOnException
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : dynamicCalendars
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : elideSetAutoCommits
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : emptyStringsConvertToZero
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : emulateLocators
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : emulateUnsupportedPstmts
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : enableEscapeProcessing
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : enablePacketDebug
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : enableQueryTimeouts
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : enabledSSLCipherSuites
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : enabledTLSProtocols
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : exceptionInterceptors
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : explainSlowQueries
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : failOverReadOnly
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : functionsNeverReturnBlobs
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : gatherPerformanceMetrics
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : generateSimpleParameterMetadata
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : getProceduresReturnsFunctions
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : holdResultsOpenOverStatementClose
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : ignoreNonTxTables
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : includeInnodbStatusInDeadlockExceptions
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : includeThreadDumpInDeadlockExceptions
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : includeThreadNamesAsStatementComment
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : initialTimeout
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : isInteractiveClient
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : jdbcCompliantTruncation
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : loadBalanceAutoCommitStatementRegex
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : loadBalanceAutoCommitStatementThreshold
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : loadBalanceBlacklistTimeout
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : loadBalanceConnectionGroup
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : loadBalanceEnableJMX
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : loadBalanceExceptionChecker
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : loadBalanceHostRemovalGracePeriod
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : loadBalancePingTimeout
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : loadBalanceSQLExceptionSubclassFailover
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : loadBalanceSQLStateFailover
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : loadBalanceStrategy
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : loadBalanceValidateConnectionOnSwapServer
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : localSocketAddress
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.MemorySizeConnectionProperty : locatorFetchBufferSize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : logSlowQueries
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : logXaCommands
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : loggerClassName
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : maintainTimeStats
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : maxAllowedPacket
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : maxQuerySizeToLog
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : maxReconnects
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : maxRows
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : metadataCacheSize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : netTimeoutForStreamingResults
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : noAccessToProcedureBodies
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : noDatetimeStringSync
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : noTimezoneConversionForDateType
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : noTimezoneConversionForTimeType
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : nullCatalogMeansCurrent
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : nullNamePatternMatchesAll
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : overrideSupportsIntegrityEnhancementFacility
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : packetDebugBufferSize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : padCharsWithSpace
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : paranoid
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : parseInfoCacheFactory
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : passwordCharacterEncoding
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : pedantic
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : pinGlobalTxToPhysicalConnection
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : populateInsertRowWithDefaultValues
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : preparedStatementCacheSize
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : preparedStatementCacheSqlLimit
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : processEscapeCodesForPrepStmts
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : profileSQL
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : profileSql
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : profilerEventHandler
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : propertiesTransform
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : queriesBeforeRetryMaster
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : queryTimeoutKillsConnection
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : readFromMasterWhenNoSlaves
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : readOnlyPropagatesToServer
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : reconnectAtTxEnd
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : relaxAutoCommit
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : replicationConnectionGroup
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : replicationEnableJMX
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : reportMetricsIntervalMillis
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : requireSSL
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : resourceId
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : resultSetSizeThreshold
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : retainStatementAfterResultSetClose
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : retriesAllDown
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : rewriteBatchedStatements
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : rollbackOnPooledClose
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : roundRobinLoadBalance
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : runningCTS13
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : secondsBeforeRetryMaster
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : selfDestructOnPingMaxOperations
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : selfDestructOnPingSecondsLifetime
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : sendFractionalSeconds
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : serverAffinityOrder
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : serverConfigCacheFactory
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : serverRSAPublicKeyFile
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : serverTimezone
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : sessionVariables
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : slowQueryThresholdMillis
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.LongConnectionProperty : slowQueryThresholdNanos
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : socketFactoryClassName
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : socketTimeout
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : socksProxyHost
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : socksProxyPort
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : statementInterceptors
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : strictFloatingPoint
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : strictUpdates
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : tcpKeepAlive
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : tcpNoDelay
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : tcpRcvBuf
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : tcpSndBuf
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty : tcpTrafficClass
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : tinyInt1isBit
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : transformedBitIsBoolean
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : treatUtilDateAsTimestamp
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : trustCertificateKeyStorePassword
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : trustCertificateKeyStoreType
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : trustCertificateKeyStoreUrl
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useAffectedRows
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useBlobToStoreUTF8OutsideBMP
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useColumnNamesInFindColumn
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useCompression
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : useConfigs
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useCursorFetch
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useDirectRowUnpack
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useDynamicCharsetInfo
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useFastDateParsing
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useFastIntParsing
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useGmtMillisForDatetimes
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useHostsInPrivileges
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useInformationSchema
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useJDBCCompliantTimezoneShift
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useJvmCharsetConverters
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useLegacyDatetimeCode
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useLocalSessionState
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useLocalTransactionState
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useNanosForElapsedTime
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useOldAliasMetadataBehavior
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useOldUTF8Behavior
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useOnlyServerErrorMessages
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useReadAheadInput
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useSSL
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useSSPSCompatibleTimezoneShift
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useSqlStateCodes
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useStreamLengthsInPrepStmts
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useTimezone
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useUltraDevWorkAround
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useUnbufferedInput
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useUnicode
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : useUsageAdvisor
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : utf8OutsideBmpExcludedColumnNamePattern
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : utf8OutsideBmpIncludedColumnNamePattern
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : verifyServerCertificate
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty : yearIsDateType
  com.mysql.jdbc.ConnectionPropertiesImpl o-- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty : zeroDateTimeBehavior
  com.mysql.jdbc.ConnectionPropertiesImpl +-down- com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl +-down- com.mysql.jdbc.ConnectionPropertiesImpl.ConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl +-down- com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl +-down- com.mysql.jdbc.ConnectionPropertiesImpl.LongConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl +-down- com.mysql.jdbc.ConnectionPropertiesImpl.MemorySizeConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl +-down- com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl +-down- com.mysql.jdbc.ConnectionPropertiesImpl.XmlMap
  com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty .up.|> Serializable
  com.mysql.jdbc.ConnectionPropertiesImpl.BooleanConnectionProperty -up-|> com.mysql.jdbc.ConnectionPropertiesImpl.ConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl.ConnectionProperty .up.|> Serializable
  com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty .up.|> Serializable
  com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty -up-|> com.mysql.jdbc.ConnectionPropertiesImpl.ConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl.LongConnectionProperty -up-|> com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl.MemorySizeConnectionProperty .up.|> Serializable
  com.mysql.jdbc.ConnectionPropertiesImpl.MemorySizeConnectionProperty -up-|> com.mysql.jdbc.ConnectionPropertiesImpl.IntegerConnectionProperty
  com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty .up.|> Serializable
  com.mysql.jdbc.ConnectionPropertiesImpl.StringConnectionProperty -up-|> com.mysql.jdbc.ConnectionPropertiesImpl.ConnectionProperty
  com.mysql.jdbc.DatabaseMetaData .up.|> java.sql.DatabaseMetaData
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.ComparableWrapper
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.IndexMetaDataKey
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.IteratorWithCleanup
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.LocalAndReferencedColumns
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.ProcedureType
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.ResultSetIterator
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.SingleStringIterator
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.TableMetaDataKey
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.TableType
  com.mysql.jdbc.DatabaseMetaData +-down- com.mysql.jdbc.DatabaseMetaData.TypeDescriptor
  com.mysql.jdbc.DatabaseMetaData.ComparableWrapper .up.|> Comparable
  com.mysql.jdbc.DatabaseMetaData.ComparableWrapper o-- K : key
  com.mysql.jdbc.DatabaseMetaData.ComparableWrapper o-- V : value
  com.mysql.jdbc.DatabaseMetaData.IndexMetaDataKey .up.|> Comparable
  com.mysql.jdbc.DatabaseMetaData.ResultSetIterator -up-|> com.mysql.jdbc.DatabaseMetaData.IteratorWithCleanup
  com.mysql.jdbc.DatabaseMetaData.SingleStringIterator -up-|> com.mysql.jdbc.DatabaseMetaData.IteratorWithCleanup
  com.mysql.jdbc.DatabaseMetaData.TableMetaDataKey .up.|> Comparable
  com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema +-down- com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema.JDBC4FunctionConstant
  com.mysql.jdbc.Driver .up.|> java.sql.Driver
  com.mysql.jdbc.ExportControlled +-down- com.mysql.jdbc.ExportControlled.StandardSSLSocketFactory
  com.mysql.jdbc.ExportControlled +-down- com.mysql.jdbc.ExportControlled.X509TrustManagerWrapper
  com.mysql.jdbc.ExportControlled.StandardSSLSocketFactory .up.|> SocketFactory
  com.mysql.jdbc.ExportControlled.StandardSSLSocketFactory .up.|> SocketMetadata
  com.mysql.jdbc.ExportControlled.X509TrustManagerWrapper .up.|> X509TrustManager
  com.mysql.jdbc.FailoverConnectionProxy +-down- com.mysql.jdbc.FailoverConnectionProxy.FailoverJdbcInterfaceProxy
  com.mysql.jdbc.JDBC4ClientInfoProviderSP .up.|> JDBC4ClientInfoProvider
  com.mysql.jdbc.JDBC4CommentClientInfoProvider .up.|> JDBC4ClientInfoProvider
  com.mysql.jdbc.JDBC4Connection .up.|> JDBC4MySQLConnection
  com.mysql.jdbc.JDBC4LoadBalancedMySQLConnection .up.|> JDBC4MySQLConnection
  com.mysql.jdbc.JDBC4MultiHostMySQLConnection .up.|> JDBC4MySQLConnection
  com.mysql.jdbc.JDBC4MysqlSQLXML .up.|> SQLXML
  com.mysql.jdbc.JDBC4MysqlSQLXML o-- com.mysql.jdbc.JDBC4MysqlSQLXML.SimpleSaxToReader : saxToReaderConverter
  com.mysql.jdbc.JDBC4MysqlSQLXML +-down- com.mysql.jdbc.JDBC4MysqlSQLXML.SimpleSaxToReader
  com.mysql.jdbc.JDBC4NClob .up.|> java.sql.NClob
  com.mysql.jdbc.JDBC4ReplicationMySQLConnection .up.|> JDBC4MySQLConnection
  com.mysql.jdbc.LoadBalancedAutoCommitInterceptor .up.|> StatementInterceptorV2
  com.mysql.jdbc.LoadBalancedConnectionProxy .up.|> PingTarget
  com.mysql.jdbc.LoadBalancedConnectionProxy +-down- com.mysql.jdbc.LoadBalancedConnectionProxy.NullLoadBalancedConnectionProxy
  com.mysql.jdbc.LoadBalancedConnectionProxy.NullLoadBalancedConnectionProxy .up.|> InvocationHandler
  com.mysql.jdbc.LoadBalancedMySQLConnection .up.|> LoadBalancedConnection
  com.mysql.jdbc.MultiHostConnectionProxy .up.|> InvocationHandler
  com.mysql.jdbc.MultiHostConnectionProxy +-down- com.mysql.jdbc.MultiHostConnectionProxy.JdbcInterfaceProxy
  com.mysql.jdbc.MultiHostConnectionProxy.JdbcInterfaceProxy .up.|> InvocationHandler
  com.mysql.jdbc.MultiHostMySQLConnection .up.|> MySQLConnection
  com.mysql.jdbc.MysqlParameterMetadata .up.|> ParameterMetaData
  com.mysql.jdbc.MysqlSavepoint .up.|> Savepoint
  com.mysql.jdbc.NamedPipeSocketFactory .up.|> SocketFactory
  com.mysql.jdbc.NamedPipeSocketFactory .up.|> SocketMetadata
  com.mysql.jdbc.NamedPipeSocketFactory +-down- com.mysql.jdbc.NamedPipeSocketFactory.NamedPipeSocket
  com.mysql.jdbc.NamedPipeSocketFactory +-down- com.mysql.jdbc.NamedPipeSocketFactory.RandomAccessFileInputStream
  com.mysql.jdbc.NamedPipeSocketFactory +-down- com.mysql.jdbc.NamedPipeSocketFactory.RandomAccessFileOutputStream
  com.mysql.jdbc.NoSubInterceptorWrapper .up.|> StatementInterceptorV2
  com.mysql.jdbc.NonRegisteringDriver .up.|> java.sql.Driver
  com.mysql.jdbc.PerConnectionLRUFactory .up.|> CacheAdapterFactory
  com.mysql.jdbc.PerConnectionLRUFactory +-down- com.mysql.jdbc.PerConnectionLRUFactory.PerConnectionLRU
  com.mysql.jdbc.PerConnectionLRUFactory.PerConnectionLRU .up.|> CacheAdapter
  com.mysql.jdbc.PerVmServerConfigCacheFactory .up.|> CacheAdapterFactory
  com.mysql.jdbc.PreparedStatement .up.|> java.sql.PreparedStatement
  com.mysql.jdbc.PreparedStatement o-- com.mysql.jdbc.PreparedStatement.ParseInfo : parseInfo
  com.mysql.jdbc.PreparedStatement +-down- com.mysql.jdbc.PreparedStatement.AppendingBatchVisitor
  com.mysql.jdbc.PreparedStatement +-down- com.mysql.jdbc.PreparedStatement.BatchParams
  com.mysql.jdbc.PreparedStatement +-down- com.mysql.jdbc.PreparedStatement.BatchVisitor
  com.mysql.jdbc.PreparedStatement +-down- com.mysql.jdbc.PreparedStatement.EmulatedPreparedStatementBindings
  com.mysql.jdbc.PreparedStatement +-down- com.mysql.jdbc.PreparedStatement.EndPoint
  com.mysql.jdbc.PreparedStatement +-down- com.mysql.jdbc.PreparedStatement.ParseInfo
  com.mysql.jdbc.PreparedStatement.AppendingBatchVisitor .up.|> com.mysql.jdbc.PreparedStatement.BatchVisitor
  com.mysql.jdbc.PreparedStatement.EmulatedPreparedStatementBindings .up.|> ParameterBindings
  com.mysql.jdbc.PreparedStatement.ParseInfo o-- com.mysql.jdbc.PreparedStatement.ParseInfo : batchHead
  com.mysql.jdbc.PreparedStatement.ParseInfo o-- com.mysql.jdbc.PreparedStatement.ParseInfo : batchODKUClause
  com.mysql.jdbc.PreparedStatement.ParseInfo o-- com.mysql.jdbc.PreparedStatement.ParseInfo : batchValues
  com.mysql.jdbc.RandomBalanceStrategy .up.|> BalanceStrategy
  com.mysql.jdbc.ReflectiveStatementInterceptorAdapter .up.|> StatementInterceptorV2
  com.mysql.jdbc.ReplicationConnectionProxy .up.|> PingTarget
  com.mysql.jdbc.ReplicationDriver .up.|> java.sql.Driver
  com.mysql.jdbc.ReplicationMySQLConnection .up.|> ReplicationConnection
  com.mysql.jdbc.ResultSetImpl .up.|> ResultSetInternalMethods
  com.mysql.jdbc.ResultSetMetaData .up.|> java.sql.ResultSetMetaData
  com.mysql.jdbc.RowDataCursor .up.|> RowData
  com.mysql.jdbc.RowDataDynamic .up.|> RowData
  com.mysql.jdbc.RowDataStatic .up.|> RowData
  com.mysql.jdbc.SequentialBalanceStrategy .up.|> BalanceStrategy
  com.mysql.jdbc.ServerPreparedStatement +-down- com.mysql.jdbc.ServerPreparedStatement.BatchedBindValues
  com.mysql.jdbc.ServerPreparedStatement +-down- com.mysql.jdbc.ServerPreparedStatement.BindValue
  com.mysql.jdbc.SocketMetadata +-down- com.mysql.jdbc.SocketMetadata.Helper
  com.mysql.jdbc.StandardLoadBalanceExceptionChecker .up.|> LoadBalanceExceptionChecker
  com.mysql.jdbc.StandardSocketFactory .up.|> SocketFactory
  com.mysql.jdbc.StandardSocketFactory .up.|> SocketMetadata
  com.mysql.jdbc.StatementImpl .up.|> Statement
  com.mysql.jdbc.StatementImpl +-down- com.mysql.jdbc.StatementImpl.CancelTask
  com.mysql.jdbc.StatementImpl.CancelTask o-- com.mysql.jdbc.StatementImpl : toCancel
  com.mysql.jdbc.StringUtils +-down- com.mysql.jdbc.StringUtils.SearchMode
  com.mysql.jdbc.Util +-down- com.mysql.jdbc.Util.RandStructcture
  com.mysql.jdbc.V1toV2StatementInterceptorAdapter .up.|> StatementInterceptorV2


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
